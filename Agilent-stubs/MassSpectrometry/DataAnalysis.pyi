from __future__ import annotations

from enum import Enum
from typing import Any, Optional, overload, Tuple, List, Type, Union

import System
import System.Collections
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization
from pyms_agilent.enums import (
    DeviceType,
    StoredDataType,
    DataUnit,
    DataValueType,
    ChromType,
    ChromSubType,
    MSLevel,
    MSScanType,
    MSStorageMode,
    SpecType,
    SpecSubType,
    SampleCategory,
    IonizationMode,
    TofMsProcessingMode,
    )
from System.ComponentModel import MarshalByValueComponent


IonPolarity = Optional[int]

class BDAFileInformation:

    def Close(self) -> None: ...

    def CombineFileInformation(self,
            _: List[IBDAFileInformation],
            ) -> IBDAFileInformation: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAFileInformation:

    @property
    def AcquisitionTime(self): ...

    @AcquisitionTime.setter
    def AcquisitionTime(self, value): ...

    def Clear(self) -> None: ...

    def Clone(self) -> IBDAFileInformation: ...

    @property
    def DataFileName(self): ...

    @DataFileName.setter
    def DataFileName(self, value): ...

    def GetDeviceName(self, _: DeviceType) -> str: ...

    def GetDeviceTable(self, _: StoredDataType) -> System.Data.DataTable: ...

    def GetSignalTable(self, _: str, __: StoredDataType) -> System.Data.DataTable: ...

    def GetSpectrumXAxisLimit(self, _: str) -> IRange: ...

    @property
    def IRMStatus(self): ...

    @IRMStatus.setter
    def IRMStatus(self, value): ...

    def IsMSDataPresent(self) -> bool: ...

    def IsNonMSDataPresent(self) -> bool: ...

    def IsStoredDataTypePresent(self, _: str, __: StoredDataType) -> bool: ...

    def IsUVSignalPresent(self, devType: DeviceType, signalName: str, devName: str) -> bool: ...

    def IsUVSpectralDataPresent(self) -> bool: ...

    @property
    def MSScanFileInformation(self): ...

    @MSScanFileInformation.setter
    def MSScanFileInformation(self, value): ...

    @property
    def MeasurementType(self): ...

    @MeasurementType.setter
    def MeasurementType(self, value): ...

    @property
    def SeparationTechnique(self): ...

    @SeparationTechnique.setter
    def SeparationTechnique(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AcquisitionTime(self) -> System.DateTime: ...

    def get_DataFileName(self) -> str: ...

    def get_IRMStatus(self) -> IRMStatus: ...

    def get_MSScanFileInformation(self) -> IBDAMSScanFileInformation: ...

    def get_MeasurementType(self) -> MeasurementType: ...

    def get_SeparationTechnique(self) -> SeparationTechnique: ...


class IBDAChromData:

    @property
    def AbundanceLimit(self): ...

    @AbundanceLimit.setter
    def AbundanceLimit(self, value): ...

    @property
    def AcquiredTimeRange(self): ...

    @AcquiredTimeRange.setter
    def AcquiredTimeRange(self, value): ...

    @property
    def ChromatogramType(self): ...

    @ChromatogramType.setter
    def ChromatogramType(self, value): ...

    def Clone(self) -> IBDAChromData: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    def GetXAxisInfoChrom(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfoChrom(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def IsChromatogram(self): ...

    @IsChromatogram.setter
    def IsChromatogram(self, value): ...

    @property
    def IsCycleSummed(self): ...

    @IsCycleSummed.setter
    def IsCycleSummed(self, value): ...

    @property
    def IsMassSpectrum(self): ...

    @IsMassSpectrum.setter
    def IsMassSpectrum(self, value): ...

    @property
    def IsPrimaryMrm(self): ...

    @IsPrimaryMrm.setter
    def IsPrimaryMrm(self, value): ...

    @property
    def IsUvSpectrum(self): ...

    @IsUvSpectrum.setter
    def IsUvSpectrum(self, value): ...

    @property
    def MSLevelInfo(self): ...

    @MSLevelInfo.setter
    def MSLevelInfo(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MSStorageMode(self): ...

    @MSStorageMode.setter
    def MSStorageMode(self, value): ...

    @property
    def MZOfInterest(self): ...

    @MZOfInterest.setter
    def MZOfInterest(self, value): ...

    @property
    def MeasuredMassRange(self): ...

    @MeasuredMassRange.setter
    def MeasuredMassRange(self, value): ...

    @property
    def MzRegionsWereExcluded(self): ...

    @MzRegionsWereExcluded.setter
    def MzRegionsWereExcluded(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def SamplingPeriod(self): ...

    @SamplingPeriod.setter
    def SamplingPeriod(self, value): ...

    @property
    def SignalDescription(self): ...

    @SignalDescription.setter
    def SignalDescription(self, value): ...

    @property
    def SignalName(self): ...

    @SignalName.setter
    def SignalName(self, value): ...

    @property
    def Threshold(self): ...

    @Threshold.setter
    def Threshold(self, value): ...

    @property
    def TotalDataPoints(self): ...

    @TotalDataPoints.setter
    def TotalDataPoints(self, value): ...

    @property
    def XArray(self): ...

    @XArray.setter
    def XArray(self, value): ...

    @property
    def YArray(self): ...

    @YArray.setter
    def YArray(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbundanceLimit(self) -> float: ...

    def get_AcquiredTimeRange(self) -> List[IRange]: ...

    def get_ChromatogramType(self) -> ChromType: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsChromatogram(self) -> bool: ...

    def get_IsCycleSummed(self) -> bool: ...

    def get_IsMassSpectrum(self) -> bool: ...

    def get_IsPrimaryMrm(self) -> bool: ...

    def get_IsUvSpectrum(self) -> bool: ...

    def get_MSLevelInfo(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MSStorageMode(self) -> MSStorageMode: ...

    def get_MZOfInterest(self) -> List[IRange]: ...

    def get_MeasuredMassRange(self) -> List[IRange]: ...

    def get_MzRegionsWereExcluded(self) -> bool: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_SamplingPeriod(self) -> float: ...

    def get_SignalDescription(self) -> str: ...

    def get_SignalName(self) -> str: ...

    def get_Threshold(self) -> float: ...

    def get_TotalDataPoints(self) -> int: ...

    def get_XArray(self) -> List[float]: ...

    def get_YArray(self) -> List[float]: ...


class SignalInfo:

    @property
    def DeviceInformation(self) -> IDeviceInfo: ...

    @DeviceInformation.setter
    def DeviceInformation(self, value: IDeviceInfo): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SignalName(self) -> str: ...

    @SignalName.setter
    def SignalName(self, value: str): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceInformation(self) -> IDeviceInfo: ...

    def get_SignalName(self) -> str: ...

    def set_DeviceInformation(self, _: IDeviceInfo) -> None: ...

    def set_SignalName(self, _: str) -> None: ...


class BDAChromData:

    def Add(self, _: BDAChromData) -> BDAChromData: ...

    @property
    def ChromFilter(self): ...

    @ChromFilter.setter
    def ChromFilter(self, value): ...

    def Cleanup(self) -> None: ...

    def Clear(self) -> None: ...

    def Clone(self) -> IBDAChromData: ...

    def CreateBDAChromData(self,
            _: List[float],
            __: List[float],
            ___: BDAChromFilter,
            ____: MSOverallScanRecordInfo,
            _____: DeviceType,
            ) -> IBDAChromData: ...

    @property
    def DeviceIDInfo(self): ...

    @DeviceIDInfo.setter
    def DeviceIDInfo(self, value): ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def GetXAxisInfo(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfo(self, _: Any, __: Any, ___: Any) -> Tuple[None, DataUnit, DataValueType, str]: ...

    @property
    def IsICPData(self): ...

    @IsICPData.setter
    def IsICPData(self, value): ...

    @property
    def MSOverallScanRecordInformation(self): ...

    @MSOverallScanRecordInformation.setter
    def MSOverallScanRecordInformation(self, value): ...

    @property
    def MeasuredMassRange(self): ...

    @MeasuredMassRange.setter
    def MeasuredMassRange(self, value): ...

    @property
    def MeasuredMassRangeInfo(self): ...

    @MeasuredMassRangeInfo.setter
    def MeasuredMassRangeInfo(self, value): ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Smooth(self, _: SmoothingFunctionType, __: int, ___: float) -> None: ...

    def ToString(self) -> str: ...

    def TrimXRange(self, _: float, __: float) -> None: ...

    @property
    def XSpecificData(self): ...

    @XSpecificData.setter
    def XSpecificData(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ChromFilter(self) -> IBDAChromFilter: ...

    def get_DeviceIDInfo(self) -> int: ...

    def get_Disposed(self) -> bool: ...

    def get_IsICPData(self) -> bool: ...

    def get_MSOverallScanRecordInformation(self) -> MSOverallScanRecordInfo: ...

    def get_MeasuredMassRangeInfo(self) -> BDARangeCollection: ...

    def get_XSpecificData(self) -> XSpecificData: ...

    def set_ChromFilter(self, _: IBDAChromFilter) -> None: ...

    def set_MeasuredMassRange(self, _: BDARangeCollection) -> None: ...


class MSOverallScanRecordInfo:

    @property
    def AbundanceLimit(self): ...

    @AbundanceLimit.setter
    def AbundanceLimit(self, value): ...

    @property
    def CalibrationID(self): ...

    @CalibrationID.setter
    def CalibrationID(self, value): ...

    @property
    def ChargeState(self): ...

    @ChargeState.setter
    def ChargeState(self, value): ...

    @property
    def ChromScaleFactor(self): ...

    @ChromScaleFactor.setter
    def ChromScaleFactor(self, value): ...

    def Clone(self) -> MSOverallScanRecordInfo: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def CycleNumber(self): ...

    @CycleNumber.setter
    def CycleNumber(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    @property
    def FragmentationMode(self): ...

    @FragmentationMode.setter
    def FragmentationMode(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    def GetFilteredOnDetails(self,
            _: bool,
            __: bool,
            ___: bool,
            ____: bool,
            _____: bool,
            ______: bool,
            ) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def IsCEAssignedFromAcqMethod(self): ...

    @IsCEAssignedFromAcqMethod.setter
    def IsCEAssignedFromAcqMethod(self, value): ...

    @property
    def IsCollisionEnergyDynamic(self): ...

    @IsCollisionEnergyDynamic.setter
    def IsCollisionEnergyDynamic(self, value): ...

    @property
    def IsFVAssignedFromAcqMethod(self): ...

    @IsFVAssignedFromAcqMethod.setter
    def IsFVAssignedFromAcqMethod(self, value): ...

    @property
    def IsFragmentorDynamic(self): ...

    @IsFragmentorDynamic.setter
    def IsFragmentorDynamic(self, value): ...

    @property
    def IsPrimaryMrm(self): ...

    @IsPrimaryMrm.setter
    def IsPrimaryMrm(self, value): ...

    @property
    def MSLevel(self): ...

    @MSLevel.setter
    def MSLevel(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MSStorageModeInfo(self): ...

    @MSStorageModeInfo.setter
    def MSStorageModeInfo(self, value): ...

    @property
    def MeasuredNoise(self): ...

    @MeasuredNoise.setter
    def MeasuredNoise(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def MethodNumber(self): ...

    @MethodNumber.setter
    def MethodNumber(self, value): ...

    @property
    def MzOfInterestRanges(self): ...

    @MzOfInterestRanges.setter
    def MzOfInterestRanges(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def ParentIntensity(self): ...

    @ParentIntensity.setter
    def ParentIntensity(self, value): ...

    @property
    def ParentScanID(self): ...

    @ParentScanID.setter
    def ParentScanID(self, value): ...

    @property
    def ParentScanMzOfInterest(self): ...

    @ParentScanMzOfInterest.setter
    def ParentScanMzOfInterest(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SamplingPeriod(self): ...

    @SamplingPeriod.setter
    def SamplingPeriod(self, value): ...

    @property
    def ScanID(self) -> int: ...

    @ScanID.setter
    def ScanID(self, value: int): ...

    @property
    def ScanTime(self): ...

    @ScanTime.setter
    def ScanTime(self, value): ...

    @property
    def Threshold(self): ...

    @Threshold.setter
    def Threshold(self, value): ...

    @property
    def TimeSegmentID(self): ...

    @TimeSegmentID.setter
    def TimeSegmentID(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbundanceLimit(self) -> float: ...

    def get_CalibrationID(self) -> int: ...

    def get_ChargeState(self) -> int: ...

    def get_ChromScaleFactor(self) -> List[float]: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_CompensationField(self) -> float: ...

    def get_CycleNumber(self) -> int: ...

    def get_DispersionField(self) -> float: ...

    def get_FragmentationMode(self) -> FragmentationMode: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsCEAssignedFromAcqMethod(self) -> bool: ...

    def get_IsCollisionEnergyDynamic(self) -> bool: ...

    def get_IsFVAssignedFromAcqMethod(self) -> bool: ...

    def get_IsFragmentorDynamic(self) -> bool: ...

    def get_IsPrimaryMrm(self) -> bool: ...

    def get_MSLevel(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MSStorageModeInfo(self) -> MSStorageMode: ...

    def get_MeasuredNoise(self) -> float: ...

    def get_MethodNumber(self) -> int: ...

    def get_MzOfInterestRanges(self) -> BDARangeCollection: ...

    def get_ParentIntensity(self) -> float: ...

    def get_ParentScanID(self) -> int: ...

    def get_ParentScanMzOfInterest(self) -> float: ...

    def get_SamplingPeriod(self) -> float: ...

    def get_ScanID(self) -> int: ...

    def get_ScanTime(self) -> float: ...

    def get_Threshold(self) -> float: ...

    def get_TimeSegmentID(self) -> int: ...


class BDARangeCollection:

    def Add(self, _: IRange) -> int: ...

    def AddClone(self, _: IRange) -> int: ...

    @property
    def Capacity(self): ...

    @Capacity.setter
    def Capacity(self, value): ...

    def Clear(self) -> None: ...

    def Clone(self) -> BDARangeCollection: ...

    def CloneSetUnits(self, _: DataValueType, __: DataUnit) -> BDARangeCollection: ...

    def Contains(self, _: IRange) -> bool: ...

    def CopyTo(self, _: List[IRange], __: int) -> None: ...

    def CopyToClone(self, _: List[IRange], __: int) -> None: ...

    @property
    def Count(self): ...

    @Count.setter
    def Count(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def InnerList(self): ...

    @InnerList.setter
    def InnerList(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def List(self): ...

    @List.setter
    def List(self, value): ...

    def MemberwiseClone(self) -> object: ...

    def OnClear(self) -> None: ...

    def OnClearComplete(self) -> None: ...

    def OnInsert(self, _: int, __: object) -> None: ...

    def OnInsertComplete(self, _: int, __: object) -> None: ...

    def OnRemove(self, _: int, __: object) -> None: ...

    def OnRemoveComplete(self, _: int, __: object) -> None: ...

    def OnSet(self, _: int, __: object, ___: object) -> None: ...

    def OnSetComplete(self, _: int, __: object, ___: object) -> None: ...

    def OnValidate(self, _: object) -> None: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Remove(self, _: int) -> None: ...

    def RemoveAt(self, _: int) -> None: ...

    def Reverse(self) -> None: ...

    def SetEmpty(self) -> None: ...

    def Sort(self, _: SortDirection) -> None: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Capacity(self) -> int: ...

    def get_Count(self) -> int: ...

    def get_InnerList(self) -> List: ...

    def get_Item(self, _: int) -> IRange: ...

    def get_List(self) -> List: ...

    def set_Capacity(self, _: int) -> None: ...

    def set_Item(self, _: int, __: IRange) -> None: ...


class MassSpecDataReader:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetEWC(self, _: IDeviceInfo, __: IRange, ___: IRange) -> BDAChromData: ...

    def GetHashCode(self) -> int: ...

    def GetNonmsDevices(self) -> List[IDeviceInfo]: ...

    def GetSignal(self, _: Union[ISignalInfo, SignalInfo]) -> BDAChromData: ...

    def GetSignalInfo(self, _: IDeviceInfo, __: StoredDataType) -> List[ISignalInfo]: ...

    def GetTWC(self, _: IDeviceInfo) -> IBDAChromData: ...

    def GetType(self) -> Type: ...

    def GetUVSpectrum(self, _: IDeviceInfo, __: IRange) -> List[IBDASpecData]: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IMsdrDataReader:

    @property
    def ActualsInformation(self) -> IBDAActuals: ...

    @ActualsInformation.setter
    def ActualsInformation(self, value: IBDAActuals): ...

    def CloseDataFile(self: Union[IMsdrDataReader, MassSpecDataReader]) -> None: ...

    def Deisotope(self, spectrum: IBDASpecData, csaFilter: IMsdrChargeStateAssignmentFilter) -> None: ...

    @property
    def FileInformation(self) -> BDAMSScanFileInformation: ...

    @FileInformation.setter
    def FileInformation(self, value: BDAMSScanFileInformation): ...

    def GetBPC(self,
            startTime: float,
            endTime: float,
            scanType: MSScanType,
            ionPolarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> BDAChromData: ...

    def GetChromatogram(self, chromFilter: IBDAChromFilter) -> List[BDAChromData]: ...

    def GetEIC(self,
            massOfInterest: List[float],
            scanType: MSScanType,
            ionPolarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> BDAChromData: ...

    def GetEICForEachMass(self,
            massOfInterest: List[float],
            scanType: MSScanType,
            ionPolarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> List[BDAChromData]: ...

    def GetMSScanInformation(self, retentionTime: float) -> IBDAMSScanFileInformation: ...

    def GetSampleCollection(self) -> List[IBDASampleData]: ...

    def GetScanRecord(self, rowNumber: int) -> IMSScanRecord: ...

    @overload
    def GetSpectrum(self,
            retentionTime: float,
            scanType: MSScanType,
            ionPloarity: IonPolarity,
            ionMode: IonizationMode,
            peakFilter: MsdrPeakFilter = ...,
            ) -> BDASpecData: ...

    # TODO: _2
    # TODO: _3
    # TODO: _4
    # TODO: _5

    # _6
    @overload
    def GetSpectrum(self,
            rowNumber: int,
            peakMSFilter: MsdrPeakFilter,
            peakMSMSFilter: MsdrPeakFilter,
            ) -> BDASpecData: ...

    # TODO: _7
    # TODO: _8

    def GetSpectrum(self,
            *args: Any, **kwargs: Any,
            ) -> BDASpecData: ...

    @overload
    def GetTIC(self) -> BDAChromData: ...

    # _2
    @overload
    def GetTIC(self,
            startTime: float,
            endTime: float,
            scanType: MSScanType,
            ionPloarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> BDAChromData: ...

    def GetTIC(self, *args: Any, **kwargs: Any) -> BDAChromData: ...

    @property
    def MSScanFileInformation(self): ...

    @MSScanFileInformation.setter
    def MSScanFileInformation(self, value): ...

    def OpenDataFile(self: Union[IMsdrDataReader, MassSpecDataReader], fileName: str) -> bool: ...

    def RefreshDataFile(self: Union[IMsdrDataReader, MassSpecDataReader]) -> bool: ...

    @property
    def SchemaDefaultDirectory(self) -> str: ...

    @SchemaDefaultDirectory.setter
    def SchemaDefaultDirectory(self, value: str): ...

    @property
    def Version(self) -> str: ...

    @Version.setter
    def Version(self, value: str): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ActualsInformation(self) -> IBDAActuals: ...

    def get_FileInformation(self) -> IBDAFileInformation: ...

    def get_MSScanFileInformation(self) -> IBDAMSScanFileInformation: ...

    def get_SchemaDefaultDirectory(self) -> str: ...

    def get_Version(self) -> str: ...

    def set_SchemaDefaultDirectory(self, _: str) -> None: ...


class MsdrPeakFilter:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class DeviceInfo:

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_OrdinalNumber(self) -> int: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DeviceType(self, _: DeviceType) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...


class IBDAActuals:

    def GetActualCollection(self, _: float) -> List[IBDAActualData]: ...

    def GetActualNames(self) -> List[str]: ...

    def GetActualValue(self, _: str, __: List[float], ___: List[float]) -> Tuple[None, List[float], List[float]]: ...

    def GetActuals(self, _: float) -> System.Data.DataSet: ...

    def IsActualsPresent(self) -> bool: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAChromFilter:

    @property
    def ChargeStateLimits(self): ...

    @ChargeStateLimits.setter
    def ChargeStateLimits(self, value): ...

    @property
    def ChromatogramSubType(self): ...

    @ChromatogramSubType.setter
    def ChromatogramSubType(self, value): ...

    @property
    def ChromatogramType(self): ...

    @ChromatogramType.setter
    def ChromatogramType(self, value): ...

    def Clone(self) -> IBDAChromFilter: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def Description(self): ...

    @Description.setter
    def Description(self, value): ...

    @property
    def DesiredMSStorageType(self): ...

    @DesiredMSStorageType.setter
    def DesiredMSStorageType(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    @property
    def DoCycleSum(self): ...

    @DoCycleSum.setter
    def DoCycleSum(self, value): ...

    @property
    def ExtractOneChromatogramPerScanSegment(self): ...

    @ExtractOneChromatogramPerScanSegment.setter
    def ExtractOneChromatogramPerScanSegment(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def IncludeMassRanges(self): ...

    @IncludeMassRanges.setter
    def IncludeMassRanges(self, value): ...

    @property
    def Integrate(self): ...

    @Integrate.setter
    def Integrate(self, value): ...

    @property
    def IonPolarityFilter(self): ...

    @IonPolarityFilter.setter
    def IonPolarityFilter(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def MSLevelFilter(self): ...

    @MSLevelFilter.setter
    def MSLevelFilter(self, value): ...

    @property
    def MSScanTypeFilter(self): ...

    @MSScanTypeFilter.setter
    def MSScanTypeFilter(self, value): ...

    @property
    def MzOfInterestFilter(self): ...

    @MzOfInterestFilter.setter
    def MzOfInterestFilter(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ReferenceWavelength(self): ...

    @ReferenceWavelength.setter
    def ReferenceWavelength(self, value): ...

    @property
    def ScanRange(self): ...

    @ScanRange.setter
    def ScanRange(self, value): ...

    @property
    def ScanSegmentNumber(self): ...

    @ScanSegmentNumber.setter
    def ScanSegmentNumber(self, value): ...

    @property
    def SignalDescription(self): ...

    @SignalDescription.setter
    def SignalDescription(self, value): ...

    @property
    def SignalName(self): ...

    @SignalName.setter
    def SignalName(self, value): ...

    @property
    def SignalWavelength(self): ...

    @SignalWavelength.setter
    def SignalWavelength(self, value): ...

    @property
    def SingleChromatogramForAllMasses(self): ...

    @SingleChromatogramForAllMasses.setter
    def SingleChromatogramForAllMasses(self, value): ...

    @property
    def UseReference(self): ...

    @UseReference.setter
    def UseReference(self, value): ...

    @property
    def YValueInCounts(self): ...

    @YValueInCounts.setter
    def YValueInCounts(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ChargeStateLimits(self) -> IRange: ...

    def get_ChromatogramSubType(self) -> ChromSubType: ...

    def get_ChromatogramType(self) -> ChromType: ...

    def get_CollisionEnergy(self) -> IRange: ...

    def get_CompensationField(self) -> IRange: ...

    def get_Description(self) -> str: ...

    def get_DesiredMSStorageType(self) -> DesiredMSStorageType: ...

    def get_DeviceName(self) -> str: ...

    def get_DispersionField(self) -> IRange: ...

    def get_DoCycleSum(self) -> bool: ...

    def get_ExtractOneChromatogramPerScanSegment(self) -> bool: ...

    def get_FragmentorVoltage(self) -> IRange: ...

    def get_IncludeMassRanges(self) -> List[IRange]: ...

    def get_Integrate(self) -> bool: ...

    def get_IonPolarityFilter(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_MSLevelFilter(self) -> MSLevel: ...

    def get_MSScanTypeFilter(self) -> MSScanType: ...

    def get_MzOfInterestFilter(self) -> List[IRange]: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ReferenceWavelength(self) -> IRange: ...

    def get_ScanRange(self) -> IRange: ...

    def get_ScanSegmentNumber(self) -> IRange: ...

    def get_SignalDescription(self) -> str: ...

    def get_SignalName(self) -> str: ...

    def get_SignalWavelength(self) -> IRange: ...

    def get_SingleChromatogramForAllMasses(self) -> bool: ...

    def get_UseReference(self) -> bool: ...

    def get_YValueInCounts(self) -> bool: ...

    def set_ChargeStateLimits(self, _: IRange) -> None: ...

    def set_ChromatogramSubType(self, _: ChromSubType) -> None: ...

    def set_ChromatogramType(self, _: ChromType) -> None: ...

    def set_CollisionEnergy(self, _: IRange) -> None: ...

    def set_CompensationField(self, _: IRange) -> None: ...

    def set_Description(self, _: str) -> None: ...

    def set_DesiredMSStorageType(self, _: DesiredMSStorageType) -> None: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DispersionField(self, _: IRange) -> None: ...

    def set_DoCycleSum(self, _: bool) -> None: ...

    def set_ExtractOneChromatogramPerScanSegment(self, _: bool) -> None: ...

    def set_FragmentorVoltage(self, _: IRange) -> None: ...

    def set_IncludeMassRanges(self, _: List[IRange]) -> None: ...

    def set_Integrate(self, _: bool) -> None: ...

    def set_IonPolarityFilter(self, _: IonPolarity) -> None: ...

    def set_IonizationMode(self, _: IonizationMode) -> None: ...

    def set_MSLevelFilter(self, _: MSLevel) -> None: ...

    def set_MSScanTypeFilter(self, _: MSScanType) -> None: ...

    def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...

    def set_ReferenceWavelength(self, _: IRange) -> None: ...

    def set_ScanRange(self, _: IRange) -> None: ...

    def set_ScanSegmentNumber(self, _: IRange) -> None: ...

    def set_SignalDescription(self, _: str) -> None: ...

    def set_SignalName(self, _: str) -> None: ...

    def set_SignalWavelength(self, _: IRange) -> None: ...

    def set_SingleChromatogramForAllMasses(self, _: bool) -> None: ...

    def set_UseReference(self, _: bool) -> None: ...

    def set_YValueInCounts(self, _: bool) -> None: ...


class BDAChromFilter:

    def Clone(self) -> IBDAChromFilter: ...

    def Copy(self, _: BDAChromFilter) -> None: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SmoothFunction(self): ...

    @SmoothFunction.setter
    def SmoothFunction(self, value): ...

    @property
    def SmoothFunctionWidth(self): ...

    @SmoothFunctionWidth.setter
    def SmoothFunctionWidth(self, value): ...

    @property
    def SmoothGaussianWidth(self): ...

    @SmoothGaussianWidth.setter
    def SmoothGaussianWidth(self, value): ...

    @property
    def Smoothed(self): ...

    @Smoothed.setter
    def Smoothed(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_SmoothFunction(self) -> SmoothingFunctionType: ...

    def get_SmoothFunctionWidth(self) -> int: ...

    def get_SmoothGaussianWidth(self) -> float: ...

    def get_Smoothed(self) -> bool: ...

    def set_SmoothFunction(self, _: SmoothingFunctionType) -> None: ...

    def set_SmoothFunctionWidth(self, _: int) -> None: ...

    def set_SmoothGaussianWidth(self, _: float) -> None: ...

    def set_Smoothed(self, _: bool) -> None: ...


class IBDASpecData:

    @property
    def AbundanceLimit(self): ...

    @AbundanceLimit.setter
    def AbundanceLimit(self, value): ...

    @property
    def AcquiredTimeRange(self): ...

    @AcquiredTimeRange.setter
    def AcquiredTimeRange(self, value): ...

    @property
    def ChromPeakIndex(self): ...

    @ChromPeakIndex.setter
    def ChromPeakIndex(self, value): ...

    def Clone(self) -> IBDASpecData: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    def ConvertDataToMassUnits(self) -> None: ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    def GetPrecursorCharge(self, _: int) -> Tuple[bool, int]: ...

    def GetPrecursorIntensity(self, _: float) -> Tuple[bool, int]: ...

    def GetPrecursorIon(self, _: int) -> List[float]: ...

    def GetXAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def IsChromatogram(self): ...

    @IsChromatogram.setter
    def IsChromatogram(self, value): ...

    @property
    def IsDataInMassUnit(self): ...

    @IsDataInMassUnit.setter
    def IsDataInMassUnit(self, value): ...

    @property
    def IsMassSpectrum(self): ...

    @IsMassSpectrum.setter
    def IsMassSpectrum(self, value): ...

    @property
    def IsUvSpectrum(self): ...

    @IsUvSpectrum.setter
    def IsUvSpectrum(self, value): ...

    @property
    def MSLevelInfo(self): ...

    @MSLevelInfo.setter
    def MSLevelInfo(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MSStorageMode(self): ...

    @MSStorageMode.setter
    def MSStorageMode(self, value): ...

    @property
    def MZOfInterest(self): ...

    @MZOfInterest.setter
    def MZOfInterest(self, value): ...

    @property
    def MeasuredMassRange(self): ...

    @MeasuredMassRange.setter
    def MeasuredMassRange(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ParentScanId(self): ...

    @ParentScanId.setter
    def ParentScanId(self, value): ...

    @property
    def SamplingPeriod(self): ...

    @SamplingPeriod.setter
    def SamplingPeriod(self, value): ...

    def ScaleYValues(self, _: float, __: float) -> None: ...

    @property
    def ScanId(self): ...

    @ScanId.setter
    def ScanId(self, value): ...

    @property
    def SpecFilter(self): ...

    @SpecFilter.setter
    def SpecFilter(self, value): ...

    @property
    def SpectrumType(self): ...

    @SpectrumType.setter
    def SpectrumType(self, value): ...

    @property
    def Threshold(self): ...

    @Threshold.setter
    def Threshold(self, value): ...

    @property
    def TofCalibration(self): ...

    @TofCalibration.setter
    def TofCalibration(self, value): ...

    @property
    def TotalDataPoints(self): ...

    @TotalDataPoints.setter
    def TotalDataPoints(self, value): ...

    @property
    def TotalScanCount(self): ...

    @TotalScanCount.setter
    def TotalScanCount(self, value): ...

    def TrimXRange(self, _: List[IRange], __: bool) -> None: ...

    @property
    def XArray(self): ...

    @XArray.setter
    def XArray(self, value): ...

    @property
    def YArray(self): ...

    @YArray.setter
    def YArray(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbundanceLimit(self) -> float: ...

    def get_AcquiredTimeRange(self) -> List[IRange]: ...

    def get_ChromPeakIndex(self) -> int: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_CompensationField(self) -> float: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_DispersionField(self) -> float: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsChromatogram(self) -> bool: ...

    def get_IsDataInMassUnit(self) -> bool: ...

    def get_IsMassSpectrum(self) -> bool: ...

    def get_IsUvSpectrum(self) -> bool: ...

    def get_MSLevelInfo(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MSStorageMode(self) -> MSStorageMode: ...

    def get_MZOfInterest(self) -> List[IRange]: ...

    def get_MeasuredMassRange(self) -> IRange: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ParentScanId(self) -> int: ...

    def get_SamplingPeriod(self) -> float: ...

    def get_ScanId(self) -> int: ...

    def get_SpecFilter(self) -> IBDASpecFilter: ...

    def get_SpectrumType(self) -> SpecType: ...

    def get_Threshold(self) -> float: ...

    def get_TofCalibration(self) -> Any: ...

    def get_TotalDataPoints(self) -> int: ...

    def get_TotalScanCount(self) -> int: ...

    def get_XArray(self) -> List[float]: ...

    def get_YArray(self) -> List[float]: ...

    def set_ChromPeakIndex(self, _: int) -> None: ...

    def set_SpecFilter(self, _: IBDASpecFilter) -> None: ...


class BDADataAccess:

    @property
    def CancelIndicator(self): ...

    @CancelIndicator.setter
    def CancelIndicator(self, value): ...

    def Cleanup(self) -> None: ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetActualsForTimeRange(self, _: float, __: float) -> List[IBDAActualData]: ...

    def GetActualsdDefinitionForTimeRange(self,
            _: float,
            __: float,
            ) -> List[IBDAActualData]: ...

    def GetDeviceTable(self) -> System.Data.DataTable: ...

    def GetHashCode(self) -> int: ...

    def GetMsScanDirSize(self, _: str) -> int: ...

    def GetSampleData(self,
            _: str,
            __: SampleCategory,
            ___: List[str],
            ____: List[str],
            _____: List[str],
            ) -> None: ...

    def GetTimeSegmentsIDArray(self) -> List[int]: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def MsDeviceInfo(self): ...

    @MsDeviceInfo.setter
    def MsDeviceInfo(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ProgressEvent(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def add_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...

    def get_CancelIndicator(self) -> CancelIndicator: ...

    def get_Disposed(self) -> bool: ...

    def get_MsDeviceInfo(self) -> IBDAMsDeviceInfo: ...

    def remove_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...

    def set_CancelIndicator(self, _: CancelIndicator) -> None: ...


class BDAMSScanFileInformation:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MSScanFileInformationIterator(self, *args, **kwargs) -> Any: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAMSScanFileInformation:

    def Clone(self) -> IBDAMSScanFileInformation: ...

    @property
    def CollisionEnergies(self): ...

    @CollisionEnergies.setter
    def CollisionEnergies(self, value): ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationFieldValues(self): ...

    @CompensationFieldValues.setter
    def CompensationFieldValues(self, value): ...

    def Contains(self, _: MSScanType) -> bool: ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def DispersionFieldValues(self): ...

    @DispersionFieldValues.setter
    def DispersionFieldValues(self, value): ...

    @property
    def FileHasMassSpectralData(self): ...

    @FileHasMassSpectralData.setter
    def FileHasMassSpectralData(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def FragmentorVoltages(self): ...

    @FragmentorVoltages.setter
    def FragmentorVoltages(self, value): ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    def GetMSScanTypeInformation(self, _: MSScanType) -> IBDAMSScanTypeInformation: ...

    @property
    def IonModes(self): ...

    @IonModes.setter
    def IonModes(self, value): ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    def IsFixedCycleLengthDataPresent(self) -> bool: ...

    def IsMultipleSpectraPerScanPresent(self) -> bool: ...

    @property
    def MRMTransitions(self): ...

    @MRMTransitions.setter
    def MRMTransitions(self, value): ...

    @property
    def MSLevel(self): ...

    @MSLevel.setter
    def MSLevel(self, value): ...

    @property
    def MassRange(self): ...

    @MassRange.setter
    def MassRange(self, value): ...

    @property
    def MzScanRangeMaximum(self): ...

    @MzScanRangeMaximum.setter
    def MzScanRangeMaximum(self, value): ...

    @property
    def MzScanRangeMinimum(self): ...

    @MzScanRangeMinimum.setter
    def MzScanRangeMinimum(self, value): ...

    @property
    def SIMIons(self): ...

    @SIMIons.setter
    def SIMIons(self, value): ...

    @property
    def ScanMethodNumbers(self): ...

    @ScanMethodNumbers.setter
    def ScanMethodNumbers(self, value): ...

    @property
    def ScanTypes(self): ...

    @ScanTypes.setter
    def ScanTypes(self, value): ...

    @property
    def ScanTypesInformationCount(self): ...

    @ScanTypesInformationCount.setter
    def ScanTypesInformationCount(self, value): ...

    @property
    def SpectraFormat(self): ...

    @property
    def TotalScansPresent(self): ...

    @TotalScansPresent.setter
    def TotalScansPresent(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CollisionEnergies(self) -> ICoreList[float]: ...

    def get_CollisionEnergy(self) -> List[float]: ...

    def get_CompensationFieldValues(self) -> List[float]: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_DispersionFieldValues(self) -> List[float]: ...

    def get_FileHasMassSpectralData(self) -> bool: ...

    def get_FragmentorVoltage(self) -> List[float]: ...

    def get_FragmentorVoltages(self) -> ICoreList[float]: ...

    def get_IonModes(self) -> IonizationMode: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_MRMTransitions(self) -> List[IRange]: ...

    def get_MSLevel(self) -> MSLevel: ...

    def get_MassRange(self) -> IRange: ...

    def get_MzScanRangeMaximum(self) -> float: ...

    def get_MzScanRangeMinimum(self) -> float: ...

    def get_SIMIons(self) -> List[float]: ...

    def get_ScanMethodNumbers(self) -> List[int]: ...

    def get_ScanTypes(self) -> MSScanType: ...

    def get_ScanTypesInformationCount(self) -> int: ...

    def get_SpectraFormat(self) -> MSStorageMode: ...

    def get_TotalScansPresent(self) -> int: ...


class ISignalInfo:

    @property
    def DeviceInformation(self): ...

    @DeviceInformation.setter
    def DeviceInformation(self, value): ...

    @property
    def SignalName(self): ...

    @SignalName.setter
    def SignalName(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceInformation(self) -> IDeviceInfo: ...

    def get_SignalName(self) -> str: ...

    def set_DeviceInformation(self, _: IDeviceInfo) -> None: ...

    def set_SignalName(self, _: str) -> None: ...


class BDASpecData:

    @property
    def AcquiredTimeRangesInfo(self): ...

    @AcquiredTimeRangesInfo.setter
    def AcquiredTimeRangesInfo(self, value): ...

    @property
    def Calibration(self): ...

    @Calibration.setter
    def Calibration(self, value): ...

    def Cleanup(self) -> None: ...

    def Clear(self) -> None: ...

    def Clone(self) -> IBDASpecData: ...

    @property
    def DeviceIDInfo(self): ...

    @DeviceIDInfo.setter
    def DeviceIDInfo(self, value): ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def FileXSamplingType(self): ...

    @FileXSamplingType.setter
    def FileXSamplingType(self, value): ...

    @property
    def FilteredScanCountInfo(self): ...

    @FilteredScanCountInfo.setter
    def FilteredScanCountInfo(self, value): ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetPointDataValueTypeForIndex(self, _: int) -> DataValueType: ...

    def GetType(self) -> Type: ...

    def GetXAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    @property
    def IsDataInMassUnits(self): ...

    @IsDataInMassUnits.setter
    def IsDataInMassUnits(self, value): ...

    def IsDeviceOfTypeTOF(self) -> bool: ...

    @property
    def IsEmptySpectrumInfo(self): ...

    @IsEmptySpectrumInfo.setter
    def IsEmptySpectrumInfo(self, value): ...

    @property
    def IsICPData(self): ...

    @IsICPData.setter
    def IsICPData(self, value): ...

    @property
    def IsNullMSSpectrumFormat(self): ...

    @IsNullMSSpectrumFormat.setter
    def IsNullMSSpectrumFormat(self, value): ...

    @property
    def MSOverallScanRecordInformation(self): ...

    @MSOverallScanRecordInformation.setter
    def MSOverallScanRecordInformation(self, value): ...

    @property
    def MSSpectrumFormatXSamplingType(self): ...

    @MSSpectrumFormatXSamplingType.setter
    def MSSpectrumFormatXSamplingType(self, value): ...

    @property
    def MeasuredMassRangeInfo(self): ...

    @MeasuredMassRangeInfo.setter
    def MeasuredMassRangeInfo(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def OverallAcqTimeRangeInfo(self): ...

    @OverallAcqTimeRangeInfo.setter
    def OverallAcqTimeRangeInfo(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SelectedIonsInfo(self): ...

    @SelectedIonsInfo.setter
    def SelectedIonsInfo(self, value): ...

    def SetData(self, _: List[float], __: List[float]) -> None: ...

    @property
    def SpectrumTypeInfo(self): ...

    @SpectrumTypeInfo.setter
    def SpectrumTypeInfo(self, value): ...

    @property
    def StorageMode(self): ...

    @StorageMode.setter
    def StorageMode(self, value): ...

    def ToString(self) -> str: ...

    @property
    def XArrayNotExpanded(self): ...

    @XArrayNotExpanded.setter
    def XArrayNotExpanded(self, value): ...

    @property
    def XSpecificData(self): ...

    @XSpecificData.setter
    def XSpecificData(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AcquiredTimeRangesInfo(self) -> BDARangeCollection: ...

    def get_Calibration(self) -> Any: ...

    def get_DeviceIDInfo(self) -> int: ...

    def get_Disposed(self) -> bool: ...

    def get_FileXSamplingType(self) -> XSamplingType: ...

    def get_FilteredScanCountInfo(self) -> int: ...

    def get_IsDataInMassUnits(self) -> bool: ...

    def get_IsEmptySpectrumInfo(self) -> bool: ...

    def get_IsICPData(self) -> bool: ...

    def get_IsNullMSSpectrumFormat(self) -> bool: ...

    def get_MSOverallScanRecordInformation(self) -> MSOverallScanRecordInfo: ...

    def get_MSSpectrumFormatXSamplingType(self) -> XSamplingType: ...

    def get_MeasuredMassRangeInfo(self) -> IRange: ...

    def get_OverallAcqTimeRangeInfo(self) -> IRange: ...

    def get_SelectedIonsInfo(self) -> List[float]: ...

    def get_SpectrumTypeInfo(self) -> SpecType: ...

    def get_StorageMode(self) -> MSStorageMode: ...

    def get_XArrayNotExpanded(self) -> List[float]: ...

    def get_XSpecificData(self) -> XSpecificData: ...

    def set_Calibration(self, _: Any) -> None: ...

    def set_StorageMode(self, _: MSStorageMode) -> None: ...


class IBDAMsDeviceInfo:

    @property
    def BaseAdcInterval(self): ...

    @BaseAdcInterval.setter
    def BaseAdcInterval(self, value): ...

    @property
    def DecisionEngineMode(self): ...

    @DecisionEngineMode.setter
    def DecisionEngineMode(self, value): ...

    @property
    def DecisionEngineVersion(self): ...

    @DecisionEngineVersion.setter
    def DecisionEngineVersion(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def DriverVersion(self): ...

    @DriverVersion.setter
    def DriverVersion(self, value): ...

    @property
    def DualGainRatio(self): ...

    @DualGainRatio.setter
    def DualGainRatio(self, value): ...

    @property
    def FirmwareVersion(self): ...

    @FirmwareVersion.setter
    def FirmwareVersion(self, value): ...

    @property
    def MsProcessingMode(self): ...

    @MsProcessingMode.setter
    def MsProcessingMode(self, value): ...

    @property
    def NominalMassResolution(self): ...

    @NominalMassResolution.setter
    def NominalMassResolution(self, value): ...

    @property
    def PreampOffsetHighGain(self): ...

    @PreampOffsetHighGain.setter
    def PreampOffsetHighGain(self, value): ...

    @property
    def PreampOffsetLowGain(self): ...

    @PreampOffsetLowGain.setter
    def PreampOffsetLowGain(self, value): ...

    @property
    def TuneMassRangeMax(self): ...

    @TuneMassRangeMax.setter
    def TuneMassRangeMax(self, value): ...

    @property
    def TuneMassRangeMin(self): ...

    @TuneMassRangeMin.setter
    def TuneMassRangeMin(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_BaseAdcInterval(self) -> float: ...

    def get_DecisionEngineMode(self) -> int: ...

    def get_DecisionEngineVersion(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_DriverVersion(self) -> str: ...

    def get_DualGainRatio(self) -> float: ...

    def get_FirmwareVersion(self) -> str: ...

    def get_MsProcessingMode(self) -> TofMsProcessingMode: ...

    def get_NominalMassResolution(self) -> int: ...

    def get_PreampOffsetHighGain(self) -> float: ...

    def get_PreampOffsetLowGain(self) -> float: ...

    def get_TuneMassRangeMax(self) -> float: ...

    def get_TuneMassRangeMin(self) -> float: ...


class BDAProgressEventHandler:

    def BeginInvoke(self,
            _: object,
            __: BDAProgressEventArgs,
            ___: Any,
            ____: object,
            ) -> Any: ...

    def Clone(self) -> object: ...

    def Combine(self, _: Any, __: Any) -> Any: ...

    def CombineImpl(self, _: Any) -> Any: ...

    def CreateDelegate(self,
            _: Type,
            __: object,
            ___: str,
            ____: bool,
            _____: bool,
            ) -> Any: ...

    def DynamicInvoke(self, _: List[object]) -> object: ...

    def DynamicInvokeImpl(self, _: List[object]) -> object: ...

    def EndInvoke(self, _: Any) -> None: ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetInvocationList(self) -> List[Any]: ...

    def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

    def GetObjectData(self,
            _: System.Runtime.Serialization.SerializationInfo,
            __: System.Runtime.Serialization.StreamingContext,
            ) -> None: ...

    def GetType(self) -> Type: ...

    def Invoke(self, _: object, __: BDAProgressEventArgs) -> None: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Method(self): ...

    @Method.setter
    def Method(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Remove(self, _: Any, __: Any) -> Any: ...

    def RemoveAll(self, _: Any, __: Any) -> Any: ...

    def RemoveImpl(self, _: Any) -> Any: ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Method(self) -> System.Reflection.MethodInfo: ...

    def get_Target(self) -> object: ...

    def op_Equality(self, _: Any, __: Any) -> bool: ...

    def op_Inequality(self, _: Any, __: Any) -> bool: ...


class IRange:

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: IRange) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeConsistent(self) -> None: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ValueString(self, _: bool, __: int) -> str: ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def get_Start(self) -> float: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...


class IDeviceInfo:

    @property
    def DeviceName(self) -> str: ...

    @DeviceName.setter
    def DeviceName(self, value: str): ...

    @property
    def DeviceType(self) -> DeviceType: ...

    @DeviceType.setter
    def DeviceType(self, value: DeviceType): ...

    @property
    def OrdinalNumber(self) -> int: ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value: int): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_OrdinalNumber(self) -> int: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DeviceType(self, _: DeviceType) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...


class DisposableBase:

    def Cleanup(self) -> None: ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Disposed(self) -> bool: ...


class XSamplingType:

    def BoundedRegions(self, *args, **kwargs) -> Any: ...

    def CompareTo(self, _: object) -> int: ...

    def Continuous(self, *args, **kwargs) -> Any: ...

    def Discontinuous(self, *args, **kwargs) -> Any: ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def Format(self, _: Type, __: object, ___: str) -> str: ...

    def GetHashCode(self) -> int: ...

    def GetName(self, _: Type, __: object) -> str: ...

    def GetNames(self, _: Type) -> List[str]: ...

    def GetType(self) -> Type: ...

    def GetTypeCode(self) -> Any: ...

    def GetUnderlyingType(self, _: Type) -> Type: ...

    def GetValues(self, _: Type) -> List: ...

    def HasFlag(self, _: Enum) -> bool: ...

    def Irregular(self, *args, **kwargs) -> Any: ...

    def IsDefined(self, _: Type, __: object) -> bool: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def Parse(self, _: Type, __: str, ___: bool) -> object: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SparseStepped(self, *args, **kwargs) -> Any: ...

    def Stepped(self, *args, **kwargs) -> Any: ...

    def ToObject(self, _: Type, __: object) -> object: ...

    def ToString(self, _: str, __: Any) -> str: ...

    def TryParse(self, *args, **kwargs) -> Any: ...

    def Unspecified(self, *args, **kwargs) -> Any: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IUnitsAndPrecision:

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    def Equals(self, _: IUnitsAndPrecision) -> bool: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...


class IReadOnlyObject:

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_IsReadOnly(self) -> bool: ...


class DisplayPrecisionType:

    def CompareTo(self, _: object) -> int: ...

    def DigitsAfterDecimal(self, *args, **kwargs) -> Any: ...

    def Equals(self, _: object) -> bool: ...

    def Exponential(self, *args, **kwargs) -> Any: ...

    def Finalize(self) -> None: ...

    def Format(self, _: Type, __: object, ___: str) -> str: ...

    def GetHashCode(self) -> int: ...

    def GetName(self, _: Type, __: object) -> str: ...

    def GetNames(self, _: Type) -> List[str]: ...

    def GetType(self) -> Type: ...

    def GetTypeCode(self) -> Any: ...

    def GetUnderlyingType(self, _: Type) -> Type: ...

    def GetValues(self, _: Type) -> List: ...

    def HasFlag(self, _: Enum) -> bool: ...

    def IsDefined(self, _: Type, __: object) -> bool: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def Parse(self, _: Type, __: str, ___: bool) -> object: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToObject(self, _: Type, __: object) -> object: ...

    def ToString(self, _: str, __: Any) -> str: ...

    def TryParse(self, *args, **kwargs) -> Any: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAActualData:

    @property
    def Category(self): ...

    @Category.setter
    def Category(self, value): ...

    @property
    def DataValue(self): ...

    @DataValue.setter
    def DataValue(self, value): ...

    @property
    def DisplayEffectType(self): ...

    @DisplayEffectType.setter
    def DisplayEffectType(self, value): ...

    @property
    def DisplayName(self): ...

    @DisplayName.setter
    def DisplayName(self, value): ...

    @property
    def DisplayValue(self): ...

    @DisplayValue.setter
    def DisplayValue(self, value): ...

    @property
    def InternalName(self): ...

    @InternalName.setter
    def InternalName(self, value): ...

    @property
    def Unit(self): ...

    @Unit.setter
    def Unit(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Category(self) -> str: ...

    def get_DataValue(self) -> object: ...

    def get_DisplayEffectType(self) -> DisplayEffectType: ...

    def get_DisplayName(self) -> str: ...

    def get_DisplayValue(self) -> str: ...

    def get_InternalName(self) -> str: ...

    def get_Unit(self) -> str: ...

    def set_Category(self, _: str) -> None: ...

    def set_DataValue(self, _: object) -> None: ...

    def set_DisplayEffectType(self, _: DisplayEffectType) -> None: ...

    def set_DisplayName(self, _: str) -> None: ...

    def set_DisplayValue(self, _: str) -> None: ...

    def set_InternalName(self, _: str) -> None: ...

    def set_Unit(self, _: str) -> None: ...


class IBDASpecFilter:

    @property
    def AverageSpectrum(self): ...

    @AverageSpectrum.setter
    def AverageSpectrum(self, value): ...

    @property
    def BackgroundScanRanges(self): ...

    @BackgroundScanRanges.setter
    def BackgroundScanRanges(self, value): ...

    @property
    def ChromPeakIndex(self): ...

    @ChromPeakIndex.setter
    def ChromPeakIndex(self, value): ...

    def Clone(self) -> IBDASpecFilter: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def DesiredMSStorageType(self): ...

    @DesiredMSStorageType.setter
    def DesiredMSStorageType(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    def Equals(self, _: IBDASpecFilter) -> bool: ...

    @property
    def ExtractByCycle(self): ...

    @ExtractByCycle.setter
    def ExtractByCycle(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def IonPolarityFilter(self): ...

    @IonPolarityFilter.setter
    def IonPolarityFilter(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def MSLevelFilter(self): ...

    @MSLevelFilter.setter
    def MSLevelFilter(self, value): ...

    @property
    def MSScanTypeFilter(self): ...

    @MSScanTypeFilter.setter
    def MSScanTypeFilter(self, value): ...

    @property
    def MassRange(self): ...

    @MassRange.setter
    def MassRange(self, value): ...

    @property
    def MassUnits(self): ...

    @MassUnits.setter
    def MassUnits(self, value): ...

    @property
    def MzOfInterestFilter(self): ...

    @MzOfInterestFilter.setter
    def MzOfInterestFilter(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ScaleFactorY(self): ...

    @ScaleFactorY.setter
    def ScaleFactorY(self, value): ...

    @property
    def ScaledAbundanceLimit(self): ...

    @ScaledAbundanceLimit.setter
    def ScaledAbundanceLimit(self, value): ...

    @property
    def ScanIds(self): ...

    @ScanIds.setter
    def ScanIds(self, value): ...

    @property
    def ScanRange(self): ...

    @ScanRange.setter
    def ScanRange(self, value): ...

    @property
    def SpectrumSubType(self): ...

    @SpectrumSubType.setter
    def SpectrumSubType(self, value): ...

    @property
    def SpectrumType(self): ...

    @SpectrumType.setter
    def SpectrumType(self, value): ...

    @property
    def XClipRanges(self): ...

    @XClipRanges.setter
    def XClipRanges(self, value): ...

    @property
    def ZeroBoundWhenClipping(self): ...

    @ZeroBoundWhenClipping.setter
    def ZeroBoundWhenClipping(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AverageSpectrum(self) -> bool: ...

    def get_BackgroundScanRanges(self) -> List[IRange]: ...

    def get_ChromPeakIndex(self) -> int: ...

    def get_CollisionEnergy(self) -> IRange: ...

    def get_CompensationField(self) -> IRange: ...

    def get_DesiredMSStorageType(self) -> DesiredMSStorageType: ...

    def get_DeviceName(self) -> str: ...

    def get_DispersionField(self) -> IRange: ...

    def get_ExtractByCycle(self) -> bool: ...

    def get_FragmentorVoltage(self) -> IRange: ...

    def get_IonPolarityFilter(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_MSLevelFilter(self) -> MSLevel: ...

    def get_MSScanTypeFilter(self) -> MSScanType: ...

    def get_MassRange(self) -> IRange: ...

    def get_MassUnits(self) -> bool: ...

    def get_MzOfInterestFilter(self) -> List[IRange]: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ScaleFactorY(self) -> float: ...

    def get_ScaledAbundanceLimit(self) -> float: ...

    def get_ScanIds(self) -> List[int]: ...

    def get_ScanRange(self) -> List[IRange]: ...

    def get_SpectrumSubType(self) -> SpecSubType: ...

    def get_SpectrumType(self) -> SpecType: ...

    def get_XClipRanges(self) -> List[IRange]: ...

    def get_ZeroBoundWhenClipping(self) -> bool: ...

    def set_AverageSpectrum(self, _: bool) -> None: ...

    def set_BackgroundScanRanges(self, _: List[IRange]) -> None: ...

    def set_ChromPeakIndex(self, _: int) -> None: ...

    def set_CollisionEnergy(self, _: IRange) -> None: ...

    def set_CompensationField(self, _: IRange) -> None: ...

    def set_DesiredMSStorageType(self, _: DesiredMSStorageType) -> None: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DispersionField(self, _: IRange) -> None: ...

    def set_ExtractByCycle(self, _: bool) -> None: ...

    def set_FragmentorVoltage(self, _: IRange) -> None: ...

    def set_IonPolarityFilter(self, _: IonPolarity) -> None: ...

    def set_IonizationMode(self, _: IonizationMode) -> None: ...

    def set_MSLevelFilter(self, _: MSLevel) -> None: ...

    def set_MSScanTypeFilter(self, _: MSScanType) -> None: ...

    def set_MassRange(self, _: IRange) -> None: ...

    def set_MassUnits(self, _: bool) -> None: ...

    def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...

    def set_ScaleFactorY(self, _: float) -> None: ...

    def set_ScaledAbundanceLimit(self, _: float) -> None: ...

    def set_ScanIds(self, _: List[int]) -> None: ...

    def set_ScanRange(self, _: List[IRange]) -> None: ...

    def set_SpectrumSubType(self, _: SpecSubType) -> None: ...

    def set_SpectrumType(self, _: SpecType) -> None: ...

    def set_XClipRanges(self, _: List[IRange]) -> None: ...

    def set_ZeroBoundWhenClipping(self, _: bool) -> None: ...


class IBDAMSScanTypeInformation:

    def Clone(self) -> IBDAMSScanTypeInformation: ...

    def Contains(self, _: float) -> bool: ...

    @property
    def IonPolarities(self): ...

    @IonPolarities.setter
    def IonPolarities(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MzOfInterest(self): ...

    @MzOfInterest.setter
    def MzOfInterest(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_IonPolarities(self) -> IonPolarity: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MzOfInterest(self) -> List[float]: ...


class ICoreList:

    def Add(self, _: Any) -> None: ...

    def AddDelegate(self, _: ChangeNotifyDelegate) -> None: ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clear(self) -> None: ...

    def Clone(self) -> ICoreList[Any]: ...

    def Contains(self, _: Any) -> bool: ...

    def CopyTo(self, _: List[Any], __: int) -> None: ...

    @property
    def Count(self): ...

    @Count.setter
    def Count(self, value): ...

    def Exists(self, _: System.Predicate[Any]) -> bool: ...

    def Find(self, _: System.Predicate[Any]) -> Any: ...

    def FindIndex(self, _: System.Predicate[Any]) -> int: ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IndexOf(self, _: Any) -> int: ...

    def Insert(self, _: int, __: Any) -> None: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def MakeConsistent(self) -> None: ...

    def Remove(self, _: Any) -> bool: ...

    def RemoveAt(self, _: int) -> None: ...

    def RemoveDelegate(self, _: ChangeNotifyDelegate) -> None: ...

    def Reverse(self) -> None: ...

    def Sort(self, _: Any) -> None: ...

    def ToArray(self) -> List[Any]: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_Count(self) -> int: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_Item(self, _: int) -> Any: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_Item(self, _: int, __: Any) -> None: ...


class BDAProgressEventArgs:

    @property
    def CanCancelTask(self): ...

    @CanCancelTask.setter
    def CanCancelTask(self, value): ...

    def Empty(self, *args, **kwargs) -> Any: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PercentComplete(self): ...

    @PercentComplete.setter
    def PercentComplete(self, value): ...

    @property
    def ProgressStage(self): ...

    @ProgressStage.setter
    def ProgressStage(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def StageMessage(self): ...

    @StageMessage.setter
    def StageMessage(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CanCancelTask(self) -> bool: ...

    def get_PercentComplete(self) -> int: ...

    def get_ProgressStage(self) -> ProgressStage: ...

    def get_StageMessage(self) -> str: ...


class IBDASampleData:

    @property
    def Category(self): ...

    @Category.setter
    def Category(self, value): ...

    @property
    def DataValue(self): ...

    @DataValue.setter
    def DataValue(self, value): ...

    @property
    def DisplayName(self): ...

    @DisplayName.setter
    def DisplayName(self, value): ...

    @property
    def DisplayValue(self): ...

    @DisplayValue.setter
    def DisplayValue(self, value): ...

    @property
    def InternalName(self): ...

    @InternalName.setter
    def InternalName(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Category(self) -> SampleCategory: ...

    def get_DataValue(self) -> object: ...

    def get_DisplayName(self) -> str: ...

    def get_DisplayValue(self) -> str: ...

    def get_InternalName(self) -> str: ...

    def set_Category(self, _: SampleCategory) -> None: ...

    def set_DataValue(self, _: object) -> None: ...

    def set_DisplayName(self, _: str) -> None: ...

    def set_DisplayValue(self, _: str) -> None: ...

    def set_InternalName(self, _: str) -> None: ...


class IMSScanRecord:

    @property
    def BasePeakIntensity(self) -> float: ...

    @BasePeakIntensity.setter
    def BasePeakIntensity(self, value: float): ...

    @property
    def BasePeakMZ(self) -> float: ...

    @BasePeakMZ.setter
    def BasePeakMZ(self, value: float): ...

    @property
    def CollisionEnergy(self) -> float: ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value: float): ...

    @property
    def CompensationField(self) -> float: ...

    @property
    def DispersionField(self) -> float: ...

    @property
    def FragmentorVoltage(self) -> float: ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value: float): ...

    @property
    def IonPolarity(self) -> IonPolarity: ...

    @IonPolarity.setter
    def IonPolarity(self, value: IonPolarity): ...

    @property
    def IonizationMode(self) -> IonizationMode: ...

    @IonizationMode.setter
    def IonizationMode(self, value: IonizationMode): ...

    @property
    def IsCollisionEnergyDynamic(self) -> bool: ...

    @IsCollisionEnergyDynamic.setter
    def IsCollisionEnergyDynamic(self, value: bool): ...

    @property
    def IsFragmentorVoltageDynamic(self) -> bool: ...

    @IsFragmentorVoltageDynamic.setter
    def IsFragmentorVoltageDynamic(self, value: bool): ...

    @property
    def MSLevel(self) -> MSLevel: ...

    @MSLevel.setter
    def MSLevel(self, value: MSLevel): ...

    @property
    def MSScanType(self) -> MSScanType: ...

    @MSScanType.setter
    def MSScanType(self, value: MSScanType): ...

    @property
    def MZOfInterest(self) -> float: ...

    @MZOfInterest.setter
    def MZOfInterest(self, value: float): ...

    @property
    def RetentionTime(self) -> float: ...

    @RetentionTime.setter
    def RetentionTime(self, value: float): ...

    @property
    def ScanID(self): ...

    @ScanID.setter
    def ScanID(self, value): ...

    @property
    def Tic(self) -> float: ...

    @Tic.setter
    def Tic(self, value: float): ...

    @property
    def TimeSegment(self) -> int: ...

    @TimeSegment.setter
    def TimeSegment(self, value: int): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_BasePeakIntensity(self) -> float: ...

    def get_BasePeakMZ(self) -> float: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_CompensationField(self) -> float: ...

    def get_DispersionField(self) -> float: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsCollisionEnergyDynamic(self) -> bool: ...

    def get_IsFragmentorVoltageDynamic(self) -> bool: ...

    def get_MSLevel(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MZOfInterest(self) -> float: ...

    def get_RetentionTime(self) -> float: ...

    def get_ScanID(self) -> int: ...

    def get_Tic(self) -> float: ...

    def get_TimeSegment(self) -> int: ...


class ChangeNotifyDelegate:

    def BeginInvoke(self, _: Any, __: object) -> Any: ...

    def Clone(self) -> object: ...

    def Combine(self, _: Any, __: Any) -> Any: ...

    def CombineImpl(self, _: Any) -> Any: ...

    def CreateDelegate(self,
            _: Type,
            __: object,
            ___: str,
            ____: bool,
            _____: bool,
            ) -> Any: ...

    def DynamicInvoke(self, _: List[object]) -> object: ...

    def DynamicInvokeImpl(self, _: List[object]) -> object: ...

    def EndInvoke(self, _: Any) -> None: ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetInvocationList(self) -> List[Any]: ...

    def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

    def GetObjectData(self,
            _: System.Runtime.Serialization.SerializationInfo,
            __: System.Runtime.Serialization.StreamingContext,
            ) -> None: ...

    def GetType(self) -> Type: ...

    def Invoke(self) -> None: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Method(self): ...

    @Method.setter
    def Method(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Remove(self, _: Any, __: Any) -> Any: ...

    def RemoveAll(self, _: Any, __: Any) -> Any: ...

    def RemoveImpl(self, _: Any) -> Any: ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Method(self) -> System.Reflection.MethodInfo: ...

    def get_Target(self) -> object: ...

    def op_Equality(self, _: Any, __: Any) -> bool: ...

    def op_Inequality(self, _: Any, __: Any) -> bool: ...


class IMsdrPeakFilter:

    @property
    def AbsoluteThreshold(self) -> float: ...

    @AbsoluteThreshold.setter
    def AbsoluteThreshold(self, value: float): ...

    @property
    def MaxNumPeaks(self) -> int: ...

    @MaxNumPeaks.setter
    def MaxNumPeaks(self, value: int): ...

    @property
    def RelativeThreshold(self) -> float: ...

    @RelativeThreshold.setter
    def RelativeThreshold(self, value: float): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbsoluteThreshold(self) -> float: ...

    def get_MaxNumPeaks(self) -> int: ...

    def get_RelativeThreshold(self) -> float: ...

    def set_AbsoluteThreshold(self, _: float) -> None: ...

    def set_MaxNumPeaks(self, _: int) -> None: ...

    def set_RelativeThreshold(self, _: float) -> None: ...


class IMsdrChargeStateAssignmentFilter:

    @property
    def AbsoluteTolerance(self) -> float: ...

    @AbsoluteTolerance.setter
    def AbsoluteTolerance(self, value: float): ...

    @property
    def LimitMaxChargeState(self) -> bool: ...

    @LimitMaxChargeState.setter
    def LimitMaxChargeState(self, value: bool): ...

    @property
    def MaximumChargeState(self) -> int: ...

    @MaximumChargeState.setter
    def MaximumChargeState(self, value: int): ...

    @property
    def RelativeTolerance(self) -> int: ...

    @RelativeTolerance.setter
    def RelativeTolerance(self, value: int): ...

    @property
    def RequirePeptideLikeAbundanceProfile(self) -> bool: ...

    @RequirePeptideLikeAbundanceProfile.setter
    def RequirePeptideLikeAbundanceProfile(self, value: bool): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbsoluteTolerance(self) -> float: ...

    def get_LimitMaxChargeState(self) -> bool: ...

    def get_MaximumChargeState(self) -> int: ...

    def get_RelativeTolerance(self) -> float: ...

    def get_RequirePeptideLikeAbundanceProfile(self) -> bool: ...

    def set_AbsoluteTolerance(self, _: float) -> None: ...

    def set_LimitMaxChargeState(self, _: bool) -> None: ...

    def set_MaximumChargeState(self, _: int) -> None: ...

    def set_RelativeTolerance(self, _: float) -> None: ...

    def set_RequirePeptideLikeAbundanceProfile(self, _: bool) -> None: ...
