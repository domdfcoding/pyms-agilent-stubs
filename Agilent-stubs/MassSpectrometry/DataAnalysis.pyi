from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Type

import System
import System.Collections
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization

from typing import Optional, overload, Tuple, Union

from pyms_agilent.enums import (
    DeviceType,
    StoredDataType,
    DataUnit,
    DataValueType,
    ChromType,
    ChromSubType,
    MSLevel,
    MSScanType,
    MSStorageMode,
    SpecType,
    SpecSubType,
    SampleCategory,
    IonizationMode,
    TofMsProcessingMode,
    DataFileValueDataType,
    PointValueStorageScheme,
    )

IonPolarity = Optional[int]
SmoothingFunctionType = Any

from System.ComponentModel import MarshalByValueComponent


class BDAFileInformation:

    def Close(self) -> None: ...

    def CombineFileInformation(self,
            _: List[IBDAFileInformation],
            ) -> IBDAFileInformation: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAFileInformation:

    @property
    def AcquisitionTime(self): ...

    @AcquisitionTime.setter
    def AcquisitionTime(self, value): ...

    def Clear(self) -> None: ...

    def Clone(self) -> IBDAFileInformation: ...

    @property
    def DataFileName(self): ...

    @DataFileName.setter
    def DataFileName(self, value): ...

    def GetDeviceName(self, _: DeviceType) -> str: ...

    def GetDeviceTable(self, _: StoredDataType) -> System.Data.DataTable: ...

    def GetSignalTable(self, _: str, __: StoredDataType) -> System.Data.DataTable: ...

    def GetSpectrumXAxisLimit(self, _: str) -> IRange: ...

    @property
    def IRMStatus(self): ...

    @IRMStatus.setter
    def IRMStatus(self, value): ...

    def IsMSDataPresent(self) -> bool: ...

    def IsNonMSDataPresent(self) -> bool: ...

    def IsStoredDataTypePresent(self, _: str, __: StoredDataType) -> bool: ...

    def IsUVSignalPresent(self, devType: DeviceType, signalName: str, devName: str) -> bool: ...

    def IsUVSpectralDataPresent(self) -> bool: ...

    @property
    def MSScanFileInformation(self): ...

    @MSScanFileInformation.setter
    def MSScanFileInformation(self, value): ...

    @property
    def MeasurementType(self): ...

    @MeasurementType.setter
    def MeasurementType(self, value): ...

    @property
    def SeparationTechnique(self): ...

    @SeparationTechnique.setter
    def SeparationTechnique(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AcquisitionTime(self) -> System.DateTime: ...

    def get_DataFileName(self) -> str: ...

    def get_IRMStatus(self) -> IRMStatus: ...

    def get_MSScanFileInformation(self) -> IBDAMSScanFileInformation: ...

    def get_MeasurementType(self) -> MeasurementType: ...

    def get_SeparationTechnique(self) -> SeparationTechnique: ...


class IBDAChromData:

    @property
    def AbundanceLimit(self): ...

    @AbundanceLimit.setter
    def AbundanceLimit(self, value): ...

    @property
    def AcquiredTimeRange(self): ...

    @AcquiredTimeRange.setter
    def AcquiredTimeRange(self, value): ...

    @property
    def ChromatogramType(self): ...

    @ChromatogramType.setter
    def ChromatogramType(self, value): ...

    def Clone(self) -> IBDAChromData: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    def GetXAxisInfoChrom(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfoChrom(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def IsChromatogram(self): ...

    @IsChromatogram.setter
    def IsChromatogram(self, value): ...

    @property
    def IsCycleSummed(self): ...

    @IsCycleSummed.setter
    def IsCycleSummed(self, value): ...

    @property
    def IsMassSpectrum(self): ...

    @IsMassSpectrum.setter
    def IsMassSpectrum(self, value): ...

    @property
    def IsPrimaryMrm(self): ...

    @IsPrimaryMrm.setter
    def IsPrimaryMrm(self, value): ...

    @property
    def IsUvSpectrum(self): ...

    @IsUvSpectrum.setter
    def IsUvSpectrum(self, value): ...

    @property
    def MSLevelInfo(self): ...

    @MSLevelInfo.setter
    def MSLevelInfo(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MSStorageMode(self): ...

    @MSStorageMode.setter
    def MSStorageMode(self, value): ...

    @property
    def MZOfInterest(self): ...

    @MZOfInterest.setter
    def MZOfInterest(self, value): ...

    @property
    def MeasuredMassRange(self): ...

    @MeasuredMassRange.setter
    def MeasuredMassRange(self, value): ...

    @property
    def MzRegionsWereExcluded(self): ...

    @MzRegionsWereExcluded.setter
    def MzRegionsWereExcluded(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def SamplingPeriod(self): ...

    @SamplingPeriod.setter
    def SamplingPeriod(self, value): ...

    @property
    def SignalDescription(self): ...

    @SignalDescription.setter
    def SignalDescription(self, value): ...

    @property
    def SignalName(self): ...

    @SignalName.setter
    def SignalName(self, value): ...

    @property
    def Threshold(self): ...

    @Threshold.setter
    def Threshold(self, value): ...

    @property
    def TotalDataPoints(self): ...

    @TotalDataPoints.setter
    def TotalDataPoints(self, value): ...

    @property
    def XArray(self): ...

    @XArray.setter
    def XArray(self, value): ...

    @property
    def YArray(self): ...

    @YArray.setter
    def YArray(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbundanceLimit(self) -> float: ...

    def get_AcquiredTimeRange(self) -> List[IRange]: ...

    def get_ChromatogramType(self) -> ChromType: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsChromatogram(self) -> bool: ...

    def get_IsCycleSummed(self) -> bool: ...

    def get_IsMassSpectrum(self) -> bool: ...

    def get_IsPrimaryMrm(self) -> bool: ...

    def get_IsUvSpectrum(self) -> bool: ...

    def get_MSLevelInfo(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MSStorageMode(self) -> MSStorageMode: ...

    def get_MZOfInterest(self) -> List[IRange]: ...

    def get_MeasuredMassRange(self) -> List[IRange]: ...

    def get_MzRegionsWereExcluded(self) -> bool: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_SamplingPeriod(self) -> float: ...

    def get_SignalDescription(self) -> str: ...

    def get_SignalName(self) -> str: ...

    def get_Threshold(self) -> float: ...

    def get_TotalDataPoints(self) -> int: ...

    def get_XArray(self) -> List[float]: ...

    def get_YArray(self) -> List[float]: ...


class SignalInfo:

    @property
    def DeviceInformation(self) -> IDeviceInfo: ...

    @DeviceInformation.setter
    def DeviceInformation(self, value: IDeviceInfo): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SignalName(self) -> str: ...

    @SignalName.setter
    def SignalName(self, value: str): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceInformation(self) -> IDeviceInfo: ...

    def get_SignalName(self) -> str: ...

    def set_DeviceInformation(self, _: IDeviceInfo) -> None: ...

    def set_SignalName(self, _: str) -> None: ...


class BDAChromData:

    def Add(self, _: BDAChromData) -> BDAChromData: ...

    @property
    def ChromFilter(self): ...

    @ChromFilter.setter
    def ChromFilter(self, value): ...

    def Cleanup(self) -> None: ...

    def Clear(self) -> None: ...

    def Clone(self) -> IBDAChromData: ...

    def CreateBDAChromData(self,
            _: List[float],
            __: List[float],
            ___: BDAChromFilter,
            ____: MSOverallScanRecordInfo,
            _____: DeviceType,
            ) -> IBDAChromData: ...

    @property
    def DeviceIDInfo(self): ...

    @DeviceIDInfo.setter
    def DeviceIDInfo(self, value): ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def GetXAxisInfo(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfo(self, _: Any, __: Any, ___: Any) -> Tuple[None, DataUnit, DataValueType, str]: ...

    @property
    def IsICPData(self): ...

    @IsICPData.setter
    def IsICPData(self, value): ...

    @property
    def MSOverallScanRecordInformation(self): ...

    @MSOverallScanRecordInformation.setter
    def MSOverallScanRecordInformation(self, value): ...

    @property
    def MeasuredMassRange(self): ...

    @MeasuredMassRange.setter
    def MeasuredMassRange(self, value): ...

    @property
    def MeasuredMassRangeInfo(self): ...

    @MeasuredMassRangeInfo.setter
    def MeasuredMassRangeInfo(self, value): ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Smooth(self, _: SmoothingFunctionType, __: int, ___: float) -> None: ...

    def ToString(self) -> str: ...

    def TrimXRange(self, _: float, __: float) -> None: ...

    @property
    def XSpecificData(self): ...

    @XSpecificData.setter
    def XSpecificData(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ChromFilter(self) -> IBDAChromFilter: ...

    def get_DeviceIDInfo(self) -> int: ...

    def get_Disposed(self) -> bool: ...

    def get_IsICPData(self) -> bool: ...

    def get_MSOverallScanRecordInformation(self) -> MSOverallScanRecordInfo: ...

    def get_MeasuredMassRangeInfo(self) -> BDARangeCollection: ...

    def get_XSpecificData(self) -> XSpecificData: ...

    def set_ChromFilter(self, _: IBDAChromFilter) -> None: ...

    def set_MeasuredMassRange(self, _: BDARangeCollection) -> None: ...


class MSOverallScanRecordInfo:

    @property
    def AbundanceLimit(self): ...

    @AbundanceLimit.setter
    def AbundanceLimit(self, value): ...

    @property
    def CalibrationID(self): ...

    @CalibrationID.setter
    def CalibrationID(self, value): ...

    @property
    def ChargeState(self): ...

    @ChargeState.setter
    def ChargeState(self, value): ...

    @property
    def ChromScaleFactor(self): ...

    @ChromScaleFactor.setter
    def ChromScaleFactor(self, value): ...

    def Clone(self) -> MSOverallScanRecordInfo: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def CycleNumber(self): ...

    @CycleNumber.setter
    def CycleNumber(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    @property
    def FragmentationMode(self): ...

    @FragmentationMode.setter
    def FragmentationMode(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    def GetFilteredOnDetails(self,
            _: bool,
            __: bool,
            ___: bool,
            ____: bool,
            _____: bool,
            ______: bool,
            ) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def IsCEAssignedFromAcqMethod(self): ...

    @IsCEAssignedFromAcqMethod.setter
    def IsCEAssignedFromAcqMethod(self, value): ...

    @property
    def IsCollisionEnergyDynamic(self): ...

    @IsCollisionEnergyDynamic.setter
    def IsCollisionEnergyDynamic(self, value): ...

    @property
    def IsFVAssignedFromAcqMethod(self): ...

    @IsFVAssignedFromAcqMethod.setter
    def IsFVAssignedFromAcqMethod(self, value): ...

    @property
    def IsFragmentorDynamic(self): ...

    @IsFragmentorDynamic.setter
    def IsFragmentorDynamic(self, value): ...

    @property
    def IsPrimaryMrm(self): ...

    @IsPrimaryMrm.setter
    def IsPrimaryMrm(self, value): ...

    @property
    def MSLevel(self): ...

    @MSLevel.setter
    def MSLevel(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MSStorageModeInfo(self): ...

    @MSStorageModeInfo.setter
    def MSStorageModeInfo(self, value): ...

    @property
    def MeasuredNoise(self): ...

    @MeasuredNoise.setter
    def MeasuredNoise(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def MethodNumber(self): ...

    @MethodNumber.setter
    def MethodNumber(self, value): ...

    @property
    def MzOfInterestRanges(self): ...

    @MzOfInterestRanges.setter
    def MzOfInterestRanges(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def ParentIntensity(self): ...

    @ParentIntensity.setter
    def ParentIntensity(self, value): ...

    @property
    def ParentScanID(self): ...

    @ParentScanID.setter
    def ParentScanID(self, value): ...

    @property
    def ParentScanMzOfInterest(self): ...

    @ParentScanMzOfInterest.setter
    def ParentScanMzOfInterest(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SamplingPeriod(self): ...

    @SamplingPeriod.setter
    def SamplingPeriod(self, value): ...

    @property
    def ScanID(self) -> int: ...

    @ScanID.setter
    def ScanID(self, value: int): ...

    @property
    def ScanTime(self): ...

    @ScanTime.setter
    def ScanTime(self, value): ...

    @property
    def Threshold(self): ...

    @Threshold.setter
    def Threshold(self, value): ...

    @property
    def TimeSegmentID(self): ...

    @TimeSegmentID.setter
    def TimeSegmentID(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbundanceLimit(self) -> float: ...

    def get_CalibrationID(self) -> int: ...

    def get_ChargeState(self) -> int: ...

    def get_ChromScaleFactor(self) -> List[float]: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_CompensationField(self) -> float: ...

    def get_CycleNumber(self) -> int: ...

    def get_DispersionField(self) -> float: ...

    def get_FragmentationMode(self) -> FragmentationMode: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsCEAssignedFromAcqMethod(self) -> bool: ...

    def get_IsCollisionEnergyDynamic(self) -> bool: ...

    def get_IsFVAssignedFromAcqMethod(self) -> bool: ...

    def get_IsFragmentorDynamic(self) -> bool: ...

    def get_IsPrimaryMrm(self) -> bool: ...

    def get_MSLevel(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MSStorageModeInfo(self) -> MSStorageMode: ...

    def get_MeasuredNoise(self) -> float: ...

    def get_MethodNumber(self) -> int: ...

    def get_MzOfInterestRanges(self) -> BDARangeCollection: ...

    def get_ParentIntensity(self) -> float: ...

    def get_ParentScanID(self) -> int: ...

    def get_ParentScanMzOfInterest(self) -> float: ...

    def get_SamplingPeriod(self) -> float: ...

    def get_ScanID(self) -> int: ...

    def get_ScanTime(self) -> float: ...

    def get_Threshold(self) -> float: ...

    def get_TimeSegmentID(self) -> int: ...


class BDARangeCollection:

    def Add(self, _: IRange) -> int: ...

    def AddClone(self, _: IRange) -> int: ...

    @property
    def Capacity(self): ...

    @Capacity.setter
    def Capacity(self, value): ...

    def Clear(self) -> None: ...

    def Clone(self) -> BDARangeCollection: ...

    def CloneSetUnits(self, _: DataValueType, __: DataUnit) -> BDARangeCollection: ...

    def Contains(self, _: IRange) -> bool: ...

    def CopyTo(self, _: List[IRange], __: int) -> None: ...

    def CopyToClone(self, _: List[IRange], __: int) -> None: ...

    @property
    def Count(self): ...

    @Count.setter
    def Count(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def InnerList(self): ...

    @InnerList.setter
    def InnerList(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def List(self): ...

    @List.setter
    def List(self, value): ...

    def MemberwiseClone(self) -> object: ...

    def OnClear(self) -> None: ...

    def OnClearComplete(self) -> None: ...

    def OnInsert(self, _: int, __: object) -> None: ...

    def OnInsertComplete(self, _: int, __: object) -> None: ...

    def OnRemove(self, _: int, __: object) -> None: ...

    def OnRemoveComplete(self, _: int, __: object) -> None: ...

    def OnSet(self, _: int, __: object, ___: object) -> None: ...

    def OnSetComplete(self, _: int, __: object, ___: object) -> None: ...

    def OnValidate(self, _: object) -> None: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Remove(self, _: int) -> None: ...

    def RemoveAt(self, _: int) -> None: ...

    def Reverse(self) -> None: ...

    def SetEmpty(self) -> None: ...

    def Sort(self, _: SortDirection) -> None: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Capacity(self) -> int: ...

    def get_Count(self) -> int: ...

    def get_InnerList(self) -> List: ...

    def get_Item(self, _: int) -> IRange: ...

    def get_List(self) -> List: ...

    def set_Capacity(self, _: int) -> None: ...

    def set_Item(self, _: int, __: IRange) -> None: ...


class MassSpecDataReader:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetEWC(self, _: IDeviceInfo, __: IRange, ___: IRange) -> BDAChromData: ...

    def GetHashCode(self) -> int: ...

    def GetNonmsDevices(self) -> List[IDeviceInfo]: ...

    def GetSignal(self, _: Union[ISignalInfo, SignalInfo]) -> BDAChromData: ...

    def GetSignalInfo(self, _: IDeviceInfo, __: StoredDataType) -> List[ISignalInfo]: ...

    def GetTWC(self, _: IDeviceInfo) -> IBDAChromData: ...

    def GetType(self) -> Type: ...

    def GetUVSpectrum(self, _: IDeviceInfo, __: IRange) -> List[IBDASpecData]: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IMsdrDataReader:

    @property
    def ActualsInformation(self) -> IBDAActuals: ...

    @ActualsInformation.setter
    def ActualsInformation(self, value: IBDAActuals): ...

    def CloseDataFile(self: Union[IMsdrDataReader, MassSpecDataReader]) -> None: ...

    def Deisotope(self, spectrum: IBDASpecData, csaFilter: IMsdrChargeStateAssignmentFilter) -> None: ...

    @property
    def FileInformation(self) -> BDAMSScanFileInformation: ...

    @FileInformation.setter
    def FileInformation(self, value: BDAMSScanFileInformation): ...

    def GetBPC(self,
            startTime: float,
            endTime: float,
            scanType: MSScanType,
            ionPolarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> BDAChromData: ...

    def GetChromatogram(self, chromFilter: IBDAChromFilter) -> List[BDAChromData]: ...

    def GetEIC(self,
            massOfInterest: List[float],
            scanType: MSScanType,
            ionPolarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> BDAChromData: ...

    def GetEICForEachMass(self,
            massOfInterest: List[float],
            scanType: MSScanType,
            ionPolarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> List[BDAChromData]: ...

    def GetMSScanInformation(self, retentionTime: float) -> IBDAMSScanFileInformation: ...

    def GetSampleCollection(self) -> List[IBDASampleData]: ...

    def GetScanRecord(self, rowNumber: int) -> IMSScanRecord: ...

    @overload
    def GetSpectrum(self,
            retentionTime: float,
            scanType: MSScanType,
            ionPloarity: IonPolarity,
            ionMode: IonizationMode,
            peakFilter: MsdrPeakFilter = ...,
            ) -> BDASpecData: ...

    # TODO: _2
    # TODO: _3
    # TODO: _4
    # TODO: _5

    # _6
    @overload
    def GetSpectrum(self,
            rowNumber: int,
            peakMSFilter: MsdrPeakFilter,
            peakMSMSFilter: MsdrPeakFilter,
            ) -> BDASpecData: ...

    # TODO: _7
    # TODO: _8

    def GetSpectrum(self,
            *args: Any, **kwargs: Any,
            ) -> BDASpecData: ...

    @overload
    def GetTIC(self) -> BDAChromData: ...

    # _2
    @overload
    def GetTIC(self,
            startTime: float,
            endTime: float,
            scanType: MSScanType,
            ionPloarity: IonPolarity,
            ionMode: IonizationMode,
            ) -> BDAChromData: ...

    def GetTIC(self, *args: Any, **kwargs: Any) -> BDAChromData: ...

    @property
    def MSScanFileInformation(self): ...

    @MSScanFileInformation.setter
    def MSScanFileInformation(self, value): ...

    def OpenDataFile(self: Union[IMsdrDataReader, MassSpecDataReader], fileName: str) -> bool: ...

    def RefreshDataFile(self: Union[IMsdrDataReader, MassSpecDataReader]) -> bool: ...

    @property
    def SchemaDefaultDirectory(self) -> str: ...

    @SchemaDefaultDirectory.setter
    def SchemaDefaultDirectory(self, value: str): ...

    @property
    def Version(self) -> str: ...

    @Version.setter
    def Version(self, value: str): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ActualsInformation(self) -> IBDAActuals: ...

    def get_FileInformation(self) -> IBDAFileInformation: ...

    def get_MSScanFileInformation(self) -> IBDAMSScanFileInformation: ...

    def get_SchemaDefaultDirectory(self) -> str: ...

    def get_Version(self) -> str: ...

    def set_SchemaDefaultDirectory(self, _: str) -> None: ...


class MsdrPeakFilter:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class DeviceInfo:

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_OrdinalNumber(self) -> int: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DeviceType(self, _: DeviceType) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...


class IBDAActuals:

    def GetActualCollection(self, _: float) -> List[IBDAActualData]: ...

    def GetActualNames(self) -> List[str]: ...

    def GetActualValue(self, _: str, __: List[float], ___: List[float]) -> Tuple[None, List[float], List[float]]: ...

    def GetActuals(self, _: float) -> System.Data.DataSet: ...

    def IsActualsPresent(self) -> bool: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAChromFilter:

    @property
    def ChargeStateLimits(self): ...

    @ChargeStateLimits.setter
    def ChargeStateLimits(self, value): ...

    @property
    def ChromatogramSubType(self): ...

    @ChromatogramSubType.setter
    def ChromatogramSubType(self, value): ...

    @property
    def ChromatogramType(self): ...

    @ChromatogramType.setter
    def ChromatogramType(self, value): ...

    def Clone(self) -> IBDAChromFilter: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def Description(self): ...

    @Description.setter
    def Description(self, value): ...

    @property
    def DesiredMSStorageType(self): ...

    @DesiredMSStorageType.setter
    def DesiredMSStorageType(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    @property
    def DoCycleSum(self): ...

    @DoCycleSum.setter
    def DoCycleSum(self, value): ...

    @property
    def ExtractOneChromatogramPerScanSegment(self): ...

    @ExtractOneChromatogramPerScanSegment.setter
    def ExtractOneChromatogramPerScanSegment(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def IncludeMassRanges(self): ...

    @IncludeMassRanges.setter
    def IncludeMassRanges(self, value): ...

    @property
    def Integrate(self): ...

    @Integrate.setter
    def Integrate(self, value): ...

    @property
    def IonPolarityFilter(self): ...

    @IonPolarityFilter.setter
    def IonPolarityFilter(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def MSLevelFilter(self): ...

    @MSLevelFilter.setter
    def MSLevelFilter(self, value): ...

    @property
    def MSScanTypeFilter(self): ...

    @MSScanTypeFilter.setter
    def MSScanTypeFilter(self, value): ...

    @property
    def MzOfInterestFilter(self): ...

    @MzOfInterestFilter.setter
    def MzOfInterestFilter(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ReferenceWavelength(self): ...

    @ReferenceWavelength.setter
    def ReferenceWavelength(self, value): ...

    @property
    def ScanRange(self): ...

    @ScanRange.setter
    def ScanRange(self, value): ...

    @property
    def ScanSegmentNumber(self): ...

    @ScanSegmentNumber.setter
    def ScanSegmentNumber(self, value): ...

    @property
    def SignalDescription(self): ...

    @SignalDescription.setter
    def SignalDescription(self, value): ...

    @property
    def SignalName(self): ...

    @SignalName.setter
    def SignalName(self, value): ...

    @property
    def SignalWavelength(self): ...

    @SignalWavelength.setter
    def SignalWavelength(self, value): ...

    @property
    def SingleChromatogramForAllMasses(self): ...

    @SingleChromatogramForAllMasses.setter
    def SingleChromatogramForAllMasses(self, value): ...

    @property
    def UseReference(self): ...

    @UseReference.setter
    def UseReference(self, value): ...

    @property
    def YValueInCounts(self): ...

    @YValueInCounts.setter
    def YValueInCounts(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ChargeStateLimits(self) -> IRange: ...

    def get_ChromatogramSubType(self) -> ChromSubType: ...

    def get_ChromatogramType(self) -> ChromType: ...

    def get_CollisionEnergy(self) -> IRange: ...

    def get_CompensationField(self) -> IRange: ...

    def get_Description(self) -> str: ...

    def get_DesiredMSStorageType(self) -> DesiredMSStorageType: ...

    def get_DeviceName(self) -> str: ...

    def get_DispersionField(self) -> IRange: ...

    def get_DoCycleSum(self) -> bool: ...

    def get_ExtractOneChromatogramPerScanSegment(self) -> bool: ...

    def get_FragmentorVoltage(self) -> IRange: ...

    def get_IncludeMassRanges(self) -> List[IRange]: ...

    def get_Integrate(self) -> bool: ...

    def get_IonPolarityFilter(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_MSLevelFilter(self) -> MSLevel: ...

    def get_MSScanTypeFilter(self) -> MSScanType: ...

    def get_MzOfInterestFilter(self) -> List[IRange]: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ReferenceWavelength(self) -> IRange: ...

    def get_ScanRange(self) -> IRange: ...

    def get_ScanSegmentNumber(self) -> IRange: ...

    def get_SignalDescription(self) -> str: ...

    def get_SignalName(self) -> str: ...

    def get_SignalWavelength(self) -> IRange: ...

    def get_SingleChromatogramForAllMasses(self) -> bool: ...

    def get_UseReference(self) -> bool: ...

    def get_YValueInCounts(self) -> bool: ...

    def set_ChargeStateLimits(self, _: IRange) -> None: ...

    def set_ChromatogramSubType(self, _: ChromSubType) -> None: ...

    def set_ChromatogramType(self, _: ChromType) -> None: ...

    def set_CollisionEnergy(self, _: IRange) -> None: ...

    def set_CompensationField(self, _: IRange) -> None: ...

    def set_Description(self, _: str) -> None: ...

    def set_DesiredMSStorageType(self, _: DesiredMSStorageType) -> None: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DispersionField(self, _: IRange) -> None: ...

    def set_DoCycleSum(self, _: bool) -> None: ...

    def set_ExtractOneChromatogramPerScanSegment(self, _: bool) -> None: ...

    def set_FragmentorVoltage(self, _: IRange) -> None: ...

    def set_IncludeMassRanges(self, _: List[IRange]) -> None: ...

    def set_Integrate(self, _: bool) -> None: ...

    def set_IonPolarityFilter(self, _: IonPolarity) -> None: ...

    def set_IonizationMode(self, _: IonizationMode) -> None: ...

    def set_MSLevelFilter(self, _: MSLevel) -> None: ...

    def set_MSScanTypeFilter(self, _: MSScanType) -> None: ...

    def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...

    def set_ReferenceWavelength(self, _: IRange) -> None: ...

    def set_ScanRange(self, _: IRange) -> None: ...

    def set_ScanSegmentNumber(self, _: IRange) -> None: ...

    def set_SignalDescription(self, _: str) -> None: ...

    def set_SignalName(self, _: str) -> None: ...

    def set_SignalWavelength(self, _: IRange) -> None: ...

    def set_SingleChromatogramForAllMasses(self, _: bool) -> None: ...

    def set_UseReference(self, _: bool) -> None: ...

    def set_YValueInCounts(self, _: bool) -> None: ...


class BDAChromFilter:

    def Clone(self) -> IBDAChromFilter: ...

    def Copy(self, _: BDAChromFilter) -> None: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SmoothFunction(self): ...

    @SmoothFunction.setter
    def SmoothFunction(self, value): ...

    @property
    def SmoothFunctionWidth(self): ...

    @SmoothFunctionWidth.setter
    def SmoothFunctionWidth(self, value): ...

    @property
    def SmoothGaussianWidth(self): ...

    @SmoothGaussianWidth.setter
    def SmoothGaussianWidth(self, value): ...

    @property
    def Smoothed(self): ...

    @Smoothed.setter
    def Smoothed(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_SmoothFunction(self) -> SmoothingFunctionType: ...

    def get_SmoothFunctionWidth(self) -> int: ...

    def get_SmoothGaussianWidth(self) -> float: ...

    def get_Smoothed(self) -> bool: ...

    def set_SmoothFunction(self, _: SmoothingFunctionType) -> None: ...

    def set_SmoothFunctionWidth(self, _: int) -> None: ...

    def set_SmoothGaussianWidth(self, _: float) -> None: ...

    def set_Smoothed(self, _: bool) -> None: ...


class IBDASpecData:

    @property
    def AbundanceLimit(self): ...

    @AbundanceLimit.setter
    def AbundanceLimit(self, value): ...

    @property
    def AcquiredTimeRange(self): ...

    @AcquiredTimeRange.setter
    def AcquiredTimeRange(self, value): ...

    @property
    def ChromPeakIndex(self): ...

    @ChromPeakIndex.setter
    def ChromPeakIndex(self, value): ...

    def Clone(self) -> IBDASpecData: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    def ConvertDataToMassUnits(self) -> None: ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    def GetPrecursorCharge(self, _: int) -> Tuple[bool, int]: ...

    def GetPrecursorIntensity(self, _: float) -> Tuple[bool, int]: ...

    def GetPrecursorIon(self, _: int) -> List[float]: ...

    def GetXAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def IsChromatogram(self): ...

    @IsChromatogram.setter
    def IsChromatogram(self, value): ...

    @property
    def IsDataInMassUnit(self): ...

    @IsDataInMassUnit.setter
    def IsDataInMassUnit(self, value): ...

    @property
    def IsMassSpectrum(self): ...

    @IsMassSpectrum.setter
    def IsMassSpectrum(self, value): ...

    @property
    def IsUvSpectrum(self): ...

    @IsUvSpectrum.setter
    def IsUvSpectrum(self, value): ...

    @property
    def MSLevelInfo(self): ...

    @MSLevelInfo.setter
    def MSLevelInfo(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MSStorageMode(self): ...

    @MSStorageMode.setter
    def MSStorageMode(self, value): ...

    @property
    def MZOfInterest(self): ...

    @MZOfInterest.setter
    def MZOfInterest(self, value): ...

    @property
    def MeasuredMassRange(self): ...

    @MeasuredMassRange.setter
    def MeasuredMassRange(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ParentScanId(self): ...

    @ParentScanId.setter
    def ParentScanId(self, value): ...

    @property
    def SamplingPeriod(self): ...

    @SamplingPeriod.setter
    def SamplingPeriod(self, value): ...

    def ScaleYValues(self, _: float, __: float) -> None: ...

    @property
    def ScanId(self): ...

    @ScanId.setter
    def ScanId(self, value): ...

    @property
    def SpecFilter(self): ...

    @SpecFilter.setter
    def SpecFilter(self, value): ...

    @property
    def SpectrumType(self): ...

    @SpectrumType.setter
    def SpectrumType(self, value): ...

    @property
    def Threshold(self): ...

    @Threshold.setter
    def Threshold(self, value): ...

    @property
    def TofCalibration(self): ...

    @TofCalibration.setter
    def TofCalibration(self, value): ...

    @property
    def TotalDataPoints(self): ...

    @TotalDataPoints.setter
    def TotalDataPoints(self, value): ...

    @property
    def TotalScanCount(self): ...

    @TotalScanCount.setter
    def TotalScanCount(self, value): ...

    def TrimXRange(self, _: List[IRange], __: bool) -> None: ...

    @property
    def XArray(self): ...

    @XArray.setter
    def XArray(self, value): ...

    @property
    def YArray(self): ...

    @YArray.setter
    def YArray(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbundanceLimit(self) -> float: ...

    def get_AcquiredTimeRange(self) -> List[IRange]: ...

    def get_ChromPeakIndex(self) -> int: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_CompensationField(self) -> float: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_DispersionField(self) -> float: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsChromatogram(self) -> bool: ...

    def get_IsDataInMassUnit(self) -> bool: ...

    def get_IsMassSpectrum(self) -> bool: ...

    def get_IsUvSpectrum(self) -> bool: ...

    def get_MSLevelInfo(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MSStorageMode(self) -> MSStorageMode: ...

    def get_MZOfInterest(self) -> List[IRange]: ...

    def get_MeasuredMassRange(self) -> IRange: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ParentScanId(self) -> int: ...

    def get_SamplingPeriod(self) -> float: ...

    def get_ScanId(self) -> int: ...

    def get_SpecFilter(self) -> IBDASpecFilter: ...

    def get_SpectrumType(self) -> SpecType: ...

    def get_Threshold(self) -> float: ...

    def get_TofCalibration(self) -> Any: ...

    def get_TotalDataPoints(self) -> int: ...

    def get_TotalScanCount(self) -> int: ...

    def get_XArray(self) -> List[float]: ...

    def get_YArray(self) -> List[float]: ...

    def set_ChromPeakIndex(self, _: int) -> None: ...

    def set_SpecFilter(self, _: IBDASpecFilter) -> None: ...


class BDADataAccess:

    @property
    def CancelIndicator(self): ...

    @CancelIndicator.setter
    def CancelIndicator(self, value): ...

    def Cleanup(self) -> None: ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetActualsForTimeRange(self, _: float, __: float) -> List[IBDAActualData]: ...

    def GetActualsdDefinitionForTimeRange(self,
            _: float,
            __: float,
            ) -> List[IBDAActualData]: ...

    def GetDeviceTable(self) -> System.Data.DataTable: ...

    def GetHashCode(self) -> int: ...

    def GetMsScanDirSize(self, _: str) -> int: ...

    def GetSampleData(self,
            _: str,
            __: SampleCategory,
            ___: List[str],
            ____: List[str],
            _____: List[str],
            ) -> None: ...

    def GetTimeSegmentsIDArray(self) -> List[int]: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def MsDeviceInfo(self): ...

    @MsDeviceInfo.setter
    def MsDeviceInfo(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ProgressEvent(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def add_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...

    def get_CancelIndicator(self) -> CancelIndicator: ...

    def get_Disposed(self) -> bool: ...

    def get_MsDeviceInfo(self) -> IBDAMsDeviceInfo: ...

    def remove_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...

    def set_CancelIndicator(self, _: CancelIndicator) -> None: ...


class BDAMSScanFileInformation:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MSScanFileInformationIterator(self, *args, **kwargs) -> Any: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAMSScanFileInformation:

    def Clone(self) -> IBDAMSScanFileInformation: ...

    @property
    def CollisionEnergies(self): ...

    @CollisionEnergies.setter
    def CollisionEnergies(self, value): ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationFieldValues(self): ...

    @CompensationFieldValues.setter
    def CompensationFieldValues(self, value): ...

    def Contains(self, _: MSScanType) -> bool: ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def DispersionFieldValues(self): ...

    @DispersionFieldValues.setter
    def DispersionFieldValues(self, value): ...

    @property
    def FileHasMassSpectralData(self): ...

    @FileHasMassSpectralData.setter
    def FileHasMassSpectralData(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def FragmentorVoltages(self): ...

    @FragmentorVoltages.setter
    def FragmentorVoltages(self, value): ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    def GetMSScanTypeInformation(self, _: MSScanType) -> IBDAMSScanTypeInformation: ...

    @property
    def IonModes(self): ...

    @IonModes.setter
    def IonModes(self, value): ...

    @property
    def IonPolarity(self): ...

    @IonPolarity.setter
    def IonPolarity(self, value): ...

    def IsFixedCycleLengthDataPresent(self) -> bool: ...

    def IsMultipleSpectraPerScanPresent(self) -> bool: ...

    @property
    def MRMTransitions(self): ...

    @MRMTransitions.setter
    def MRMTransitions(self, value): ...

    @property
    def MSLevel(self): ...

    @MSLevel.setter
    def MSLevel(self, value): ...

    @property
    def MassRange(self): ...

    @MassRange.setter
    def MassRange(self, value): ...

    @property
    def MzScanRangeMaximum(self): ...

    @MzScanRangeMaximum.setter
    def MzScanRangeMaximum(self, value): ...

    @property
    def MzScanRangeMinimum(self): ...

    @MzScanRangeMinimum.setter
    def MzScanRangeMinimum(self, value): ...

    @property
    def SIMIons(self): ...

    @SIMIons.setter
    def SIMIons(self, value): ...

    @property
    def ScanMethodNumbers(self): ...

    @ScanMethodNumbers.setter
    def ScanMethodNumbers(self, value): ...

    @property
    def ScanTypes(self): ...

    @ScanTypes.setter
    def ScanTypes(self, value): ...

    @property
    def ScanTypesInformationCount(self): ...

    @ScanTypesInformationCount.setter
    def ScanTypesInformationCount(self, value): ...

    @property
    def SpectraFormat(self): ...

    @property
    def TotalScansPresent(self): ...

    @TotalScansPresent.setter
    def TotalScansPresent(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CollisionEnergies(self) -> ICoreList[float]: ...

    def get_CollisionEnergy(self) -> List[float]: ...

    def get_CompensationFieldValues(self) -> List[float]: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_DispersionFieldValues(self) -> List[float]: ...

    def get_FileHasMassSpectralData(self) -> bool: ...

    def get_FragmentorVoltage(self) -> List[float]: ...

    def get_FragmentorVoltages(self) -> ICoreList[float]: ...

    def get_IonModes(self) -> IonizationMode: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_MRMTransitions(self) -> List[IRange]: ...

    def get_MSLevel(self) -> MSLevel: ...

    def get_MassRange(self) -> IRange: ...

    def get_MzScanRangeMaximum(self) -> float: ...

    def get_MzScanRangeMinimum(self) -> float: ...

    def get_SIMIons(self) -> List[float]: ...

    def get_ScanMethodNumbers(self) -> List[int]: ...

    def get_ScanTypes(self) -> MSScanType: ...

    def get_ScanTypesInformationCount(self) -> int: ...

    def get_SpectraFormat(self) -> MSStorageMode: ...

    def get_TotalScansPresent(self) -> int: ...


class ISignalInfo:

    @property
    def DeviceInformation(self): ...

    @DeviceInformation.setter
    def DeviceInformation(self, value): ...

    @property
    def SignalName(self): ...

    @SignalName.setter
    def SignalName(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceInformation(self) -> IDeviceInfo: ...

    def get_SignalName(self) -> str: ...

    def set_DeviceInformation(self, _: IDeviceInfo) -> None: ...

    def set_SignalName(self, _: str) -> None: ...


class BDASpecData:

    @property
    def AcquiredTimeRangesInfo(self): ...

    @AcquiredTimeRangesInfo.setter
    def AcquiredTimeRangesInfo(self, value): ...

    @property
    def Calibration(self): ...

    @Calibration.setter
    def Calibration(self, value): ...

    def Cleanup(self) -> None: ...

    def Clear(self) -> None: ...

    def Clone(self) -> IBDASpecData: ...

    @property
    def DeviceIDInfo(self): ...

    @DeviceIDInfo.setter
    def DeviceIDInfo(self, value): ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    @property
    def FileXSamplingType(self): ...

    @FileXSamplingType.setter
    def FileXSamplingType(self, value): ...

    @property
    def FilteredScanCountInfo(self): ...

    @FilteredScanCountInfo.setter
    def FilteredScanCountInfo(self, value): ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetPointDataValueTypeForIndex(self, _: int) -> DataValueType: ...

    def GetType(self) -> Type: ...

    def GetXAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    def GetYAxisInfoSpec(self, _: Any, __: Any) -> Tuple[None, DataUnit, DataValueType]: ...

    @property
    def IsDataInMassUnits(self): ...

    @IsDataInMassUnits.setter
    def IsDataInMassUnits(self, value): ...

    def IsDeviceOfTypeTOF(self) -> bool: ...

    @property
    def IsEmptySpectrumInfo(self): ...

    @IsEmptySpectrumInfo.setter
    def IsEmptySpectrumInfo(self, value): ...

    @property
    def IsICPData(self): ...

    @IsICPData.setter
    def IsICPData(self, value): ...

    @property
    def IsNullMSSpectrumFormat(self): ...

    @IsNullMSSpectrumFormat.setter
    def IsNullMSSpectrumFormat(self, value): ...

    @property
    def MSOverallScanRecordInformation(self): ...

    @MSOverallScanRecordInformation.setter
    def MSOverallScanRecordInformation(self, value): ...

    @property
    def MSSpectrumFormatXSamplingType(self): ...

    @MSSpectrumFormatXSamplingType.setter
    def MSSpectrumFormatXSamplingType(self, value): ...

    @property
    def MeasuredMassRangeInfo(self): ...

    @MeasuredMassRangeInfo.setter
    def MeasuredMassRangeInfo(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def OverallAcqTimeRangeInfo(self): ...

    @OverallAcqTimeRangeInfo.setter
    def OverallAcqTimeRangeInfo(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SelectedIonsInfo(self): ...

    @SelectedIonsInfo.setter
    def SelectedIonsInfo(self, value): ...

    def SetData(self, _: List[float], __: List[float]) -> None: ...

    @property
    def SpectrumTypeInfo(self): ...

    @SpectrumTypeInfo.setter
    def SpectrumTypeInfo(self, value): ...

    @property
    def StorageMode(self): ...

    @StorageMode.setter
    def StorageMode(self, value): ...

    def ToString(self) -> str: ...

    @property
    def XArrayNotExpanded(self): ...

    @XArrayNotExpanded.setter
    def XArrayNotExpanded(self, value): ...

    @property
    def XSpecificData(self): ...

    @XSpecificData.setter
    def XSpecificData(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AcquiredTimeRangesInfo(self) -> BDARangeCollection: ...

    def get_Calibration(self) -> Any: ...

    def get_DeviceIDInfo(self) -> int: ...

    def get_Disposed(self) -> bool: ...

    def get_FileXSamplingType(self) -> XSamplingType: ...

    def get_FilteredScanCountInfo(self) -> int: ...

    def get_IsDataInMassUnits(self) -> bool: ...

    def get_IsEmptySpectrumInfo(self) -> bool: ...

    def get_IsICPData(self) -> bool: ...

    def get_IsNullMSSpectrumFormat(self) -> bool: ...

    def get_MSOverallScanRecordInformation(self) -> MSOverallScanRecordInfo: ...

    def get_MSSpectrumFormatXSamplingType(self) -> XSamplingType: ...

    def get_MeasuredMassRangeInfo(self) -> IRange: ...

    def get_OverallAcqTimeRangeInfo(self) -> IRange: ...

    def get_SelectedIonsInfo(self) -> List[float]: ...

    def get_SpectrumTypeInfo(self) -> SpecType: ...

    def get_StorageMode(self) -> MSStorageMode: ...

    def get_XArrayNotExpanded(self) -> List[float]: ...

    def get_XSpecificData(self) -> XSpecificData: ...

    def set_Calibration(self, _: Any) -> None: ...

    def set_StorageMode(self, _: MSStorageMode) -> None: ...


class IBDAMsDeviceInfo:

    @property
    def BaseAdcInterval(self): ...

    @BaseAdcInterval.setter
    def BaseAdcInterval(self, value): ...

    @property
    def DecisionEngineMode(self): ...

    @DecisionEngineMode.setter
    def DecisionEngineMode(self, value): ...

    @property
    def DecisionEngineVersion(self): ...

    @DecisionEngineVersion.setter
    def DecisionEngineVersion(self, value): ...

    @property
    def DeviceType(self): ...

    @DeviceType.setter
    def DeviceType(self, value): ...

    @property
    def DriverVersion(self): ...

    @DriverVersion.setter
    def DriverVersion(self, value): ...

    @property
    def DualGainRatio(self): ...

    @DualGainRatio.setter
    def DualGainRatio(self, value): ...

    @property
    def FirmwareVersion(self): ...

    @FirmwareVersion.setter
    def FirmwareVersion(self, value): ...

    @property
    def MsProcessingMode(self): ...

    @MsProcessingMode.setter
    def MsProcessingMode(self, value): ...

    @property
    def NominalMassResolution(self): ...

    @NominalMassResolution.setter
    def NominalMassResolution(self, value): ...

    @property
    def PreampOffsetHighGain(self): ...

    @PreampOffsetHighGain.setter
    def PreampOffsetHighGain(self, value): ...

    @property
    def PreampOffsetLowGain(self): ...

    @PreampOffsetLowGain.setter
    def PreampOffsetLowGain(self, value): ...

    @property
    def TuneMassRangeMax(self): ...

    @TuneMassRangeMax.setter
    def TuneMassRangeMax(self, value): ...

    @property
    def TuneMassRangeMin(self): ...

    @TuneMassRangeMin.setter
    def TuneMassRangeMin(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_BaseAdcInterval(self) -> float: ...

    def get_DecisionEngineMode(self) -> int: ...

    def get_DecisionEngineVersion(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_DriverVersion(self) -> str: ...

    def get_DualGainRatio(self) -> float: ...

    def get_FirmwareVersion(self) -> str: ...

    def get_MsProcessingMode(self) -> TofMsProcessingMode: ...

    def get_NominalMassResolution(self) -> int: ...

    def get_PreampOffsetHighGain(self) -> float: ...

    def get_PreampOffsetLowGain(self) -> float: ...

    def get_TuneMassRangeMax(self) -> float: ...

    def get_TuneMassRangeMin(self) -> float: ...


class BDAProgressEventHandler:

    def BeginInvoke(self,
            _: object,
            __: BDAProgressEventArgs,
            ___: Any,
            ____: object,
            ) -> Any: ...

    def Clone(self) -> object: ...

    def Combine(self, _: Any, __: Any) -> Any: ...

    def CombineImpl(self, _: Any) -> Any: ...

    def CreateDelegate(self,
            _: Type,
            __: object,
            ___: str,
            ____: bool,
            _____: bool,
            ) -> Any: ...

    def DynamicInvoke(self, _: List[object]) -> object: ...

    def DynamicInvokeImpl(self, _: List[object]) -> object: ...

    def EndInvoke(self, _: Any) -> None: ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetInvocationList(self) -> List[Any]: ...

    def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

    def GetObjectData(self,
            _: System.Runtime.Serialization.SerializationInfo,
            __: System.Runtime.Serialization.StreamingContext,
            ) -> None: ...

    def GetType(self) -> Type: ...

    def Invoke(self, _: object, __: BDAProgressEventArgs) -> None: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Method(self): ...

    @Method.setter
    def Method(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Remove(self, _: Any, __: Any) -> Any: ...

    def RemoveAll(self, _: Any, __: Any) -> Any: ...

    def RemoveImpl(self, _: Any) -> Any: ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Method(self) -> System.Reflection.MethodInfo: ...

    def get_Target(self) -> object: ...

    def op_Equality(self, _: Any, __: Any) -> bool: ...

    def op_Inequality(self, _: Any, __: Any) -> bool: ...


class IRange:

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: IRange) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeConsistent(self) -> None: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ValueString(self, _: bool, __: int) -> str: ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def get_Start(self) -> float: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...


class IDeviceInfo:

    @property
    def DeviceName(self) -> str: ...

    @DeviceName.setter
    def DeviceName(self, value: str): ...

    @property
    def DeviceType(self) -> DeviceType: ...

    @DeviceType.setter
    def DeviceType(self, value: DeviceType): ...

    @property
    def OrdinalNumber(self) -> int: ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value: int): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DeviceName(self) -> str: ...

    def get_DeviceType(self) -> DeviceType: ...

    def get_OrdinalNumber(self) -> int: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DeviceType(self, _: DeviceType) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...


class DisposableBase:

    def Cleanup(self) -> None: ...

    def Dispose(self) -> None: ...

    @property
    def Disposed(self): ...

    @Disposed.setter
    def Disposed(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Disposed(self) -> bool: ...


class XSamplingType:

    def BoundedRegions(self, *args, **kwargs) -> Any: ...

    def CompareTo(self, _: object) -> int: ...

    def Continuous(self, *args, **kwargs) -> Any: ...

    def Discontinuous(self, *args, **kwargs) -> Any: ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def Format(self, _: Type, __: object, ___: str) -> str: ...

    def GetHashCode(self) -> int: ...

    def GetName(self, _: Type, __: object) -> str: ...

    def GetNames(self, _: Type) -> List[str]: ...

    def GetType(self) -> Type: ...

    def GetTypeCode(self) -> Any: ...

    def GetUnderlyingType(self, _: Type) -> Type: ...

    def GetValues(self, _: Type) -> List: ...

    def HasFlag(self, _: Enum) -> bool: ...

    def Irregular(self, *args, **kwargs) -> Any: ...

    def IsDefined(self, _: Type, __: object) -> bool: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def Parse(self, _: Type, __: str, ___: bool) -> object: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SparseStepped(self, *args, **kwargs) -> Any: ...

    def Stepped(self, *args, **kwargs) -> Any: ...

    def ToObject(self, _: Type, __: object) -> object: ...

    def ToString(self, _: str, __: Any) -> str: ...

    def TryParse(self, *args, **kwargs) -> Any: ...

    def Unspecified(self, *args, **kwargs) -> Any: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IUnitsAndPrecision:

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    def Equals(self, _: IUnitsAndPrecision) -> bool: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...


class IReadOnlyObject:

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_IsReadOnly(self) -> bool: ...


class DisplayPrecisionType:

    def CompareTo(self, _: object) -> int: ...

    def DigitsAfterDecimal(self, *args, **kwargs) -> Any: ...

    def Equals(self, _: object) -> bool: ...

    def Exponential(self, *args, **kwargs) -> Any: ...

    def Finalize(self) -> None: ...

    def Format(self, _: Type, __: object, ___: str) -> str: ...

    def GetHashCode(self) -> int: ...

    def GetName(self, _: Type, __: object) -> str: ...

    def GetNames(self, _: Type) -> List[str]: ...

    def GetType(self) -> Type: ...

    def GetTypeCode(self) -> Any: ...

    def GetUnderlyingType(self, _: Type) -> Type: ...

    def GetValues(self, _: Type) -> List: ...

    def HasFlag(self, _: Enum) -> bool: ...

    def IsDefined(self, _: Type, __: object) -> bool: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def Parse(self, _: Type, __: str, ___: bool) -> object: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToObject(self, _: Type, __: object) -> object: ...

    def ToString(self, _: str, __: Any) -> str: ...

    def TryParse(self, *args, **kwargs) -> Any: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAActualData:

    @property
    def Category(self): ...

    @Category.setter
    def Category(self, value): ...

    @property
    def DataValue(self): ...

    @DataValue.setter
    def DataValue(self, value): ...

    @property
    def DisplayEffectType(self): ...

    @DisplayEffectType.setter
    def DisplayEffectType(self, value): ...

    @property
    def DisplayName(self): ...

    @DisplayName.setter
    def DisplayName(self, value): ...

    @property
    def DisplayValue(self): ...

    @DisplayValue.setter
    def DisplayValue(self, value): ...

    @property
    def InternalName(self): ...

    @InternalName.setter
    def InternalName(self, value): ...

    @property
    def Unit(self): ...

    @Unit.setter
    def Unit(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Category(self) -> str: ...

    def get_DataValue(self) -> object: ...

    def get_DisplayEffectType(self) -> DisplayEffectType: ...

    def get_DisplayName(self) -> str: ...

    def get_DisplayValue(self) -> str: ...

    def get_InternalName(self) -> str: ...

    def get_Unit(self) -> str: ...

    def set_Category(self, _: str) -> None: ...

    def set_DataValue(self, _: object) -> None: ...

    def set_DisplayEffectType(self, _: DisplayEffectType) -> None: ...

    def set_DisplayName(self, _: str) -> None: ...

    def set_DisplayValue(self, _: str) -> None: ...

    def set_InternalName(self, _: str) -> None: ...

    def set_Unit(self, _: str) -> None: ...


class IBDASpecFilter:

    @property
    def AverageSpectrum(self): ...

    @AverageSpectrum.setter
    def AverageSpectrum(self, value): ...

    @property
    def BackgroundScanRanges(self): ...

    @BackgroundScanRanges.setter
    def BackgroundScanRanges(self, value): ...

    @property
    def ChromPeakIndex(self): ...

    @ChromPeakIndex.setter
    def ChromPeakIndex(self, value): ...

    def Clone(self) -> IBDASpecFilter: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def DesiredMSStorageType(self): ...

    @DesiredMSStorageType.setter
    def DesiredMSStorageType(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    def Equals(self, _: IBDASpecFilter) -> bool: ...

    @property
    def ExtractByCycle(self): ...

    @ExtractByCycle.setter
    def ExtractByCycle(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def IonPolarityFilter(self): ...

    @IonPolarityFilter.setter
    def IonPolarityFilter(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def MSLevelFilter(self): ...

    @MSLevelFilter.setter
    def MSLevelFilter(self, value): ...

    @property
    def MSScanTypeFilter(self): ...

    @MSScanTypeFilter.setter
    def MSScanTypeFilter(self, value): ...

    @property
    def MassRange(self): ...

    @MassRange.setter
    def MassRange(self, value): ...

    @property
    def MassUnits(self): ...

    @MassUnits.setter
    def MassUnits(self, value): ...

    @property
    def MzOfInterestFilter(self): ...

    @MzOfInterestFilter.setter
    def MzOfInterestFilter(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ScaleFactorY(self): ...

    @ScaleFactorY.setter
    def ScaleFactorY(self, value): ...

    @property
    def ScaledAbundanceLimit(self): ...

    @ScaledAbundanceLimit.setter
    def ScaledAbundanceLimit(self, value): ...

    @property
    def ScanIds(self): ...

    @ScanIds.setter
    def ScanIds(self, value): ...

    @property
    def ScanRange(self): ...

    @ScanRange.setter
    def ScanRange(self, value): ...

    @property
    def SpectrumSubType(self): ...

    @SpectrumSubType.setter
    def SpectrumSubType(self, value): ...

    @property
    def SpectrumType(self): ...

    @SpectrumType.setter
    def SpectrumType(self, value): ...

    @property
    def XClipRanges(self): ...

    @XClipRanges.setter
    def XClipRanges(self, value): ...

    @property
    def ZeroBoundWhenClipping(self): ...

    @ZeroBoundWhenClipping.setter
    def ZeroBoundWhenClipping(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AverageSpectrum(self) -> bool: ...

    def get_BackgroundScanRanges(self) -> List[IRange]: ...

    def get_ChromPeakIndex(self) -> int: ...

    def get_CollisionEnergy(self) -> IRange: ...

    def get_CompensationField(self) -> IRange: ...

    def get_DesiredMSStorageType(self) -> DesiredMSStorageType: ...

    def get_DeviceName(self) -> str: ...

    def get_DispersionField(self) -> IRange: ...

    def get_ExtractByCycle(self) -> bool: ...

    def get_FragmentorVoltage(self) -> IRange: ...

    def get_IonPolarityFilter(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_MSLevelFilter(self) -> MSLevel: ...

    def get_MSScanTypeFilter(self) -> MSScanType: ...

    def get_MassRange(self) -> IRange: ...

    def get_MassUnits(self) -> bool: ...

    def get_MzOfInterestFilter(self) -> List[IRange]: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ScaleFactorY(self) -> float: ...

    def get_ScaledAbundanceLimit(self) -> float: ...

    def get_ScanIds(self) -> List[int]: ...

    def get_ScanRange(self) -> List[IRange]: ...

    def get_SpectrumSubType(self) -> SpecSubType: ...

    def get_SpectrumType(self) -> SpecType: ...

    def get_XClipRanges(self) -> List[IRange]: ...

    def get_ZeroBoundWhenClipping(self) -> bool: ...

    def set_AverageSpectrum(self, _: bool) -> None: ...

    def set_BackgroundScanRanges(self, _: List[IRange]) -> None: ...

    def set_ChromPeakIndex(self, _: int) -> None: ...

    def set_CollisionEnergy(self, _: IRange) -> None: ...

    def set_CompensationField(self, _: IRange) -> None: ...

    def set_DesiredMSStorageType(self, _: DesiredMSStorageType) -> None: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DispersionField(self, _: IRange) -> None: ...

    def set_ExtractByCycle(self, _: bool) -> None: ...

    def set_FragmentorVoltage(self, _: IRange) -> None: ...

    def set_IonPolarityFilter(self, _: IonPolarity) -> None: ...

    def set_IonizationMode(self, _: IonizationMode) -> None: ...

    def set_MSLevelFilter(self, _: MSLevel) -> None: ...

    def set_MSScanTypeFilter(self, _: MSScanType) -> None: ...

    def set_MassRange(self, _: IRange) -> None: ...

    def set_MassUnits(self, _: bool) -> None: ...

    def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...

    def set_ScaleFactorY(self, _: float) -> None: ...

    def set_ScaledAbundanceLimit(self, _: float) -> None: ...

    def set_ScanIds(self, _: List[int]) -> None: ...

    def set_ScanRange(self, _: List[IRange]) -> None: ...

    def set_SpectrumSubType(self, _: SpecSubType) -> None: ...

    def set_SpectrumType(self, _: SpecType) -> None: ...

    def set_XClipRanges(self, _: List[IRange]) -> None: ...

    def set_ZeroBoundWhenClipping(self, _: bool) -> None: ...


class BDAMSScanTypeInformation:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAMSScanTypeInformation:

    def Clone(self) -> IBDAMSScanTypeInformation: ...

    def Contains(self, _: float) -> bool: ...

    @property
    def IonPolarities(self): ...

    @IonPolarities.setter
    def IonPolarities(self, value): ...

    @property
    def MSScanType(self): ...

    @MSScanType.setter
    def MSScanType(self, value): ...

    @property
    def MzOfInterest(self): ...

    @MzOfInterest.setter
    def MzOfInterest(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_IonPolarities(self) -> IonPolarity: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MzOfInterest(self) -> List[float]: ...


class ICoreList:

    def Add(self, _: Any) -> None: ...

    def AddDelegate(self, _: ChangeNotifyDelegate) -> None: ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clear(self) -> None: ...

    def Clone(self) -> ICoreList[Any]: ...

    def Contains(self, _: Any) -> bool: ...

    def CopyTo(self, _: List[Any], __: int) -> None: ...

    @property
    def Count(self): ...

    @Count.setter
    def Count(self, value): ...

    def Exists(self, _: System.Predicate[Any]) -> bool: ...

    def Find(self, _: System.Predicate[Any]) -> Any: ...

    def FindIndex(self, _: System.Predicate[Any]) -> int: ...

    def GetEnumerator(self) -> System.Collections.IEnumerator: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IndexOf(self, _: Any) -> int: ...

    def Insert(self, _: int, __: Any) -> None: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def MakeConsistent(self) -> None: ...

    def Remove(self, _: Any) -> bool: ...

    def RemoveAt(self, _: int) -> None: ...

    def RemoveDelegate(self, _: ChangeNotifyDelegate) -> None: ...

    def Reverse(self) -> None: ...

    def Sort(self, _: Any) -> None: ...

    def ToArray(self) -> List[Any]: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_Count(self) -> int: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_Item(self, _: int) -> Any: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_Item(self, _: int, __: Any) -> None: ...


class BDAProgressEventArgs:

    @property
    def CanCancelTask(self): ...

    @CanCancelTask.setter
    def CanCancelTask(self, value): ...

    def Empty(self, *args, **kwargs) -> Any: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PercentComplete(self): ...

    @PercentComplete.setter
    def PercentComplete(self, value): ...

    @property
    def ProgressStage(self): ...

    @ProgressStage.setter
    def ProgressStage(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def StageMessage(self): ...

    @StageMessage.setter
    def StageMessage(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CanCancelTask(self) -> bool: ...

    def get_PercentComplete(self) -> int: ...

    def get_ProgressStage(self) -> ProgressStage: ...

    def get_StageMessage(self) -> str: ...


class BDASampleData:

    def Clone(self) -> IBDASampleData: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDASampleData:

    @property
    def Category(self): ...

    @Category.setter
    def Category(self, value): ...

    @property
    def DataValue(self): ...

    @DataValue.setter
    def DataValue(self, value): ...

    @property
    def DisplayName(self): ...

    @DisplayName.setter
    def DisplayName(self, value): ...

    @property
    def DisplayValue(self): ...

    @DisplayValue.setter
    def DisplayValue(self, value): ...

    @property
    def InternalName(self): ...

    @InternalName.setter
    def InternalName(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Category(self) -> SampleCategory: ...

    def get_DataValue(self) -> object: ...

    def get_DisplayName(self) -> str: ...

    def get_DisplayValue(self) -> str: ...

    def get_InternalName(self) -> str: ...

    def set_Category(self, _: SampleCategory) -> None: ...

    def set_DataValue(self, _: object) -> None: ...

    def set_DisplayName(self, _: str) -> None: ...

    def set_DisplayValue(self, _: str) -> None: ...

    def set_InternalName(self, _: str) -> None: ...


class MSScanRecord:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IMSScanRecord:

    @property
    def BasePeakIntensity(self) -> float: ...

    @BasePeakIntensity.setter
    def BasePeakIntensity(self, value: float): ...

    @property
    def BasePeakMZ(self) -> float: ...

    @BasePeakMZ.setter
    def BasePeakMZ(self, value: float): ...

    @property
    def CollisionEnergy(self) -> float: ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value: float): ...

    @property
    def CompensationField(self) -> float: ...

    @property
    def DispersionField(self) -> float: ...

    @property
    def FragmentorVoltage(self) -> float: ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value: float): ...

    @property
    def IonPolarity(self) -> IonPolarity: ...

    @IonPolarity.setter
    def IonPolarity(self, value: IonPolarity): ...

    @property
    def IonizationMode(self) -> IonizationMode: ...

    @IonizationMode.setter
    def IonizationMode(self, value: IonizationMode): ...

    @property
    def IsCollisionEnergyDynamic(self) -> bool: ...

    @IsCollisionEnergyDynamic.setter
    def IsCollisionEnergyDynamic(self, value: bool): ...

    @property
    def IsFragmentorVoltageDynamic(self) -> bool: ...

    @IsFragmentorVoltageDynamic.setter
    def IsFragmentorVoltageDynamic(self, value: bool): ...

    @property
    def MSLevel(self) -> MSLevel: ...

    @MSLevel.setter
    def MSLevel(self, value: MSLevel): ...

    @property
    def MSScanType(self) -> MSScanType: ...

    @MSScanType.setter
    def MSScanType(self, value: MSScanType): ...

    @property
    def MZOfInterest(self) -> float: ...

    @MZOfInterest.setter
    def MZOfInterest(self, value: float): ...

    @property
    def RetentionTime(self) -> float: ...

    @RetentionTime.setter
    def RetentionTime(self, value: float): ...

    @property
    def ScanID(self): ...

    @ScanID.setter
    def ScanID(self, value): ...

    @property
    def Tic(self) -> float: ...

    @Tic.setter
    def Tic(self, value: float): ...

    @property
    def TimeSegment(self) -> int: ...

    @TimeSegment.setter
    def TimeSegment(self, value: int): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_BasePeakIntensity(self) -> float: ...

    def get_BasePeakMZ(self) -> float: ...

    def get_CollisionEnergy(self) -> float: ...

    def get_CompensationField(self) -> float: ...

    def get_DispersionField(self) -> float: ...

    def get_FragmentorVoltage(self) -> float: ...

    def get_IonPolarity(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_IsCollisionEnergyDynamic(self) -> bool: ...

    def get_IsFragmentorVoltageDynamic(self) -> bool: ...

    def get_MSLevel(self) -> MSLevel: ...

    def get_MSScanType(self) -> MSScanType: ...

    def get_MZOfInterest(self) -> float: ...

    def get_RetentionTime(self) -> float: ...

    def get_ScanID(self) -> int: ...

    def get_Tic(self) -> float: ...

    def get_TimeSegment(self) -> int: ...


class ChangeNotifyDelegate:

    def BeginInvoke(self, _: Any, __: object) -> Any: ...

    def Clone(self) -> object: ...

    def Combine(self, _: Any, __: Any) -> Any: ...

    def CombineImpl(self, _: Any) -> Any: ...

    def CreateDelegate(self,
            _: Type,
            __: object,
            ___: str,
            ____: bool,
            _____: bool,
            ) -> Any: ...

    def DynamicInvoke(self, _: List[object]) -> object: ...

    def DynamicInvokeImpl(self, _: List[object]) -> object: ...

    def EndInvoke(self, _: Any) -> None: ...

    def Equals(self, _: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetInvocationList(self) -> List[Any]: ...

    def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

    def GetObjectData(self,
            _: System.Runtime.Serialization.SerializationInfo,
            __: System.Runtime.Serialization.StreamingContext,
            ) -> None: ...

    def GetType(self) -> Type: ...

    def Invoke(self) -> None: ...

    def MemberwiseClone(self) -> object: ...

    @property
    def Method(self): ...

    @Method.setter
    def Method(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def Remove(self, _: Any, __: Any) -> Any: ...

    def RemoveAll(self, _: Any, __: Any) -> Any: ...

    def RemoveImpl(self, _: Any) -> Any: ...

    @property
    def Target(self): ...

    @Target.setter
    def Target(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Method(self) -> System.Reflection.MethodInfo: ...

    def get_Target(self) -> object: ...

    def op_Equality(self, _: Any, __: Any) -> bool: ...

    def op_Inequality(self, _: Any, __: Any) -> bool: ...


class IMsdrPeakFilter:

    @property
    def AbsoluteThreshold(self) -> float: ...

    @AbsoluteThreshold.setter
    def AbsoluteThreshold(self, value: float): ...

    @property
    def MaxNumPeaks(self) -> int: ...

    @MaxNumPeaks.setter
    def MaxNumPeaks(self, value: int): ...

    @property
    def RelativeThreshold(self) -> float: ...

    @RelativeThreshold.setter
    def RelativeThreshold(self, value: float): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbsoluteThreshold(self) -> float: ...

    def get_MaxNumPeaks(self) -> int: ...

    def get_RelativeThreshold(self) -> float: ...

    def set_AbsoluteThreshold(self, _: float) -> None: ...

    def set_MaxNumPeaks(self, _: int) -> None: ...

    def set_RelativeThreshold(self, _: float) -> None: ...


class IMsdrChargeStateAssignmentFilter:

    @property
    def AbsoluteTolerance(self) -> float: ...

    @AbsoluteTolerance.setter
    def AbsoluteTolerance(self, value: float): ...

    @property
    def LimitMaxChargeState(self) -> bool: ...

    @LimitMaxChargeState.setter
    def LimitMaxChargeState(self, value: bool): ...

    @property
    def MaximumChargeState(self) -> int: ...

    @MaximumChargeState.setter
    def MaximumChargeState(self, value: int): ...

    @property
    def RelativeTolerance(self) -> int: ...

    @RelativeTolerance.setter
    def RelativeTolerance(self, value: int): ...

    @property
    def RequirePeptideLikeAbundanceProfile(self) -> bool: ...

    @RequirePeptideLikeAbundanceProfile.setter
    def RequirePeptideLikeAbundanceProfile(self, value: bool): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AbsoluteTolerance(self) -> float: ...

    def get_LimitMaxChargeState(self) -> bool: ...

    def get_MaximumChargeState(self) -> int: ...

    def get_RelativeTolerance(self) -> float: ...

    def get_RequirePeptideLikeAbundanceProfile(self) -> bool: ...

    def set_AbsoluteTolerance(self, _: float) -> None: ...

    def set_LimitMaxChargeState(self, _: bool) -> None: ...

    def set_MaximumChargeState(self, _: int) -> None: ...

    def set_RelativeTolerance(self, _: float) -> None: ...

    def set_RequirePeptideLikeAbundanceProfile(self, _: bool) -> None: ...


class CenterWidthPctRange:

    @property
    def A(self): ...

    @A.setter
    def A(self, value): ...

    @property
    def B(self): ...

    @B.setter
    def B(self, value): ...

    @property
    def C(self): ...

    @C.setter
    def C(self, value): ...

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeClone(self) -> IRange: ...

    def MakeConsistent(self) -> None: ...

    def MarkAsChanged(self) -> None: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ToString(self) -> str: ...

    def ValueString(self, _: bool, __: int) -> str: ...

    @property
    def WidthPct(self): ...

    @WidthPct.setter
    def WidthPct(self, value): ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_A(self) -> float: ...

    def get_B(self) -> float: ...

    def get_C(self) -> float: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_Start(self) -> float: ...

    def get_WidthPct(self) -> float: ...

    def set_A(self, _: float) -> None: ...

    def set_B(self, _: float) -> None: ...

    def set_C(self, _: float) -> None: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_WidthPct(self, _: float) -> None: ...


class MinMaxRange:

    @property
    def A(self): ...

    @A.setter
    def A(self, value): ...

    @property
    def B(self): ...

    @B.setter
    def B(self, value): ...

    @property
    def C(self): ...

    @C.setter
    def C(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeClone(self) -> IRange: ...

    def MakeConsistent(self) -> None: ...

    def MarkAsChanged(self) -> None: ...

    @property
    def Max(self): ...

    @Max.setter
    def Max(self, value): ...

    def MemberwiseClone(self) -> object: ...

    def Merge(self, _: IMinMaxRange) -> IMinMaxRange: ...

    @property
    def Min(self): ...

    @Min.setter
    def Min(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ToString(self) -> str: ...

    def ValueString(self, _: bool, __: int) -> str: ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_A(self) -> float: ...

    def get_B(self) -> float: ...

    def get_C(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_Max(self) -> float: ...

    def get_Min(self) -> float: ...

    def get_Start(self) -> float: ...

    def set_A(self, _: float) -> None: ...

    def set_B(self, _: float) -> None: ...

    def set_C(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_Max(self, _: float) -> None: ...

    def set_Min(self, _: float) -> None: ...


class IMinMaxRange:

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IMinMaxRange: ...

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: IUnitsAndPrecision) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeConsistent(self) -> None: ...

    @property
    def Max(self): ...

    @Max.setter
    def Max(self, value): ...

    def Merge(self, _: IMinMaxRange) -> IMinMaxRange: ...

    @property
    def Min(self): ...

    @Min.setter
    def Min(self, value): ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ValueString(self, _: bool, __: int) -> str: ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_Max(self) -> float: ...

    def get_Min(self) -> float: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def get_Start(self) -> float: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_Max(self, _: float) -> None: ...

    def set_Min(self, _: float) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...


class ICenterWidthPctRange:

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> ICenterWidthPctRange: ...

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: IUnitsAndPrecision) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeConsistent(self) -> None: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ValueString(self, _: bool, __: int) -> str: ...

    @property
    def WidthPct(self): ...

    @WidthPct.setter
    def WidthPct(self, value): ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def get_Start(self) -> float: ...

    def get_WidthPct(self) -> float: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...

    def set_WidthPct(self, _: float) -> None: ...


class RangeBase:

    @property
    def A(self): ...

    @A.setter
    def A(self, value): ...

    @property
    def B(self): ...

    @B.setter
    def B(self, value): ...

    @property
    def C(self): ...

    @C.setter
    def C(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeClone(self) -> IRange: ...

    def MakeConsistent(self) -> None: ...

    def MarkAsChanged(self) -> None: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ToString(self) -> str: ...

    def ValueString(self, _: bool, __: int) -> str: ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_A(self) -> float: ...

    def get_B(self) -> float: ...

    def get_C(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_Start(self) -> float: ...

    def set_A(self, _: float) -> None: ...

    def set_B(self, _: float) -> None: ...

    def set_C(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...


class CenterWidthRange:

    @property
    def A(self): ...

    @A.setter
    def A(self, value): ...

    @property
    def B(self): ...

    @B.setter
    def B(self, value): ...

    @property
    def C(self): ...

    @C.setter
    def C(self, value): ...

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeClone(self) -> IRange: ...

    def MakeConsistent(self) -> None: ...

    def MarkAsChanged(self) -> None: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ToString(self) -> str: ...

    def ValueString(self, _: bool, __: int) -> str: ...

    @property
    def Width(self): ...

    @Width.setter
    def Width(self, value): ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_A(self) -> float: ...

    def get_B(self) -> float: ...

    def get_C(self) -> float: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_Start(self) -> float: ...

    def get_Width(self) -> float: ...

    def set_A(self, _: float) -> None: ...

    def set_B(self, _: float) -> None: ...

    def set_C(self, _: float) -> None: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_Width(self, _: float) -> None: ...


class ICenterWidthRange:

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> ICenterWidthRange: ...

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: IUnitsAndPrecision) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeConsistent(self) -> None: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ValueString(self, _: bool, __: int) -> str: ...

    @property
    def Width(self): ...

    @Width.setter
    def Width(self, value): ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def get_Start(self) -> float: ...

    def get_Width(self) -> float: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...

    def set_Width(self, _: float) -> None: ...


class AsymmetricRange:

    @property
    def A(self): ...

    @A.setter
    def A(self, value): ...

    @property
    def B(self): ...

    @B.setter
    def B(self, value): ...

    @property
    def C(self): ...

    @C.setter
    def C(self, value): ...

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    @property
    def HighSpan(self): ...

    @HighSpan.setter
    def HighSpan(self, value): ...

    def IsEmpty(self) -> bool: ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    @property
    def LowSpan(self): ...

    @LowSpan.setter
    def LowSpan(self, value): ...

    def MakeClone(self) -> IRange: ...

    def MakeConsistent(self) -> None: ...

    def MarkAsChanged(self) -> None: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ToString(self) -> str: ...

    def ValueString(self, _: bool, __: int) -> str: ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_A(self) -> float: ...

    def get_B(self) -> float: ...

    def get_C(self) -> float: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_HighSpan(self) -> float: ...

    def get_LowSpan(self) -> float: ...

    def get_Start(self) -> float: ...

    def set_A(self, _: float) -> None: ...

    def set_B(self, _: float) -> None: ...

    def set_C(self, _: float) -> None: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_HighSpan(self, _: float) -> None: ...

    def set_LowSpan(self, _: float) -> None: ...


class IAsymmetricRange:

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IAsymmetricRange: ...

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: IUnitsAndPrecision) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    @property
    def HighSpan(self): ...

    @HighSpan.setter
    def HighSpan(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    @property
    def LowSpan(self): ...

    @LowSpan.setter
    def LowSpan(self, value): ...

    def MakeConsistent(self) -> None: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ValueString(self, _: bool, __: int) -> str: ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_HighSpan(self) -> float: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_LowSpan(self) -> float: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def get_Start(self) -> float: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_HighSpan(self, _: float) -> None: ...

    def set_LowSpan(self, _: float) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...


class CenterWidthPpmRange:

    @property
    def A(self): ...

    @A.setter
    def A(self, value): ...

    @property
    def B(self): ...

    @B.setter
    def B(self, value): ...

    @property
    def C(self): ...

    @C.setter
    def C(self, value): ...

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> IRange: ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: object) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeClone(self) -> IRange: ...

    def MakeConsistent(self) -> None: ...

    def MarkAsChanged(self) -> None: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ToString(self) -> str: ...

    def ValueString(self, _: bool, __: int) -> str: ...

    @property
    def WidthPpm(self): ...

    @WidthPpm.setter
    def WidthPpm(self, value): ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_A(self) -> float: ...

    def get_B(self) -> float: ...

    def get_C(self) -> float: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_Start(self) -> float: ...

    def get_WidthPpm(self) -> float: ...

    def set_A(self, _: float) -> None: ...

    def set_B(self, _: float) -> None: ...

    def set_C(self, _: float) -> None: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_WidthPpm(self, _: float) -> None: ...


class ICenterWidthPpmRange:

    @property
    def Center(self): ...

    @Center.setter
    def Center(self, value): ...

    @property
    def CheckingSuspended(self): ...

    @CheckingSuspended.setter
    def CheckingSuspended(self, value): ...

    def Clone(self) -> ICenterWidthPpmRange: ...

    def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

    @property
    def DataUnit(self): ...

    @DataUnit.setter
    def DataUnit(self, value): ...

    @property
    def DataValueType(self): ...

    @DataValueType.setter
    def DataValueType(self, value): ...

    @property
    def End(self): ...

    @End.setter
    def End(self, value): ...

    def Equals(self, _: IUnitsAndPrecision) -> bool: ...

    def ExtendedValueString(self, _: bool, __: int) -> str: ...

    @property
    def HasChanged(self): ...

    @HasChanged.setter
    def HasChanged(self, value): ...

    def IsEmpty(self) -> bool: ...

    @property
    def IsReadOnly(self): ...

    @IsReadOnly.setter
    def IsReadOnly(self, value): ...

    def IsValueWithinRange(self, _: float) -> bool: ...

    def MakeConsistent(self) -> None: ...

    @property
    def PrecisionDigits(self): ...

    @PrecisionDigits.setter
    def PrecisionDigits(self, value): ...

    @property
    def PrecisionType(self): ...

    @PrecisionType.setter
    def PrecisionType(self, value): ...

    def ReadOnly(self) -> IReadOnlyObject: ...

    def SetEmpty(self) -> None: ...

    @property
    def Start(self): ...

    @Start.setter
    def Start(self, value): ...

    def ValueString(self, _: bool, __: int) -> str: ...

    @property
    def WidthPpm(self): ...

    @WidthPpm.setter
    def WidthPpm(self, value): ...

    def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Center(self) -> float: ...

    def get_CheckingSuspended(self) -> bool: ...

    def get_DataUnit(self) -> DataUnit: ...

    def get_DataValueType(self) -> DataValueType: ...

    def get_End(self) -> float: ...

    def get_HasChanged(self) -> bool: ...

    def get_IsReadOnly(self) -> bool: ...

    def get_PrecisionDigits(self) -> int: ...

    def get_PrecisionType(self) -> DisplayPrecisionType: ...

    def get_Start(self) -> float: ...

    def get_WidthPpm(self) -> float: ...

    def set_Center(self, _: float) -> None: ...

    def set_CheckingSuspended(self, _: bool) -> None: ...

    def set_DataUnit(self, _: DataUnit) -> None: ...

    def set_DataValueType(self, _: DataValueType) -> None: ...

    def set_PrecisionDigits(self, _: int) -> None: ...

    def set_PrecisionType(self, _: DisplayPrecisionType) -> None: ...

    def set_WidthPpm(self, _: float) -> None: ...


class INonmsDataReader:

    def GetEWC(self, _: IDeviceInfo, __: IRange, ___: IRange) -> IBDAChromData: ...

    def GetNonmsDevices(self) -> List[IDeviceInfo]: ...

    def GetSignal(self, _: ISignalInfo) -> IBDAChromData: ...

    def GetSignalInfo(self, _: IDeviceInfo, __: StoredDataType) -> List[ISignalInfo]: ...

    def GetTWC(self, _: IDeviceInfo) -> IBDAChromData: ...

    def GetUVSpectrum(self, _: IDeviceInfo, __: IRange) -> List[IBDASpecData]: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDASample:

    def GetSampleCollection(self, _: SampleCategory) -> List[IBDASampleData]: ...

    def GetSampleData(self, _: str) -> System.Data.DataSet: ...

    def GetSampleInfo(self, _: str) -> List[IBDASampleData]: ...

    def GetSampleValue(self, _: str) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IImsFrameMethod:

    def AddFragEnergySegment(self, _: int, __: float) -> None: ...

    def ClearFragEnergySegments(self) -> None: ...

    def Clone(self) -> IImsFrameMethod: ...

    @property
    def DefMassCalId(self): ...

    @DefMassCalId.setter
    def DefMassCalId(self, value): ...

    @property
    def DetectorGainDeltaTo(self): ...

    @DetectorGainDeltaTo.setter
    def DetectorGainDeltaTo(self, value): ...

    @property
    def DetectorGainMode(self): ...

    @DetectorGainMode.setter
    def DetectorGainMode(self, value): ...

    @property
    def DetectorGainRatio(self): ...

    @DetectorGainRatio.setter
    def DetectorGainRatio(self, value): ...

    @property
    def FragEnergy(self): ...

    @FragEnergy.setter
    def FragEnergy(self, value): ...

    @property
    def FragEnergyMode(self): ...

    @FragEnergyMode.setter
    def FragEnergyMode(self, value): ...

    @property
    def FragEnergySegments(self): ...

    @FragEnergySegments.setter
    def FragEnergySegments(self, value): ...

    @property
    def FragOpMode(self): ...

    @FragOpMode.setter
    def FragOpMode(self, value): ...

    @property
    def FrameDtPeriod(self): ...

    @FrameDtPeriod.setter
    def FrameDtPeriod(self, value): ...

    @property
    def FrameIonPolarity(self): ...

    @FrameIonPolarity.setter
    def FrameIonPolarity(self, value): ...

    @property
    def FrameMethId(self): ...

    @FrameMethId.setter
    def FrameMethId(self, value): ...

    @property
    def FrameMsXPeriod(self): ...

    @FrameMsXPeriod.setter
    def FrameMsXPeriod(self, value): ...

    @property
    def FrameSpecAbundLimit(self): ...

    @FrameSpecAbundLimit.setter
    def FrameSpecAbundLimit(self, value): ...

    @property
    def FrameSpecFmtId(self): ...

    @FrameSpecFmtId.setter
    def FrameSpecFmtId(self, value): ...

    @property
    def FrameType(self): ...

    @FrameType.setter
    def FrameType(self, value): ...

    @property
    def ImsField(self): ...

    @ImsField.setter
    def ImsField(self, value): ...

    @property
    def ImsGas(self): ...

    @ImsGas.setter
    def ImsGas(self, value): ...

    @property
    def ImsGateMode(self): ...

    @ImsGateMode.setter
    def ImsGateMode(self, value): ...

    @property
    def ImsGateOpenTime(self): ...

    @ImsGateOpenTime.setter
    def ImsGateOpenTime(self, value): ...

    @property
    def ImsMuxProcessing(self): ...

    @ImsMuxProcessing.setter
    def ImsMuxProcessing(self, value): ...

    @property
    def ImsMuxSequence(self): ...

    @ImsMuxSequence.setter
    def ImsMuxSequence(self, value): ...

    @property
    def ImsTrapMode(self): ...

    @ImsTrapMode.setter
    def ImsTrapMode(self, value): ...

    @property
    def ImsTrapTime(self): ...

    @ImsTrapTime.setter
    def ImsTrapTime(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def MaxMsBin(self): ...

    @MaxMsBin.setter
    def MaxMsBin(self, value): ...

    @property
    def MaxMsPerFrame(self): ...

    @MaxMsPerFrame.setter
    def MaxMsPerFrame(self, value): ...

    @property
    def MinMsBin(self): ...

    @MinMsBin.setter
    def MinMsBin(self, value): ...

    @property
    def NumActuals(self): ...

    @NumActuals.setter
    def NumActuals(self, value): ...

    @property
    def NumTransients(self): ...

    @NumTransients.setter
    def NumTransients(self, value): ...

    @property
    def TfsPeakFmtId(self): ...

    @TfsPeakFmtId.setter
    def TfsPeakFmtId(self, value): ...

    @property
    def TfsProfileFmtId(self): ...

    @TfsProfileFmtId.setter
    def TfsProfileFmtId(self, value): ...

    @property
    def TfsStorageMode(self): ...

    @TfsStorageMode.setter
    def TfsStorageMode(self, value): ...

    @property
    def Threshold(self): ...

    @Threshold.setter
    def Threshold(self, value): ...

    def Validate(self, _: str) -> bool: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DefMassCalId(self) -> int: ...

    def get_DetectorGainDeltaTo(self) -> float: ...

    def get_DetectorGainMode(self) -> TofMsProcessingMode: ...

    def get_DetectorGainRatio(self) -> float: ...

    def get_FragEnergy(self) -> float: ...

    def get_FragEnergyMode(self) -> FragEnergyMode: ...

    def get_FragEnergySegments(self) -> List[IFragEnergySegmentEndPoint]: ...

    def get_FragOpMode(self) -> Any: ...

    def get_FrameDtPeriod(self) -> float: ...

    def get_FrameIonPolarity(self) -> IonPolarity: ...

    def get_FrameMethId(self) -> int: ...

    def get_FrameMsXPeriod(self) -> float: ...

    def get_FrameSpecAbundLimit(self) -> float: ...

    def get_FrameSpecFmtId(self) -> int: ...

    def get_FrameType(self) -> ImsFrameType: ...

    def get_ImsField(self) -> float: ...

    def get_ImsGas(self) -> str: ...

    def get_ImsGateMode(self) -> ImsGateMode: ...

    def get_ImsGateOpenTime(self) -> float: ...

    def get_ImsMuxProcessing(self) -> ImsMuxProcessing: ...

    def get_ImsMuxSequence(self) -> str: ...

    def get_ImsTrapMode(self) -> ImsTrapMode: ...

    def get_ImsTrapTime(self) -> float: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_MaxMsBin(self) -> int: ...

    def get_MaxMsPerFrame(self) -> int: ...

    def get_MinMsBin(self) -> int: ...

    def get_NumActuals(self) -> int: ...

    def get_NumTransients(self) -> int: ...

    def get_TfsPeakFmtId(self) -> int: ...

    def get_TfsProfileFmtId(self) -> int: ...

    def get_TfsStorageMode(self) -> MSStorageMode: ...

    def get_Threshold(self) -> float: ...

    def set_DefMassCalId(self, _: int) -> None: ...

    def set_DetectorGainDeltaTo(self, _: float) -> None: ...

    def set_DetectorGainMode(self, _: TofMsProcessingMode) -> None: ...

    def set_DetectorGainRatio(self, _: float) -> None: ...

    def set_FragEnergy(self, _: float) -> None: ...

    def set_FragEnergyMode(self, _: FragEnergyMode) -> None: ...

    def set_FragEnergySegments(self, _: List[IFragEnergySegmentEndPoint]) -> None: ...

    def set_FragOpMode(self, _: Any) -> None: ...

    def set_FrameDtPeriod(self, _: float) -> None: ...

    def set_FrameIonPolarity(self, _: IonPolarity) -> None: ...

    def set_FrameMethId(self, _: int) -> None: ...

    def set_FrameMsXPeriod(self, _: float) -> None: ...

    def set_FrameSpecAbundLimit(self, _: float) -> None: ...

    def set_FrameSpecFmtId(self, _: int) -> None: ...

    def set_FrameType(self, _: ImsFrameType) -> None: ...

    def set_ImsField(self, _: float) -> None: ...

    def set_ImsGas(self, _: str) -> None: ...

    def set_ImsGateMode(self, _: ImsGateMode) -> None: ...

    def set_ImsGateOpenTime(self, _: float) -> None: ...

    def set_ImsMuxProcessing(self, _: ImsMuxProcessing) -> None: ...

    def set_ImsMuxSequence(self, _: str) -> None: ...

    def set_ImsTrapMode(self, _: ImsTrapMode) -> None: ...

    def set_ImsTrapTime(self, _: float) -> None: ...

    def set_IonizationMode(self, _: IonizationMode) -> None: ...

    def set_MaxMsBin(self, _: int) -> None: ...

    def set_MaxMsPerFrame(self, _: int) -> None: ...

    def set_MinMsBin(self, _: int) -> None: ...

    def set_NumActuals(self, _: int) -> None: ...

    def set_NumTransients(self, _: int) -> None: ...

    def set_TfsPeakFmtId(self, _: int) -> None: ...

    def set_TfsProfileFmtId(self, _: int) -> None: ...

    def set_TfsStorageMode(self, _: MSStorageMode) -> None: ...

    def set_Threshold(self, _: float) -> None: ...


class IBDAUserCalibration:

    def ClearUserCalibration(self) -> None: ...

    def IsUserCalibrationPresent(self) -> bool: ...

    def SaveUserCalibration(self, _: Any, __: IonPolarity) -> None: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDADataAccess:

    @property
    def AcquisitionMetaData(self): ...

    @AcquisitionMetaData.setter
    def AcquisitionMetaData(self, value): ...

    def ClearScanRejectionFlagValueTable(self) -> None: ...

    def ClearUserCalibration(self) -> None: ...

    def CloseDataFile(self) -> None: ...

    @property
    def DataFileName(self): ...

    @DataFileName.setter
    def DataFileName(self, value): ...

    @property
    def DesiredMSStorageTypeToUse(self): ...

    @DesiredMSStorageTypeToUse.setter
    def DesiredMSStorageTypeToUse(self, value): ...

    @property
    def FileInformation(self): ...

    @FileInformation.setter
    def FileInformation(self, value): ...

    def GetActualCollection(self, _: float) -> List[IBDAActualData]: ...

    def GetActualNames(self) -> List[str]: ...

    def GetActualValue(self, _: str, __: List[float], ___: List[float]) -> None: ...

    def GetActuals(self, _: float) -> System.Data.DataSet: ...

    def GetChromatogram(self,
            _: IBDAChromFilter,
            __: List[IRange],
            ) -> List[IBDAChromData]: ...

    def GetDataDependentScanInfo(self) -> IBdaMsScanRecordCollection: ...

    def GetElementNameCollection(self,
            _: int,
            ) -> System.Collections.Generic.Dictionary[float, str]: ...

    def GetMSScanInformation(self, _: float) -> IBDAMSScanFileInformation: ...

    def GetMultipleEicChromatograms(self,
            _: IBDAMultiEicParameters,
            ) -> List[IBDAChromData]: ...

    def GetSampleCollection(self, _: SampleCategory) -> List[IBDASampleData]: ...

    def GetSampleData(self, _: str) -> System.Data.DataSet: ...

    def GetSampleInfo(self, _: str) -> List[IBDASampleData]: ...

    def GetSampleValue(self, _: str) -> str: ...

    def GetScanRecord(self, _: int) -> IBdaMsScanRecInfo: ...

    def GetScanRecordsInfo(self, _: MSScanType) -> IBdaMsScanRecordCollection: ...

    def GetTimeSegmentDetails(self, _: int, __: int) -> IRange: ...

    def GetTimeSegmentRanges(self) -> List[IRange]: ...

    def GetTimeSegmentsIDArray(self) -> List[int]: ...

    def IsAcquisitionStatusComplete(self) -> bool: ...

    def IsActualsPresent(self) -> bool: ...

    def IsDataDependentScanInfoPresent(self) -> bool: ...

    def IsDataFileOpen(self) -> bool: ...

    def IsUserCalibrationPresent(self) -> bool: ...

    @property
    def MassRangesOverallLimit(self): ...

    @MassRangesOverallLimit.setter
    def MassRangesOverallLimit(self, value): ...

    def OpenDataFile(self, _: str, __: bool) -> bool: ...

    def PersistScanRejectionFlagValueTable(self) -> None: ...

    @property
    def QqqAcqMethodReader(self): ...

    @QqqAcqMethodReader.setter
    def QqqAcqMethodReader(self, value): ...

    def ReadSpectrum(self,
            _: int,
            __: bool,
            ___: DesiredMSStorageType,
            ) -> IBDASpecData: ...

    def ReadSpectrumPair(self, _: IBDAPeakSpectrumParameters) -> List[IBDASpecPair]: ...

    def RefreshDataFile(self, _: bool) -> bool: ...

    def SaveUserCalibration(self, _: Any, __: IonPolarity) -> None: ...

    @property
    def ScanRejectionFlagValueTable(self): ...

    @ScanRejectionFlagValueTable.setter
    def ScanRejectionFlagValueTable(self, value): ...

    @property
    def SchemaDefaultDirectory(self): ...

    @SchemaDefaultDirectory.setter
    def SchemaDefaultDirectory(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AcquisitionMetaData(self) -> IBDAAcquisitionData: ...

    def get_DataFileName(self) -> str: ...

    def get_DesiredMSStorageTypeToUse(self) -> DesiredMSStorageType: ...

    def get_FileInformation(self) -> IBDAFileInformation: ...

    def get_MassRangesOverallLimit(self) -> IRange: ...

    def get_QqqAcqMethodReader(self) -> QqqAcqMethodReader: ...

    def get_ScanRejectionFlagValueTable(self) -> System.Data.DataTable: ...

    def get_SchemaDefaultDirectory(self) -> str: ...

    def set_DesiredMSStorageTypeToUse(self, _: DesiredMSStorageType) -> None: ...

    def set_ScanRejectionFlagValueTable(self, _: System.Data.DataTable) -> None: ...

    def set_SchemaDefaultDirectory(self, _: str) -> None: ...


class BDAAcquisitionData:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAAcquisitionData:

    @property
    def BPMassArray(self): ...

    @BPMassArray.setter
    def BPMassArray(self, value): ...

    @property
    def PointCount(self): ...

    @PointCount.setter
    def PointCount(self, value): ...

    @property
    def RetentionTimeArray(self): ...

    @RetentionTimeArray.setter
    def RetentionTimeArray(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_BPMassArray(self) -> List[float]: ...

    def get_PointCount(self) -> int: ...

    def get_RetentionTimeArray(self) -> List[float]: ...


class IBDAEvents:

    @property
    def CancelIndicator(self): ...

    @CancelIndicator.setter
    def CancelIndicator(self, value): ...

    def ProgressEvent(self, *args, **kwargs) -> Any: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def add_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...

    def get_CancelIndicator(self) -> CancelIndicator: ...

    def remove_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...

    def set_CancelIndicator(self, _: CancelIndicator) -> None: ...


class BDASpecFilterIcp:

    def Clone(self) -> IBDASpecFilter: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def ScanMethodNumber(self): ...

    @ScanMethodNumber.setter
    def ScanMethodNumber(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ScanMethodNumber(self) -> int: ...

    def set_ScanMethodNumber(self, _: int) -> None: ...


class IBDASpecFilterIcp:

    @property
    def AverageSpectrum(self): ...

    @AverageSpectrum.setter
    def AverageSpectrum(self, value): ...

    @property
    def BackgroundScanRanges(self): ...

    @BackgroundScanRanges.setter
    def BackgroundScanRanges(self, value): ...

    @property
    def ChromPeakIndex(self): ...

    @ChromPeakIndex.setter
    def ChromPeakIndex(self, value): ...

    def Clone(self) -> IBDASpecFilter: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def DesiredMSStorageType(self): ...

    @DesiredMSStorageType.setter
    def DesiredMSStorageType(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    def Equals(self, _: IBDASpecFilterIcp) -> bool: ...

    @property
    def ExtractByCycle(self): ...

    @ExtractByCycle.setter
    def ExtractByCycle(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def IonPolarityFilter(self): ...

    @IonPolarityFilter.setter
    def IonPolarityFilter(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def MSLevelFilter(self): ...

    @MSLevelFilter.setter
    def MSLevelFilter(self, value): ...

    @property
    def MSScanTypeFilter(self): ...

    @MSScanTypeFilter.setter
    def MSScanTypeFilter(self, value): ...

    @property
    def MassRange(self): ...

    @MassRange.setter
    def MassRange(self, value): ...

    @property
    def MassUnits(self): ...

    @MassUnits.setter
    def MassUnits(self, value): ...

    @property
    def MzOfInterestFilter(self): ...

    @MzOfInterestFilter.setter
    def MzOfInterestFilter(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ScaleFactorY(self): ...

    @ScaleFactorY.setter
    def ScaleFactorY(self, value): ...

    @property
    def ScaledAbundanceLimit(self): ...

    @ScaledAbundanceLimit.setter
    def ScaledAbundanceLimit(self, value): ...

    @property
    def ScanIds(self): ...

    @ScanIds.setter
    def ScanIds(self, value): ...

    @property
    def ScanRange(self): ...

    @ScanRange.setter
    def ScanRange(self, value): ...

    @property
    def SpectrumSubType(self): ...

    @SpectrumSubType.setter
    def SpectrumSubType(self, value): ...

    @property
    def SpectrumType(self): ...

    @SpectrumType.setter
    def SpectrumType(self, value): ...

    @property
    def XClipRanges(self): ...

    @XClipRanges.setter
    def XClipRanges(self, value): ...

    @property
    def YDataValueType(self): ...

    @YDataValueType.setter
    def YDataValueType(self, value): ...

    @property
    def ZeroBoundWhenClipping(self): ...

    @ZeroBoundWhenClipping.setter
    def ZeroBoundWhenClipping(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AverageSpectrum(self) -> bool: ...

    def get_BackgroundScanRanges(self) -> List[IRange]: ...

    def get_ChromPeakIndex(self) -> int: ...

    def get_CollisionEnergy(self) -> IRange: ...

    def get_CompensationField(self) -> IRange: ...

    def get_DesiredMSStorageType(self) -> DesiredMSStorageType: ...

    def get_DeviceName(self) -> str: ...

    def get_DispersionField(self) -> IRange: ...

    def get_ExtractByCycle(self) -> bool: ...

    def get_FragmentorVoltage(self) -> IRange: ...

    def get_IonPolarityFilter(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_MSLevelFilter(self) -> MSLevel: ...

    def get_MSScanTypeFilter(self) -> MSScanType: ...

    def get_MassRange(self) -> IRange: ...

    def get_MassUnits(self) -> bool: ...

    def get_MzOfInterestFilter(self) -> List[IRange]: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ScaleFactorY(self) -> float: ...

    def get_ScaledAbundanceLimit(self) -> float: ...

    def get_ScanIds(self) -> List[int]: ...

    def get_ScanRange(self) -> List[IRange]: ...

    def get_SpectrumSubType(self) -> SpecSubType: ...

    def get_SpectrumType(self) -> SpecType: ...

    def get_XClipRanges(self) -> List[IRange]: ...

    def get_YDataValueType(self) -> DataValueType: ...

    def get_ZeroBoundWhenClipping(self) -> bool: ...

    def set_AverageSpectrum(self, _: bool) -> None: ...

    def set_BackgroundScanRanges(self, _: List[IRange]) -> None: ...

    def set_ChromPeakIndex(self, _: int) -> None: ...

    def set_CollisionEnergy(self, _: IRange) -> None: ...

    def set_CompensationField(self, _: IRange) -> None: ...

    def set_DesiredMSStorageType(self, _: DesiredMSStorageType) -> None: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DispersionField(self, _: IRange) -> None: ...

    def set_ExtractByCycle(self, _: bool) -> None: ...

    def set_FragmentorVoltage(self, _: IRange) -> None: ...

    def set_IonPolarityFilter(self, _: IonPolarity) -> None: ...

    def set_IonizationMode(self, _: IonizationMode) -> None: ...

    def set_MSLevelFilter(self, _: MSLevel) -> None: ...

    def set_MSScanTypeFilter(self, _: MSScanType) -> None: ...

    def set_MassRange(self, _: IRange) -> None: ...

    def set_MassUnits(self, _: bool) -> None: ...

    def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...

    def set_ScaleFactorY(self, _: float) -> None: ...

    def set_ScaledAbundanceLimit(self, _: float) -> None: ...

    def set_ScanIds(self, _: List[int]) -> None: ...

    def set_ScanRange(self, _: List[IRange]) -> None: ...

    def set_SpectrumSubType(self, _: SpecSubType) -> None: ...

    def set_SpectrumType(self, _: SpecType) -> None: ...

    def set_XClipRanges(self, _: List[IRange]) -> None: ...

    def set_YDataValueType(self, _: DataValueType) -> None: ...

    def set_ZeroBoundWhenClipping(self, _: bool) -> None: ...


class BDAChromFilterIcp:

    def Clone(self) -> IBDAChromFilter: ...

    def Copy(self, _: BDAChromFilter) -> None: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def SmoothFunction(self): ...

    @SmoothFunction.setter
    def SmoothFunction(self, value): ...

    @property
    def SmoothFunctionWidth(self): ...

    @SmoothFunctionWidth.setter
    def SmoothFunctionWidth(self, value): ...

    @property
    def SmoothGaussianWidth(self): ...

    @SmoothGaussianWidth.setter
    def SmoothGaussianWidth(self, value): ...

    @property
    def Smoothed(self): ...

    @Smoothed.setter
    def Smoothed(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_SmoothFunction(self) -> SmoothingFunctionType: ...

    def get_SmoothFunctionWidth(self) -> int: ...

    def get_SmoothGaussianWidth(self) -> float: ...

    def get_Smoothed(self) -> bool: ...

    def set_SmoothFunction(self, _: SmoothingFunctionType) -> None: ...

    def set_SmoothFunctionWidth(self, _: int) -> None: ...

    def set_SmoothGaussianWidth(self, _: float) -> None: ...

    def set_Smoothed(self, _: bool) -> None: ...


class IBDAChromFilterIcp:

    @property
    def ChargeStateLimits(self): ...

    @ChargeStateLimits.setter
    def ChargeStateLimits(self, value): ...

    @property
    def ChromatogramSubType(self): ...

    @ChromatogramSubType.setter
    def ChromatogramSubType(self, value): ...

    @property
    def ChromatogramType(self): ...

    @ChromatogramType.setter
    def ChromatogramType(self, value): ...

    def Clone(self) -> IBDAChromFilterIcp: ...

    @property
    def CollisionEnergy(self): ...

    @CollisionEnergy.setter
    def CollisionEnergy(self, value): ...

    @property
    def CompensationField(self): ...

    @CompensationField.setter
    def CompensationField(self, value): ...

    @property
    def Description(self): ...

    @Description.setter
    def Description(self, value): ...

    @property
    def DesiredMSStorageType(self): ...

    @DesiredMSStorageType.setter
    def DesiredMSStorageType(self, value): ...

    @property
    def DeviceName(self): ...

    @DeviceName.setter
    def DeviceName(self, value): ...

    @property
    def DispersionField(self): ...

    @DispersionField.setter
    def DispersionField(self, value): ...

    @property
    def DoCycleSum(self): ...

    @DoCycleSum.setter
    def DoCycleSum(self, value): ...

    @property
    def ExtractOneChromatogramPerScanSegment(self): ...

    @ExtractOneChromatogramPerScanSegment.setter
    def ExtractOneChromatogramPerScanSegment(self, value): ...

    @property
    def FragmentorVoltage(self): ...

    @FragmentorVoltage.setter
    def FragmentorVoltage(self, value): ...

    @property
    def IncludeMassRanges(self): ...

    @IncludeMassRanges.setter
    def IncludeMassRanges(self, value): ...

    @property
    def Integrate(self): ...

    @Integrate.setter
    def Integrate(self, value): ...

    @property
    def IonPolarityFilter(self): ...

    @IonPolarityFilter.setter
    def IonPolarityFilter(self, value): ...

    @property
    def IonizationMode(self): ...

    @IonizationMode.setter
    def IonizationMode(self, value): ...

    @property
    def MSLevelFilter(self): ...

    @MSLevelFilter.setter
    def MSLevelFilter(self, value): ...

    @property
    def MSScanTypeFilter(self): ...

    @MSScanTypeFilter.setter
    def MSScanTypeFilter(self, value): ...

    @property
    def MzOfInterestFilter(self): ...

    @MzOfInterestFilter.setter
    def MzOfInterestFilter(self, value): ...

    @property
    def OrdinalNumber(self): ...

    @OrdinalNumber.setter
    def OrdinalNumber(self, value): ...

    @property
    def ReferenceWavelength(self): ...

    @ReferenceWavelength.setter
    def ReferenceWavelength(self, value): ...

    @property
    def ScanRange(self): ...

    @ScanRange.setter
    def ScanRange(self, value): ...

    @property
    def ScanSegmentNumber(self): ...

    @ScanSegmentNumber.setter
    def ScanSegmentNumber(self, value): ...

    @property
    def SignalDescription(self): ...

    @SignalDescription.setter
    def SignalDescription(self, value): ...

    @property
    def SignalName(self): ...

    @SignalName.setter
    def SignalName(self, value): ...

    @property
    def SignalWavelength(self): ...

    @SignalWavelength.setter
    def SignalWavelength(self, value): ...

    @property
    def SingleChromatogramForAllMasses(self): ...

    @SingleChromatogramForAllMasses.setter
    def SingleChromatogramForAllMasses(self, value): ...

    @property
    def UseReference(self): ...

    @UseReference.setter
    def UseReference(self, value): ...

    @property
    def YDataValueType(self): ...

    @YDataValueType.setter
    def YDataValueType(self, value): ...

    @property
    def YValueInCounts(self): ...

    @YValueInCounts.setter
    def YValueInCounts(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ChargeStateLimits(self) -> IRange: ...

    def get_ChromatogramSubType(self) -> ChromSubType: ...

    def get_ChromatogramType(self) -> ChromType: ...

    def get_CollisionEnergy(self) -> IRange: ...

    def get_CompensationField(self) -> IRange: ...

    def get_Description(self) -> str: ...

    def get_DesiredMSStorageType(self) -> DesiredMSStorageType: ...

    def get_DeviceName(self) -> str: ...

    def get_DispersionField(self) -> IRange: ...

    def get_DoCycleSum(self) -> bool: ...

    def get_ExtractOneChromatogramPerScanSegment(self) -> bool: ...

    def get_FragmentorVoltage(self) -> IRange: ...

    def get_IncludeMassRanges(self) -> List[IRange]: ...

    def get_Integrate(self) -> bool: ...

    def get_IonPolarityFilter(self) -> IonPolarity: ...

    def get_IonizationMode(self) -> IonizationMode: ...

    def get_MSLevelFilter(self) -> MSLevel: ...

    def get_MSScanTypeFilter(self) -> MSScanType: ...

    def get_MzOfInterestFilter(self) -> List[IRange]: ...

    def get_OrdinalNumber(self) -> int: ...

    def get_ReferenceWavelength(self) -> IRange: ...

    def get_ScanRange(self) -> IRange: ...

    def get_ScanSegmentNumber(self) -> IRange: ...

    def get_SignalDescription(self) -> str: ...

    def get_SignalName(self) -> str: ...

    def get_SignalWavelength(self) -> IRange: ...

    def get_SingleChromatogramForAllMasses(self) -> bool: ...

    def get_UseReference(self) -> bool: ...

    def get_YDataValueType(self) -> DataValueType: ...

    def get_YValueInCounts(self) -> bool: ...

    def set_ChargeStateLimits(self, _: IRange) -> None: ...

    def set_ChromatogramSubType(self, _: ChromSubType) -> None: ...

    def set_ChromatogramType(self, _: ChromType) -> None: ...

    def set_CollisionEnergy(self, _: IRange) -> None: ...

    def set_CompensationField(self, _: IRange) -> None: ...

    def set_Description(self, _: str) -> None: ...

    def set_DesiredMSStorageType(self, _: DesiredMSStorageType) -> None: ...

    def set_DeviceName(self, _: str) -> None: ...

    def set_DispersionField(self, _: IRange) -> None: ...

    def set_DoCycleSum(self, _: bool) -> None: ...

    def set_ExtractOneChromatogramPerScanSegment(self, _: bool) -> None: ...

    def set_FragmentorVoltage(self, _: IRange) -> None: ...

    def set_IncludeMassRanges(self, _: List[IRange]) -> None: ...

    def set_Integrate(self, _: bool) -> None: ...

    def set_IonPolarityFilter(self, _: IonPolarity) -> None: ...

    def set_IonizationMode(self, _: IonizationMode) -> None: ...

    def set_MSLevelFilter(self, _: MSLevel) -> None: ...

    def set_MSScanTypeFilter(self, _: MSScanType) -> None: ...

    def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...

    def set_OrdinalNumber(self, _: int) -> None: ...

    def set_ReferenceWavelength(self, _: IRange) -> None: ...

    def set_ScanRange(self, _: IRange) -> None: ...

    def set_ScanSegmentNumber(self, _: IRange) -> None: ...

    def set_SignalDescription(self, _: str) -> None: ...

    def set_SignalName(self, _: str) -> None: ...

    def set_SignalWavelength(self, _: IRange) -> None: ...

    def set_SingleChromatogramForAllMasses(self, _: bool) -> None: ...

    def set_UseReference(self, _: bool) -> None: ...

    def set_YDataValueType(self, _: DataValueType) -> None: ...

    def set_YValueInCounts(self, _: bool) -> None: ...


class IBDAReadChromatogram:

    def GetChromatogram(self,
            _: IBDAChromFilter,
            __: List[IRange],
            ) -> List[IBDAChromData]: ...

    def GetMultipleEicChromatograms(self,
            _: IBDAMultiEicParameters,
            ) -> List[IBDAChromData]: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAReadSpectra:

    def ReadSpectrum(self,
            _: int,
            __: bool,
            ___: DesiredMSStorageType,
            ) -> IBDASpecData: ...

    def ReadSpectrumPair(self, _: IBDAPeakSpectrumParameters) -> List[IBDASpecPair]: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class BDAPeakSpecFilter:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IBDAPeakSpecFilter:

    @property
    def AvoidReturningEmtpySpectrum(self): ...

    @AvoidReturningEmtpySpectrum.setter
    def AvoidReturningEmtpySpectrum(self, value): ...

    @property
    def BackgroundRtRange(self): ...

    @BackgroundRtRange.setter
    def BackgroundRtRange(self, value): ...

    @property
    def BackgroundSource(self): ...

    @BackgroundSource.setter
    def BackgroundSource(self, value): ...

    def Clone(self) -> IBDAPeakSpecFilter: ...

    @property
    def GetSaturationMzRangesFromChromatogram(self): ...

    @GetSaturationMzRangesFromChromatogram.setter
    def GetSaturationMzRangesFromChromatogram(self, value): ...

    @property
    def PeakHeightThreshold(self): ...

    @PeakHeightThreshold.setter
    def PeakHeightThreshold(self, value): ...

    @property
    def TofSaturationMzRanges(self): ...

    @TofSaturationMzRanges.setter
    def TofSaturationMzRanges(self, value): ...

    @property
    def TofSaturationThreshold(self): ...

    @TofSaturationThreshold.setter
    def TofSaturationThreshold(self, value): ...

    @property
    def UseApexScan(self): ...

    @UseApexScan.setter
    def UseApexScan(self, value): ...

    @property
    def UseTofSaturationFilter(self): ...

    @UseTofSaturationFilter.setter
    def UseTofSaturationFilter(self, value): ...

    @property
    def UseTofSaturationMzRange(self): ...

    @UseTofSaturationMzRange.setter
    def UseTofSaturationMzRange(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AvoidReturningEmtpySpectrum(self) -> bool: ...

    def get_BackgroundRtRange(self) -> IRange: ...

    def get_BackgroundSource(self) -> ApseBackgroundSource: ...

    def get_GetSaturationMzRangesFromChromatogram(self) -> bool: ...

    def get_PeakHeightThreshold(self) -> float: ...

    def get_TofSaturationMzRanges(self) -> List[IRange]: ...

    def get_TofSaturationThreshold(self) -> float: ...

    def get_UseApexScan(self) -> bool: ...

    def get_UseTofSaturationFilter(self) -> bool: ...

    def get_UseTofSaturationMzRange(self) -> bool: ...

    def set_AvoidReturningEmtpySpectrum(self, _: bool) -> None: ...

    def set_BackgroundRtRange(self, _: IRange) -> None: ...

    def set_BackgroundSource(self, _: ApseBackgroundSource) -> None: ...

    def set_GetSaturationMzRangesFromChromatogram(self, _: bool) -> None: ...

    def set_PeakHeightThreshold(self, _: float) -> None: ...

    def set_TofSaturationMzRanges(self, _: List[IRange]) -> None: ...

    def set_TofSaturationThreshold(self, _: float) -> None: ...

    def set_UseApexScan(self, _: bool) -> None: ...

    def set_UseTofSaturationFilter(self, _: bool) -> None: ...

    def set_UseTofSaturationMzRange(self, _: bool) -> None: ...


class IBDAPeak:

    @property
    def BasePeakMass(self): ...

    @BasePeakMass.setter
    def BasePeakMass(self, value): ...

    @property
    def CenterX(self): ...

    @CenterX.setter
    def CenterX(self, value): ...

    @property
    def CenterY(self): ...

    @CenterY.setter
    def CenterY(self, value): ...

    @property
    def ChargeState(self): ...

    @ChargeState.setter
    def ChargeState(self, value): ...

    @property
    def EndBaselineY(self): ...

    @EndBaselineY.setter
    def EndBaselineY(self, value): ...

    @property
    def Height(self): ...

    @Height.setter
    def Height(self, value): ...

    @property
    def StartBaselineY(self): ...

    @StartBaselineY.setter
    def StartBaselineY(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_BasePeakMass(self) -> float: ...

    def get_CenterX(self) -> float: ...

    def get_CenterY(self) -> float: ...

    def get_ChargeState(self) -> int: ...

    def get_EndBaselineY(self) -> float: ...

    def get_Height(self) -> float: ...

    def get_StartBaselineY(self) -> float: ...

    def set_BasePeakMass(self, _: float) -> None: ...

    def set_CenterX(self, _: float) -> None: ...

    def set_CenterY(self, _: float) -> None: ...

    def set_ChargeState(self, _: int) -> None: ...

    def set_EndBaselineY(self, _: float) -> None: ...

    def set_Height(self, _: float) -> None: ...

    def set_StartBaselineY(self, _: float) -> None: ...


class IBdaMsScanRecordCollection:

    def ChildMsScanMzOfInterest(self, _: int) -> List[float]: ...

    def ChildMsScans(self, _: int) -> List[IBdaMsScanRecInfo]: ...

    def Clear(self) -> None: ...

    @property
    def Count(self): ...

    @Count.setter
    def Count(self, value): ...

    @property
    def Enumerator(self): ...

    @Enumerator.setter
    def Enumerator(self, value): ...

    def IndexOf(self, _: IBdaMsScanRecInfo) -> int: ...

    def ItemForIndex(self, _: int) -> IBdaMsScanRecInfo: ...

    @property
    def Keys(self): ...

    @Keys.setter
    def Keys(self, value): ...

    def Select(self,
            _: IonPolarity,
            __: MSLevel,
            ___: List[IRange],
            ) -> List[IBdaMsScanRecInfo]: ...

    def TryGetValue(self, _: int, __: IBdaMsScanRecInfo) -> bool: ...

    @property
    def Values(self): ...

    @Values.setter
    def Values(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Count(self) -> int: ...

    def get_Enumerator(self) -> System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[System.Int32,Agilent.MassSpectrometry.DataAnalysis.IBdaMsScanRecInfo]]: ...

    def get_Keys(self) -> Any: ...

    def get_Values(self) -> Any: ...


class IBDAMultiEicParameters:

    @property
    def AsymmetricMzWidthHigh(self): ...

    @AsymmetricMzWidthHigh.setter
    def AsymmetricMzWidthHigh(self, value): ...

    @property
    def AsymmetricMzWidthLow(self): ...

    @AsymmetricMzWidthLow.setter
    def AsymmetricMzWidthLow(self, value): ...

    @property
    def ChromFilter(self): ...

    @ChromFilter.setter
    def ChromFilter(self, value): ...

    @property
    def EicRtMzList(self): ...

    @EicRtMzList.setter
    def EicRtMzList(self, value): ...

    @property
    def MzExpansionMode(self): ...

    @MzExpansionMode.setter
    def MzExpansionMode(self, value): ...

    @property
    def SingleMzExpansionWidth(self): ...

    @SingleMzExpansionWidth.setter
    def SingleMzExpansionWidth(self, value): ...

    @property
    def SinglePpmExpansionWidth(self): ...

    @SinglePpmExpansionWidth.setter
    def SinglePpmExpansionWidth(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_AsymmetricMzWidthHigh(self) -> float: ...

    def get_AsymmetricMzWidthLow(self) -> float: ...

    def get_ChromFilter(self) -> IBDAChromFilter: ...

    def get_EicRtMzList(self) -> List[IEicRtMzRanges]: ...

    def get_MzExpansionMode(self) -> MzExpansionMode: ...

    def get_SingleMzExpansionWidth(self) -> float: ...

    def get_SinglePpmExpansionWidth(self) -> float: ...

    def set_AsymmetricMzWidthHigh(self, _: float) -> None: ...

    def set_AsymmetricMzWidthLow(self, _: float) -> None: ...

    def set_ChromFilter(self, _: IBDAChromFilter) -> None: ...

    def set_EicRtMzList(self, _: List[IEicRtMzRanges]) -> None: ...

    def set_MzExpansionMode(self, _: MzExpansionMode) -> None: ...

    def set_SingleMzExpansionWidth(self, _: float) -> None: ...

    def set_SinglePpmExpansionWidth(self, _: float) -> None: ...


class IBDAPeakSpectrumParameters:

    @property
    def ChromPeak(self): ...

    @ChromPeak.setter
    def ChromPeak(self, value): ...

    @property
    def ChromXArray(self): ...

    @ChromXArray.setter
    def ChromXArray(self, value): ...

    @property
    def ChromYArray(self): ...

    @ChromYArray.setter
    def ChromYArray(self, value): ...

    @property
    def NextChromPeak(self): ...

    @NextChromPeak.setter
    def NextChromPeak(self, value): ...

    @property
    def PeakIndex(self): ...

    @PeakIndex.setter
    def PeakIndex(self, value): ...

    @property
    def PeakSpecFilter(self): ...

    @PeakSpecFilter.setter
    def PeakSpecFilter(self, value): ...

    @property
    def PrevChromPeak(self): ...

    @PrevChromPeak.setter
    def PrevChromPeak(self, value): ...

    def SetChromXYData(self, _: List[float], __: List[float]) -> None: ...

    @property
    def SpecFilter(self): ...

    @SpecFilter.setter
    def SpecFilter(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ChromPeak(self) -> ILwChromPeak: ...

    def get_ChromXArray(self) -> List[float]: ...

    def get_ChromYArray(self) -> List[float]: ...

    def get_NextChromPeak(self) -> ILwChromPeak: ...

    def get_PeakIndex(self) -> int: ...

    def get_PeakSpecFilter(self) -> IBDAPeakSpecFilter: ...

    def get_PrevChromPeak(self) -> ILwChromPeak: ...

    def get_SpecFilter(self) -> IBDASpecFilter: ...

    def set_ChromPeak(self, _: ILwChromPeak) -> None: ...

    def set_NextChromPeak(self, _: ILwChromPeak) -> None: ...

    def set_PeakIndex(self, _: int) -> None: ...

    def set_PeakSpecFilter(self, _: IBDAPeakSpecFilter) -> None: ...

    def set_PrevChromPeak(self, _: ILwChromPeak) -> None: ...

    def set_SpecFilter(self, _: IBDASpecFilter) -> None: ...


class IBDASpecPair:

    @property
    def Final(self): ...

    @Final.setter
    def Final(self, value): ...

    @property
    def Foreground(self): ...

    @Foreground.setter
    def Foreground(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_Final(self) -> IBDASpecData: ...

    def get_Foreground(self) -> IBDASpecData: ...

    def set_Final(self, _: IBDASpecData) -> None: ...

    def set_Foreground(self, _: IBDASpecData) -> None: ...


class ILwChromPeak:

    @property
    def ApexY(self): ...

    @ApexY.setter
    def ApexY(self, value): ...

    @property
    def Area(self): ...

    @Area.setter
    def Area(self, value): ...

    @property
    def Base1EndX(self): ...

    @Base1EndX.setter
    def Base1EndX(self, value): ...

    @property
    def Base1StartX(self): ...

    @Base1StartX.setter
    def Base1StartX(self, value): ...

    @property
    def Base2EndX(self): ...

    @Base2EndX.setter
    def Base2EndX(self, value): ...

    @property
    def Base2StartX(self): ...

    @Base2StartX.setter
    def Base2StartX(self, value): ...

    @property
    def BaseEndFlag(self): ...

    @BaseEndFlag.setter
    def BaseEndFlag(self, value): ...

    @property
    def BaseEndY(self): ...

    @BaseEndY.setter
    def BaseEndY(self, value): ...

    @property
    def BaseStartFlag(self): ...

    @BaseStartFlag.setter
    def BaseStartFlag(self, value): ...

    @property
    def BaseStartY(self): ...

    @BaseStartY.setter
    def BaseStartY(self, value): ...

    @property
    def CenterX(self): ...

    @CenterX.setter
    def CenterX(self, value): ...

    def Clone(self) -> ILwChromPeak: ...

    @property
    def EndIndex(self): ...

    @EndIndex.setter
    def EndIndex(self, value): ...

    @property
    def EndX(self): ...

    @EndX.setter
    def EndX(self, value): ...

    @property
    def EndY(self): ...

    @EndY.setter
    def EndY(self, value): ...

    @property
    def Fwhm(self): ...

    @Fwhm.setter
    def Fwhm(self, value): ...

    def HasValue(self, _: LwPeakAttribute) -> bool: ...

    @property
    def Height(self): ...

    @Height.setter
    def Height(self, value): ...

    @property
    def StartIndex(self): ...

    @StartIndex.setter
    def StartIndex(self, value): ...

    @property
    def StartX(self): ...

    @StartX.setter
    def StartX(self, value): ...

    @property
    def StartY(self): ...

    @StartY.setter
    def StartY(self, value): ...

    @property
    def Warning(self): ...

    @Warning.setter
    def Warning(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ApexY(self) -> float: ...

    def get_Area(self) -> float: ...

    def get_Base1EndX(self) -> float: ...

    def get_Base1StartX(self) -> float: ...

    def get_Base2EndX(self) -> float: ...

    def get_Base2StartX(self) -> float: ...

    def get_BaseEndFlag(self) -> LwPeakEndFlags: ...

    def get_BaseEndY(self) -> float: ...

    def get_BaseStartFlag(self) -> LwPeakEndFlags: ...

    def get_BaseStartY(self) -> float: ...

    def get_CenterX(self) -> float: ...

    def get_EndIndex(self) -> int: ...

    def get_EndX(self) -> float: ...

    def get_EndY(self) -> float: ...

    def get_Fwhm(self) -> float: ...

    def get_Height(self) -> float: ...

    def get_StartIndex(self) -> int: ...

    def get_StartX(self) -> float: ...

    def get_StartY(self) -> float: ...

    def get_Warning(self) -> LwPeakWarning: ...

    def set_ApexY(self, _: float) -> None: ...

    def set_Area(self, _: float) -> None: ...

    def set_Base1EndX(self, _: float) -> None: ...

    def set_Base1StartX(self, _: float) -> None: ...

    def set_Base2EndX(self, _: float) -> None: ...

    def set_Base2StartX(self, _: float) -> None: ...

    def set_BaseEndFlag(self, _: LwPeakEndFlags) -> None: ...

    def set_BaseEndY(self, _: float) -> None: ...

    def set_BaseStartFlag(self, _: LwPeakEndFlags) -> None: ...

    def set_BaseStartY(self, _: float) -> None: ...

    def set_CenterX(self, _: float) -> None: ...

    def set_EndIndex(self, _: int) -> None: ...

    def set_EndX(self, _: float) -> None: ...

    def set_EndY(self, _: float) -> None: ...

    def set_Fwhm(self, _: float) -> None: ...

    def set_Height(self, _: float) -> None: ...

    def set_StartIndex(self, _: int) -> None: ...

    def set_StartX(self, _: float) -> None: ...

    def set_StartY(self, _: float) -> None: ...

    def set_Warning(self, _: LwPeakWarning) -> None: ...


class BDAPeak:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class IImsFrameRecord:

    @property
    def ActualsOffset(self): ...

    @ActualsOffset.setter
    def ActualsOffset(self, value): ...

    def AddScanRecordReference(self, _: IImsScanRecord) -> None: ...

    def Clone(self) -> IImsFrameRecord: ...

    @property
    def ComDummy_ScanRecordDriftBinList(self): ...

    @ComDummy_ScanRecordDriftBinList.setter
    def ComDummy_ScanRecordDriftBinList(self, value): ...

    @property
    def ComDummy_ScanRecordsByBin(self): ...

    @ComDummy_ScanRecordsByBin.setter
    def ComDummy_ScanRecordsByBin(self, value): ...

    @property
    def CycleNumber(self): ...

    @CycleNumber.setter
    def CycleNumber(self, value): ...

    @property
    def FirstNonzeroDriftBin(self): ...

    @FirstNonzeroDriftBin.setter
    def FirstNonzeroDriftBin(self, value): ...

    @property
    def FragClass(self): ...

    @FragClass.setter
    def FragClass(self, value): ...

    @property
    def FragEnergy(self): ...

    @FragEnergy.setter
    def FragEnergy(self, value): ...

    @property
    def FrameBaseAbund(self): ...

    @FrameBaseAbund.setter
    def FrameBaseAbund(self, value): ...

    @property
    def FrameBaseDriftBin(self): ...

    @FrameBaseDriftBin.setter
    def FrameBaseDriftBin(self, value): ...

    @property
    def FrameBaseMsBin(self): ...

    @FrameBaseMsBin.setter
    def FrameBaseMsBin(self, value): ...

    @property
    def FrameId(self): ...

    @FrameId.setter
    def FrameId(self, value): ...

    @property
    def FrameMethod(self): ...

    @FrameMethod.setter
    def FrameMethod(self, value): ...

    @property
    def FrameMethodId(self): ...

    @FrameMethodId.setter
    def FrameMethodId(self, value): ...

    @property
    def FrameScanTime(self): ...

    @FrameScanTime.setter
    def FrameScanTime(self, value): ...

    @property
    def FrameSpecAbundLimit(self): ...

    @FrameSpecAbundLimit.setter
    def FrameSpecAbundLimit(self, value): ...

    @property
    def FrameTic(self): ...

    @FrameTic.setter
    def FrameTic(self, value): ...

    @property
    def ImsField(self): ...

    @ImsField.setter
    def ImsField(self, value): ...

    @property
    def ImsPressure(self): ...

    @ImsPressure.setter
    def ImsPressure(self, value): ...

    @property
    def ImsTemperature(self): ...

    @ImsTemperature.setter
    def ImsTemperature(self, value): ...

    @property
    def ImsTrapPressure(self): ...

    @ImsTrapPressure.setter
    def ImsTrapPressure(self, value): ...

    @property
    def ImsTrapTime(self): ...

    @ImsTrapTime.setter
    def ImsTrapTime(self, value): ...

    @property
    def IsolationEndMz(self): ...

    @IsolationEndMz.setter
    def IsolationEndMz(self, value): ...

    @property
    def IsolationMz(self): ...

    @IsolationMz.setter
    def IsolationMz(self, value): ...

    @property
    def IsolationStartMz(self): ...

    @IsolationStartMz.setter
    def IsolationStartMz(self, value): ...

    @property
    def IsolationZ(self): ...

    @IsolationZ.setter
    def IsolationZ(self, value): ...

    @property
    def LastNonzeroDriftBin(self): ...

    @LastNonzeroDriftBin.setter
    def LastNonzeroDriftBin(self, value): ...

    @property
    def MassCalOffset(self): ...

    @MassCalOffset.setter
    def MassCalOffset(self, value): ...

    @property
    def NumTransients(self): ...

    @NumTransients.setter
    def NumTransients(self, value): ...

    def ScanRecordByBin(self, _: int) -> IImsScanRecord: ...

    @property
    def ScanRecordDriftBinList(self): ...

    @ScanRecordDriftBinList.setter
    def ScanRecordDriftBinList(self, value): ...

    def ScanRecordsByBin(self,
            _: System.Collections.Generic.List`1[System.Int16],
            ) -> List[IImsScanRecord]: ...

    @property
    def TimeSegmentId(self): ...

    @TimeSegmentId.setter
    def TimeSegmentId(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ActualsOffset(self) -> int: ...

    def get_ComDummy_ScanRecordDriftBinList(self) -> int: ...

    def get_ComDummy_ScanRecordsByBin(self) -> int: ...

    def get_CycleNumber(self) -> int: ...

    def get_FirstNonzeroDriftBin(self) -> int: ...

    def get_FragClass(self) -> Any: ...

    def get_FragEnergy(self) -> float: ...

    def get_FrameBaseAbund(self) -> float: ...

    def get_FrameBaseDriftBin(self) -> int: ...

    def get_FrameBaseMsBin(self) -> int: ...

    def get_FrameId(self) -> int: ...

    def get_FrameMethod(self) -> IImsFrameMethod: ...

    def get_FrameMethodId(self) -> int: ...

    def get_FrameScanTime(self) -> float: ...

    def get_FrameSpecAbundLimit(self) -> float: ...

    def get_FrameTic(self) -> float: ...

    def get_ImsField(self) -> float: ...

    def get_ImsPressure(self) -> float: ...

    def get_ImsTemperature(self) -> float: ...

    def get_ImsTrapPressure(self) -> float: ...

    def get_ImsTrapTime(self) -> float: ...

    def get_IsolationEndMz(self) -> float: ...

    def get_IsolationMz(self) -> float: ...

    def get_IsolationStartMz(self) -> float: ...

    def get_IsolationZ(self) -> int: ...

    def get_LastNonzeroDriftBin(self) -> int: ...

    def get_MassCalOffset(self) -> int: ...

    def get_NumTransients(self) -> int: ...

    def get_ScanRecordDriftBinList(self) -> System.Collections.Generic.List`1[System.Int16]: ...

    def get_TimeSegmentId(self) -> int: ...

    def set_ActualsOffset(self, _: int) -> None: ...

    def set_CycleNumber(self, _: int) -> None: ...

    def set_FirstNonzeroDriftBin(self, _: int) -> None: ...

    def set_FragClass(self, _: Any) -> None: ...

    def set_FragEnergy(self, _: float) -> None: ...

    def set_FrameBaseAbund(self, _: float) -> None: ...

    def set_FrameBaseDriftBin(self, _: int) -> None: ...

    def set_FrameBaseMsBin(self, _: int) -> None: ...

    def set_FrameId(self, _: int) -> None: ...

    def set_FrameMethod(self, _: IImsFrameMethod) -> None: ...

    def set_FrameMethodId(self, _: int) -> None: ...

    def set_FrameScanTime(self, _: float) -> None: ...

    def set_FrameSpecAbundLimit(self, _: float) -> None: ...

    def set_FrameTic(self, _: float) -> None: ...

    def set_ImsField(self, _: float) -> None: ...

    def set_ImsPressure(self, _: float) -> None: ...

    def set_ImsTemperature(self, _: float) -> None: ...

    def set_ImsTrapPressure(self, _: float) -> None: ...

    def set_ImsTrapTime(self, _: float) -> None: ...

    def set_IsolationEndMz(self, _: float) -> None: ...

    def set_IsolationMz(self, _: float) -> None: ...

    def set_IsolationStartMz(self, _: float) -> None: ...

    def set_IsolationZ(self, _: int) -> None: ...

    def set_LastNonzeroDriftBin(self, _: int) -> None: ...

    def set_MassCalOffset(self, _: int) -> None: ...

    def set_NumTransients(self, _: int) -> None: ...

    def set_TimeSegmentId(self, _: int) -> None: ...


class ImsFrameScanRec:

    @property
    def BaseAbund(self): ...

    @BaseAbund.setter
    def BaseAbund(self, value): ...

    @property
    def BaseMsBin(self): ...

    @BaseMsBin.setter
    def BaseMsBin(self, value): ...

    @property
    def DetectorGain(self): ...

    @DetectorGain.setter
    def DetectorGain(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    @property
    def FirstNonzeroMsBin(self): ...

    @FirstNonzeroMsBin.setter
    def FirstNonzeroMsBin(self, value): ...

    @property
    def FrameId(self): ...

    @FrameId.setter
    def FrameId(self, value): ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    @property
    def ImsDriftBin(self): ...

    @ImsDriftBin.setter
    def ImsDriftBin(self, value): ...

    @property
    def LastNonzeroMsBin(self): ...

    @LastNonzeroMsBin.setter
    def LastNonzeroMsBin(self, value): ...

    def MemberwiseClone(self) -> object: ...

    @property
    def MsPeakByteCount(self): ...

    @MsPeakByteCount.setter
    def MsPeakByteCount(self, value): ...

    @property
    def MsPeakMaxX(self): ...

    @MsPeakMaxX.setter
    def MsPeakMaxX(self, value): ...

    @property
    def MsPeakMinX(self): ...

    @MsPeakMinX.setter
    def MsPeakMinX(self, value): ...

    @property
    def MsPeakOffset(self): ...

    @MsPeakOffset.setter
    def MsPeakOffset(self, value): ...

    @property
    def MsPeakPointCount(self): ...

    @MsPeakPointCount.setter
    def MsPeakPointCount(self, value): ...

    @property
    def MsPeakSpecFmtId(self): ...

    @MsPeakSpecFmtId.setter
    def MsPeakSpecFmtId(self, value): ...

    @property
    def MsProfByteCount(self): ...

    @MsProfByteCount.setter
    def MsProfByteCount(self, value): ...

    @property
    def MsProfFullByteCount(self): ...

    @MsProfFullByteCount.setter
    def MsProfFullByteCount(self, value): ...

    @property
    def MsProfNzPointCount(self): ...

    @MsProfNzPointCount.setter
    def MsProfNzPointCount(self, value): ...

    @property
    def MsProfOffset(self): ...

    @MsProfOffset.setter
    def MsProfOffset(self, value): ...

    @property
    def MsProfPointCount(self): ...

    @MsProfPointCount.setter
    def MsProfPointCount(self, value): ...

    @property
    def MsProfSpecFmtId(self): ...

    @MsProfSpecFmtId.setter
    def MsProfSpecFmtId(self, value): ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def ScanId(self): ...

    @ScanId.setter
    def ScanId(self, value): ...

    @property
    def TfsBasePeakAbund(self): ...

    @TfsBasePeakAbund.setter
    def TfsBasePeakAbund(self, value): ...

    @property
    def TfsBasePeakMz(self): ...

    @TfsBasePeakMz.setter
    def TfsBasePeakMz(self, value): ...

    @property
    def Tic(self): ...

    @Tic.setter
    def Tic(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_BaseAbund(self) -> int: ...

    def get_BaseMsBin(self) -> int: ...

    def get_DetectorGain(self) -> IonDetectorGain: ...

    def get_FirstNonzeroMsBin(self) -> int: ...

    def get_FrameId(self) -> int: ...

    def get_ImsDriftBin(self) -> int: ...

    def get_LastNonzeroMsBin(self) -> int: ...

    def get_MsPeakByteCount(self) -> int: ...

    def get_MsPeakMaxX(self) -> float: ...

    def get_MsPeakMinX(self) -> float: ...

    def get_MsPeakOffset(self) -> int: ...

    def get_MsPeakPointCount(self) -> int: ...

    def get_MsPeakSpecFmtId(self) -> int: ...

    def get_MsProfByteCount(self) -> int: ...

    def get_MsProfFullByteCount(self) -> int: ...

    def get_MsProfNzPointCount(self) -> int: ...

    def get_MsProfOffset(self) -> int: ...

    def get_MsProfPointCount(self) -> int: ...

    def get_MsProfSpecFmtId(self) -> int: ...

    def get_ScanId(self) -> int: ...

    def get_TfsBasePeakAbund(self) -> float: ...

    def get_TfsBasePeakMz(self) -> float: ...

    def get_Tic(self) -> float: ...

    def set_BaseAbund(self, _: int) -> None: ...

    def set_BaseMsBin(self, _: int) -> None: ...

    def set_DetectorGain(self, _: IonDetectorGain) -> None: ...

    def set_FirstNonzeroMsBin(self, _: int) -> None: ...

    def set_FrameId(self, _: int) -> None: ...

    def set_ImsDriftBin(self, _: int) -> None: ...

    def set_LastNonzeroMsBin(self, _: int) -> None: ...

    def set_MsPeakByteCount(self, _: int) -> None: ...

    def set_MsPeakMaxX(self, _: float) -> None: ...

    def set_MsPeakMinX(self, _: float) -> None: ...

    def set_MsPeakOffset(self, _: int) -> None: ...

    def set_MsPeakPointCount(self, _: int) -> None: ...

    def set_MsPeakSpecFmtId(self, _: int) -> None: ...

    def set_MsProfByteCount(self, _: int) -> None: ...

    def set_MsProfFullByteCount(self, _: int) -> None: ...

    def set_MsProfNzPointCount(self, _: int) -> None: ...

    def set_MsProfOffset(self, _: int) -> None: ...

    def set_MsProfPointCount(self, _: int) -> None: ...

    def set_MsProfSpecFmtId(self, _: int) -> None: ...

    def set_ScanId(self, _: int) -> None: ...

    def set_TfsBasePeakAbund(self, _: float) -> None: ...

    def set_TfsBasePeakMz(self, _: float) -> None: ...

    def set_Tic(self, _: float) -> None: ...


class BDASpecFilter:

    def Clone(self) -> IBDASpecFilter: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def ScanMethodNumber(self): ...

    @ScanMethodNumber.setter
    def ScanMethodNumber(self, value): ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_ScanMethodNumber(self) -> int: ...

    def set_ScanMethodNumber(self, _: int) -> None: ...


class ImsFrameMethod:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class PointValueFormat:

    def Clone(self) -> PointValueFormat: ...

    @property
    def DataType(self): ...

    @DataType.setter
    def DataType(self, value): ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    @property
    def PointValueID(self): ...

    @PointValueID.setter
    def PointValueID(self, value): ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    @property
    def ScaleFactor(self): ...

    @ScaleFactor.setter
    def ScaleFactor(self, value): ...

    @property
    def StorageScheme(self): ...

    @StorageScheme.setter
    def StorageScheme(self, value): ...

    def ToString(self) -> str: ...

    @property
    def Type(self): ...

    @Type.setter
    def Type(self, value): ...

    def __init__(self, *args, **kwargs) -> Any: ...

    def get_DataType(self) -> DataFileValueDataType: ...

    def get_PointValueID(self) -> int: ...

    def get_ScaleFactor(self) -> float: ...

    def get_StorageScheme(self) -> PointValueStorageScheme: ...

    def get_Type(self) -> DataValueType: ...

    def set_DataType(self, _: DataFileValueDataType) -> None: ...

    def set_PointValueID(self, _: int) -> None: ...

    def set_ScaleFactor(self, _: float) -> None: ...

    def set_StorageScheme(self, _: PointValueStorageScheme) -> None: ...

    def set_Type(self, _: DataValueType) -> None: ...


class BDAActualData:

    def Clone(self) -> IBDAActualData: ...

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...


class MsdrChargeStateAssignmentFilter:

    def Equals(self, _: object, __: object) -> bool: ...

    def Finalize(self) -> None: ...

    def GetHashCode(self) -> int: ...

    def GetType(self) -> Type: ...

    def MemberwiseClone(self) -> object: ...

    def Overloads(self, *args, **kwargs) -> Any: ...

    def ReferenceEquals(self, _: object, __: object) -> bool: ...

    def ToString(self) -> str: ...

    def __init__(self, *args, **kwargs) -> Any: ...
