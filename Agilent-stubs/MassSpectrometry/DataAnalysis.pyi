from __future__ import annotations

# stdlib
import typing
from enum import Enum
from typing import Any, Dict, List, Tuple, Type, Union, overload

# 3rd party
import pyms_agilent.enums
import System
import System.Collections
import System.ComponentModel
import System.Configuration
import System.Configuration.Assemblies
import System.Data
import System.Globalization
import System.IO
import System.Reflection
import System.Runtime
import System.Runtime.CompilerServices
import System.Runtime.InteropServices
import System.Runtime.Remoting
import System.Runtime.Serialization
import System.Security
import System.Security.AccessControl
import System.Security.Cryptography
import System.Security.Cryptography.X509Certificates
import System.Security.Policy
import System.Threading
import System.Threading.Tasks
import System.Xml
import System.Xml.Schema
import System.Xml.Serialization

IonPolarity = int
SmoothingFunctionType = Any

class BDAFileInformation:
	def __init__(self, *args, **kwargs) -> None: ...
	def Close(self) -> None: ...

	def CombineFileInformation(
			self,
			_: List[IBDAFileInformation],
			) -> IBDAFileInformation: ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IBDAFileInformation:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AcquisitionTime(self) -> System.DateTime: ...

	@AcquisitionTime.setter
	def AcquisitionTime(self, value: System.DateTime): ...

	def Clear(self) -> None: ...
	def Clone(self) -> IBDAFileInformation: ...

	@property
	def DataFileName(self) -> str: ...

	@DataFileName.setter
	def DataFileName(self, value: str): ...

	def GetDeviceName(self, devType: pyms_agilent.enums.DeviceType) -> str: ...
	def GetDeviceTable(self, _: pyms_agilent.enums.StoredDataType) -> System.Data.DataTable: ...
	def GetSignalTable(self, _: str, __: pyms_agilent.enums.StoredDataType) -> System.Data.DataTable: ...
	def GetSpectrumXAxisLimit(self, _: str) -> IRange: ...

	@property
	def IRMStatus(self) -> pyms_agilent.enums.IRMStatus: ...

	@IRMStatus.setter
	def IRMStatus(self, value: pyms_agilent.enums.IRMStatus): ...

	def IsMSDataPresent(self) -> bool: ...
	def IsNonMSDataPresent(self) -> bool: ...

	def IsStoredDataTypePresent(
			self,
			deviceNameOrdinalNumber: str,
			desiredType: pyms_agilent.enums.StoredDataType,
			) -> bool: ...

	def IsUVSignalPresent(
			self,
			devType: pyms_agilent.enums.DeviceType,
			signalName: str,
			devName: str,
			) -> Tuple[bool]: ...

	def IsUVSpectralDataPresent(self) -> bool: ...

	@property
	def MSScanFileInformation(self) -> BDAMSScanFileInformation: ...

	@MSScanFileInformation.setter
	def MSScanFileInformation(self, value: BDAMSScanFileInformation): ...

	@property
	def MeasurementType(self) -> pyms_agilent.enums.MeasurementType: ...

	@MeasurementType.setter
	def MeasurementType(self, value: pyms_agilent.enums.MeasurementType): ...

	@property
	def SeparationTechnique(self): ...

	@SeparationTechnique.setter
	def SeparationTechnique(self, value): ...

	def get_AcquisitionTime(self) -> System.DateTime: ...
	def get_DataFileName(self) -> str: ...
	def get_IRMStatus(self) -> pyms_agilent.enums.IRMStatus: ...
	def get_MSScanFileInformation(self) -> IBDAMSScanFileInformation: ...
	def get_MeasurementType(self) -> pyms_agilent.enums.MeasurementType: ...
	def get_SeparationTechnique(self) -> pyms_agilent.enums.SeparationTechnique: ...

class IBDAChromData:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AbundanceLimit(self) -> float: ...

	@property
	def AcquiredTimeRange(self) -> List[IRange]: ...

	@property
	def ChromatogramType(self) -> pyms_agilent.enums.ChromType: ...

	def Clone(self) -> IBDAChromData: ...

	@property
	def CollisionEnergy(self) -> float: ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value): ...

	@property
	def DeviceName(self) -> str: ...

	@DeviceName.setter
	def DeviceName(self, value): ...

	@property
	def DeviceType(self) -> pyms_agilent.enums.DeviceType: ...

	@property
	def FragmentorVoltage(self) -> float: ...

	def GetXAxisInfoChrom(
			self,
			xChromunit: Any,
			xChromvalueType: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType]: ...

	def GetYAxisInfoChrom(
			self,
			yChromunit: Any,
			yChromvalueType: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType]: ...

	@property
	def IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@property
	def IsChromatogram(self): ...

	@IsChromatogram.setter
	def IsChromatogram(self, value): ...

	@property
	def IsCycleSummed(self) -> bool: ...

	@property
	def IsMassSpectrum(self): ...

	@IsMassSpectrum.setter
	def IsMassSpectrum(self, value): ...

	@property
	def IsPrimaryMrm(self) -> bool: ...

	@property
	def IsUvSpectrum(self): ...

	@IsUvSpectrum.setter
	def IsUvSpectrum(self, value): ...

	@property
	def MSLevelInfo(self) -> pyms_agilent.enums.MSLevel: ...

	@property
	def MSScanType(self) -> pyms_agilent.enums.MSScanType: ...

	@property
	def MSStorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...

	@property
	def MZOfInterest(self) -> List[IRange]: ...

	@property
	def MeasuredMassRange(self) -> List[IRange]: ...

	@property
	def MzRegionsWereExcluded(self) -> bool: ...

	@property
	def OrdinalNumber(self) -> int: ...

	@property
	def SamplingPeriod(self) -> float: ...

	@property
	def SignalDescription(self) -> str: ...

	@property
	def SignalName(self) -> str: ...

	@property
	def Threshold(self) -> float: ...

	@property
	def TotalDataPoints(self) -> int: ...

	@TotalDataPoints.setter
	def TotalDataPoints(self, value): ...

	@property
	def XArray(self) -> List[float]: ...

	@property
	def YArray(self) -> List[float]: ...

	def get_AbundanceLimit(self) -> float: ...
	def get_AcquiredTimeRange(self) -> List[IRange]: ...
	def get_ChromatogramType(self) -> pyms_agilent.enums.ChromType: ...
	def get_CollisionEnergy(self) -> float: ...
	def get_DeviceName(self) -> str: ...
	def get_DeviceType(self) -> pyms_agilent.enums.DeviceType: ...
	def get_FragmentorVoltage(self) -> float: ...
	def get_IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_IsChromatogram(self) -> bool: ...
	def get_IsCycleSummed(self) -> bool: ...
	def get_IsMassSpectrum(self) -> bool: ...
	def get_IsPrimaryMrm(self) -> bool: ...
	def get_IsUvSpectrum(self) -> bool: ...
	def get_MSLevelInfo(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanType(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MSStorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...
	def get_MZOfInterest(self) -> List[IRange]: ...
	def get_MeasuredMassRange(self) -> List[IRange]: ...
	def get_MzRegionsWereExcluded(self) -> bool: ...
	def get_OrdinalNumber(self) -> int: ...
	def get_SamplingPeriod(self) -> float: ...
	def get_SignalDescription(self) -> str: ...
	def get_SignalName(self) -> str: ...
	def get_Threshold(self) -> float: ...
	def get_TotalDataPoints(self) -> int: ...
	def get_XArray(self) -> List[float]: ...
	def get_YArray(self) -> List[float]: ...

class SignalInfo:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def DeviceInformation(self) -> IDeviceInfo: ...

	@DeviceInformation.setter
	def DeviceInformation(self, value: IDeviceInfo): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def SignalName(self) -> str: ...

	@SignalName.setter
	def SignalName(self, value: str): ...

	def ToString(self) -> str: ...
	def get_DeviceInformation(self) -> IDeviceInfo: ...
	def get_SignalName(self) -> str: ...
	def set_DeviceInformation(self, _: IDeviceInfo) -> None: ...
	def set_SignalName(self, _: str) -> None: ...

class BDAChromData:
	def __init__(self, *args, **kwargs) -> None: ...
	def Add(self, _: BDAChromData) -> BDAChromData: ...

	@property
	def ChromFilter(self): ...

	@ChromFilter.setter
	def ChromFilter(self, value): ...

	def Cleanup(self) -> None: ...
	def Clear(self) -> None: ...
	def Clone(self) -> IBDAChromData: ...

	def CreateBDAChromData(
			self,
			_: List[float],
			__: List[float],
			___: BDAChromFilter,
			____: MSOverallScanRecordInfo,
			_____: pyms_agilent.enums.DeviceType,
			) -> IBDAChromData: ...

	@property
	def DeviceIDInfo(self): ...

	@DeviceIDInfo.setter
	def DeviceIDInfo(self, value): ...

	def Dispose(self) -> None: ...

	@property
	def Disposed(self): ...

	@Disposed.setter
	def Disposed(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	def GetXAxisInfo(
			self,
			_: Any,
			__: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType]: ...

	def GetYAxisInfo(
			self,
			_: Any,
			__: Any,
			___: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType, str]: ...

	@property
	def IsICPData(self): ...

	@IsICPData.setter
	def IsICPData(self, value): ...

	@property
	def MSOverallScanRecordInformation(self): ...

	@MSOverallScanRecordInformation.setter
	def MSOverallScanRecordInformation(self, value): ...

	@property
	def MeasuredMassRange(self): ...

	@MeasuredMassRange.setter
	def MeasuredMassRange(self, value): ...

	@property
	def MeasuredMassRangeInfo(self): ...

	@MeasuredMassRangeInfo.setter
	def MeasuredMassRangeInfo(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Smooth(self, _: SmoothingFunctionType, __: int, ___: float) -> None: ...
	def ToString(self) -> str: ...
	def TrimXRange(self, _: float, __: float) -> None: ...

	@property
	def XSpecificData(self): ...

	@XSpecificData.setter
	def XSpecificData(self, value): ...

	def get_ChromFilter(self) -> IBDAChromFilter: ...
	def get_DeviceIDInfo(self) -> int: ...
	def get_Disposed(self) -> bool: ...
	def get_IsICPData(self) -> bool: ...
	def get_MSOverallScanRecordInformation(self) -> MSOverallScanRecordInfo: ...
	def get_MeasuredMassRangeInfo(self) -> BDARangeCollection: ...
	def get_XSpecificData(self) -> Any: ...
	def set_ChromFilter(self, _: IBDAChromFilter) -> None: ...
	def set_MeasuredMassRange(self, _: BDARangeCollection) -> None: ...

class MSOverallScanRecordInfo:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AbundanceLimit(self): ...

	@AbundanceLimit.setter
	def AbundanceLimit(self, value): ...

	@property
	def CalibrationID(self): ...

	@CalibrationID.setter
	def CalibrationID(self, value): ...

	@property
	def ChargeState(self): ...

	@ChargeState.setter
	def ChargeState(self, value): ...

	@property
	def ChromScaleFactor(self): ...

	@ChromScaleFactor.setter
	def ChromScaleFactor(self, value): ...

	def Clone(self) -> MSOverallScanRecordInfo: ...

	@property
	def CollisionEnergy(self): ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value): ...

	@property
	def CompensationField(self): ...

	@CompensationField.setter
	def CompensationField(self, value): ...

	@property
	def CycleNumber(self): ...

	@CycleNumber.setter
	def CycleNumber(self, value): ...

	@property
	def DispersionField(self): ...

	@DispersionField.setter
	def DispersionField(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FragmentationMode(self): ...

	@FragmentationMode.setter
	def FragmentationMode(self, value): ...

	@property
	def FragmentorVoltage(self): ...

	@FragmentorVoltage.setter
	def FragmentorVoltage(self, value): ...

	def GetFilteredOnDetails(
			self,
			_: bool,
			__: bool,
			___: bool,
			____: bool,
			_____: bool,
			______: bool,
			) -> None: ...

	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def IonPolarity(self): ...

	@IonPolarity.setter
	def IonPolarity(self, value): ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@IonizationMode.setter
	def IonizationMode(self, value: pyms_agilent.enums.IonizationMode): ...

	@property
	def IsCEAssignedFromAcqMethod(self): ...

	@IsCEAssignedFromAcqMethod.setter
	def IsCEAssignedFromAcqMethod(self, value): ...

	@property
	def IsCollisionEnergyDynamic(self): ...

	@IsCollisionEnergyDynamic.setter
	def IsCollisionEnergyDynamic(self, value): ...

	@property
	def IsFVAssignedFromAcqMethod(self): ...

	@IsFVAssignedFromAcqMethod.setter
	def IsFVAssignedFromAcqMethod(self, value): ...

	@property
	def IsFragmentorDynamic(self): ...

	@IsFragmentorDynamic.setter
	def IsFragmentorDynamic(self, value): ...

	@property
	def IsPrimaryMrm(self): ...

	@IsPrimaryMrm.setter
	def IsPrimaryMrm(self, value): ...

	@property
	def MSLevel(self) -> pyms_agilent.enums.MSLevel: ...

	@MSLevel.setter
	def MSLevel(self, value: pyms_agilent.enums.MSLevel): ...

	@property
	def MSScanType(self) -> pyms_agilent.enums.MSScanType: ...

	@MSScanType.setter
	def MSScanType(self, value: pyms_agilent.enums.MSScanType): ...

	@property
	def MSStorageModeInfo(self): ...

	@MSStorageModeInfo.setter
	def MSStorageModeInfo(self, value): ...

	@property
	def MeasuredNoise(self): ...

	@MeasuredNoise.setter
	def MeasuredNoise(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MethodNumber(self): ...

	@MethodNumber.setter
	def MethodNumber(self, value): ...

	@property
	def MzOfInterestRanges(self): ...

	@MzOfInterestRanges.setter
	def MzOfInterestRanges(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def ParentIntensity(self): ...

	@ParentIntensity.setter
	def ParentIntensity(self, value): ...

	@property
	def ParentScanID(self): ...

	@ParentScanID.setter
	def ParentScanID(self, value): ...

	@property
	def ParentScanMzOfInterest(self): ...

	@ParentScanMzOfInterest.setter
	def ParentScanMzOfInterest(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def SamplingPeriod(self): ...

	@SamplingPeriod.setter
	def SamplingPeriod(self, value): ...

	@property
	def ScanID(self) -> int: ...

	@ScanID.setter
	def ScanID(self, value: int): ...

	@property
	def ScanTime(self): ...

	@ScanTime.setter
	def ScanTime(self, value): ...

	@property
	def Threshold(self): ...

	@Threshold.setter
	def Threshold(self, value): ...

	@property
	def TimeSegmentID(self): ...

	@TimeSegmentID.setter
	def TimeSegmentID(self, value): ...

	def ToString(self) -> str: ...
	def get_AbundanceLimit(self) -> float: ...
	def get_CalibrationID(self) -> int: ...
	def get_ChargeState(self) -> int: ...
	def get_ChromScaleFactor(self) -> List[float]: ...
	def get_CollisionEnergy(self) -> float: ...
	def get_CompensationField(self) -> float: ...
	def get_CycleNumber(self) -> int: ...
	def get_DispersionField(self) -> float: ...
	def get_FragmentationMode(self) -> pyms_agilent.enums.FragmentationMode: ...
	def get_FragmentorVoltage(self) -> float: ...
	def get_IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_IsCEAssignedFromAcqMethod(self) -> bool: ...
	def get_IsCollisionEnergyDynamic(self) -> bool: ...
	def get_IsFVAssignedFromAcqMethod(self) -> bool: ...
	def get_IsFragmentorDynamic(self) -> bool: ...
	def get_IsPrimaryMrm(self) -> bool: ...
	def get_MSLevel(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanType(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MSStorageModeInfo(self) -> pyms_agilent.enums.MSStorageMode: ...
	def get_MeasuredNoise(self) -> float: ...
	def get_MethodNumber(self) -> int: ...
	def get_MzOfInterestRanges(self) -> BDARangeCollection: ...
	def get_ParentIntensity(self) -> float: ...
	def get_ParentScanID(self) -> int: ...
	def get_ParentScanMzOfInterest(self) -> float: ...
	def get_SamplingPeriod(self) -> float: ...
	def get_ScanID(self) -> int: ...
	def get_ScanTime(self) -> float: ...
	def get_Threshold(self) -> float: ...
	def get_TimeSegmentID(self) -> int: ...

class BDARangeCollection:
	def __init__(self, *args, **kwargs) -> None: ...
	def Add(self, _: IRange) -> int: ...
	def AddClone(self, _: IRange) -> int: ...

	@property
	def Capacity(self): ...

	@Capacity.setter
	def Capacity(self, value): ...

	def Clear(self) -> None: ...
	def Clone(self) -> BDARangeCollection: ...

	def CloneSetUnits(
			self,
			_: pyms_agilent.enums.DataValueType,
			__: pyms_agilent.enums.DataUnit,
			) -> BDARangeCollection: ...

	def Contains(self, _: IRange) -> bool: ...
	def CopyTo(self, _: List[IRange], __: int) -> None: ...
	def CopyToClone(self, _: List[IRange], __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def InnerList(self): ...

	@InnerList.setter
	def InnerList(self, value): ...

	def IsEmpty(self) -> bool: ...

	@property
	def List(self): ...

	@List.setter
	def List(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def OnClear(self) -> None: ...
	def OnClearComplete(self) -> None: ...
	def OnInsert(self, _: int, __: object) -> None: ...
	def OnInsertComplete(self, _: int, __: object) -> None: ...
	def OnRemove(self, _: int, __: object) -> None: ...
	def OnRemoveComplete(self, _: int, __: object) -> None: ...
	def OnSet(self, _: int, __: object, ___: object) -> None: ...
	def OnSetComplete(self, _: int, __: object, ___: object) -> None: ...
	def OnValidate(self, _: object) -> None: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: int) -> None: ...
	def RemoveAt(self, _: int) -> None: ...
	def Reverse(self) -> None: ...
	def SetEmpty(self) -> None: ...
	def Sort(self, _: Any) -> None: ...
	def ToString(self) -> str: ...
	def get_Capacity(self) -> int: ...
	def get_Count(self) -> int: ...
	def get_InnerList(self) -> typing.List: ...
	def get_Item(self, _: int) -> IRange: ...
	def get_List(self) -> typing.List: ...
	def set_Capacity(self, _: int) -> None: ...
	def set_Item(self, _: int, __: IRange) -> None: ...

class MassSpecDataReader:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEWC(self, _: IDeviceInfo, __: IRange, ___: IRange) -> BDAChromData: ...
	def GetHashCode(self) -> int: ...
	def GetNonmsDevices(self) -> List[IDeviceInfo]: ...
	def GetSignal(self, _: Union[ISignalInfo, SignalInfo]) -> BDAChromData: ...
	def GetSignalInfo(self, _: IDeviceInfo, __: pyms_agilent.enums.StoredDataType) -> List[ISignalInfo]: ...
	def GetTWC(self, _: IDeviceInfo) -> IBDAChromData: ...
	def GetType(self) -> Type: ...
	def GetUVSpectrum(self, _: IDeviceInfo, __: IRange) -> List[IBDASpecData]: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IMsdrDataReader:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def ActualsInformation(self) -> IBDAActuals: ...

	def CloseDataFile(self: Union[IMsdrDataReader, MassSpecDataReader]) -> None: ...
	def Deisotope(self, spectrum: IBDASpecData, csaFilter: IMsdrChargeStateAssignmentFilter) -> None: ...

	@property
	def FileInformation(self) -> BDAMSScanFileInformation: ...

	def GetBPC(
			self,
			startTime: float = ...,
			endTime: float = ...,
			scanType: pyms_agilent.enums.MSScanType = ...,
			ionPolarity: pyms_agilent.enums.IonPolarity = ...,
			ionMode: pyms_agilent.enums.IonizationMode = ...,
			) -> BDAChromData: ...

	def GetChromatogram(self, chromFilter: IBDAChromFilter) -> List[BDAChromData]: ...

	def GetEIC(
			self,
			massOfInterest: List[float],
			scanType: pyms_agilent.enums.MSScanType,
			ionPolarity: pyms_agilent.enums.IonPolarity,
			ionMode: pyms_agilent.enums.IonizationMode,
			) -> BDAChromData: ...

	def GetEICForEachMass(
			self,
			massOfInterest: List[float],
			scanType: pyms_agilent.enums.MSScanType,
			ionPolarity: pyms_agilent.enums.IonPolarity,
			ionMode: pyms_agilent.enums.IonizationMode,
			) -> List[BDAChromData]: ...

	def GetMSScanInformation(self, retentionTime: float) -> IBDAMSScanFileInformation: ...
	def GetSampleCollection(self) -> List[IBDASampleData]: ...

	@staticmethod
	def GetScanRecord(self: MassSpecDataReader, rowNumber: int) -> MSScanRecord: ...

	@overload
	def GetSpectrum(
			self,
			retentionTime: float,
			scanType: pyms_agilent.enums.MSScanType,
			ionPloarity: pyms_agilent.enums.IonPolarity,
			ionMode: pyms_agilent.enums.IonizationMode,
			peakFilter: MsdrPeakFilter = ...,
			) -> BDASpecData: ...

	# _2

	@overload
	def GetSpectrum(
			self,
			rtRange: IRange,
			peakFilter: IMsdrPeakFilter = ...,
			) -> IBDASpecData: ...

	# _3

	@overload
	def GetSpectrum(
			self,
			rtRanges: List[IRange],
			peakFilter: IMsdrPeakFilter = ...,
			) -> IBDASpecData: ...

	# _4

	@overload
	def GetSpectrum(
			self,
			specFilter: IBDASpecFilter,
			peakFilter: IMsdrPeakFilter = ...,
			) -> List[IBDASpecData]: ...

	# # _5
	# @overload
	# def GetSpectrum(
	#         self,
	#         specFilter: IBDASpecFilter,
	#         ) -> List[IBDASpecData]: ...

	# _6

	@overload
	def GetSpectrum(
			self,
			rowNumber: int,
			peakMSFilter: MsdrPeakFilter,
			peakMSMSFilter: MsdrPeakFilter,
			) -> BDASpecData: ...

	# _7

	@overload
	def GetSpectrum(
			self,
			retentionTime: float,
			scanType: pyms_agilent.enums.MSScanType,
			ionPolarity: pyms_agilent.enums.IonPolarity,
			ionMode: pyms_agilent.enums.IonizationMode,
			peakFilter: IMsdrPeakFilter,
			peakFilterOnCentroid: bool,
			) -> IBDASpecData: ...

	# _8

	@overload
	def GetSpectrum(
			self,
			rowNumber: int,
			peakMSFilter: IMsdrPeakFilter,
			peakMSMSFilter: IMsdrPeakFilter,
			storageType: pyms_agilent.enums.DesiredMSStorageType,
			) -> IBDASpecData: ...

	@overload
	def GetTIC(self) -> BDAChromData: ...

	# _2

	@overload
	def GetTIC(
			self,
			startTime: float,
			endTime: float,
			scanType: pyms_agilent.enums.MSScanType,
			ionPloarity: pyms_agilent.enums.IonPolarity,
			ionMode: pyms_agilent.enums.IonizationMode,
			) -> BDAChromData: ...

	@property
	def MSScanFileInformation(self) -> Any: ...

	def OpenDataFile(self: Union[IMsdrDataReader, MassSpecDataReader], fileName: str) -> bool: ...
	def RefreshDataFile(self: Union[IMsdrDataReader, MassSpecDataReader]) -> bool: ...

	@property
	def SchemaDefaultDirectory(self) -> str: ...

	@SchemaDefaultDirectory.setter
	def SchemaDefaultDirectory(self, value: str): ...

	@property
	def Version(self) -> str: ...

	def get_ActualsInformation(self) -> IBDAActuals: ...
	def get_FileInformation(self) -> IBDAFileInformation: ...
	def get_MSScanFileInformation(self) -> IBDAMSScanFileInformation: ...
	def get_SchemaDefaultDirectory(self) -> str: ...
	def get_Version(self) -> str: ...
	def set_SchemaDefaultDirectory(self, _: str) -> None: ...

class MsdrPeakFilter:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class DeviceInfo:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def DeviceName(self): ...

	@DeviceName.setter
	def DeviceName(self, value): ...

	@property
	def DeviceType(self) -> pyms_agilent.enums.DeviceType: ...

	@DeviceType.setter
	def DeviceType(self, value: pyms_agilent.enums.DeviceType): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def OrdinalNumber(self): ...

	@OrdinalNumber.setter
	def OrdinalNumber(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_DeviceName(self) -> str: ...
	def get_DeviceType(self) -> pyms_agilent.enums.DeviceType: ...
	def get_OrdinalNumber(self) -> int: ...
	def set_DeviceName(self, _: str) -> None: ...
	def set_DeviceType(self, _: pyms_agilent.enums.DeviceType) -> None: ...
	def set_OrdinalNumber(self, _: int) -> None: ...

class IBDAActuals:
	def __init__(self, *args, **kwargs) -> None: ...
	def GetActualCollection(self, timeInMins: float) -> List[IBDAActualData]: ...
	def GetActualNames(self) -> List[str]: ...

	def GetActualValue(
			self,
			actualDisplayName: str,
			xArrayValues: List[float],
			yArrayValues: List[float],
			) -> Tuple[None, List[float], List[float]]: ...

	def GetActuals(self, _: float) -> System.Data.DataSet: ...
	def IsActualsPresent(self) -> bool: ...
	def GetTimeSegmentsIDArray(self) -> List[int]: ...

	def GetSampleData(
			self,
			_: str,
			__: pyms_agilent.enums.SampleCategory,
			*args,
			**kwargs,
			): ...

class IBDAChromFilter:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def ChargeStateLimits(self) -> IRange: ...

	@ChargeStateLimits.setter
	def ChargeStateLimits(self, value: IRange): ...

	@property
	def ChromatogramSubType(self) -> pyms_agilent.enums.ChromSubType: ...

	@ChromatogramSubType.setter
	def ChromatogramSubType(self, value: pyms_agilent.enums.ChromSubType): ...

	@property
	def ChromatogramType(self) -> pyms_agilent.enums.ChromType: ...

	@ChromatogramType.setter
	def ChromatogramType(self, value: pyms_agilent.enums.ChromType): ...

	def Clone(self) -> IBDAChromFilter: ...

	@property
	def CollisionEnergy(self) -> IRange: ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value: IRange): ...

	@property
	def CompensationField(self): ...

	@CompensationField.setter
	def CompensationField(self, value): ...

	@property
	def Description(self) -> str: ...

	@Description.setter
	def Description(self, value: str): ...

	@property
	def DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...

	@DesiredMSStorageType.setter
	def DesiredMSStorageType(self, value: pyms_agilent.enums.DesiredMSStorageType): ...

	@property
	def DeviceName(self) -> str: ...

	@DeviceName.setter
	def DeviceName(self, value: str): ...

	@property
	def DispersionField(self): ...

	@DispersionField.setter
	def DispersionField(self, value): ...

	@property
	def DoCycleSum(self) -> bool: ...

	@DoCycleSum.setter
	def DoCycleSum(self, value: bool): ...

	@property
	def ExtractOneChromatogramPerScanSegment(self) -> bool: ...

	@ExtractOneChromatogramPerScanSegment.setter
	def ExtractOneChromatogramPerScanSegment(self, value: bool): ...

	@property
	def FragmentorVoltage(self) -> IRange: ...

	@FragmentorVoltage.setter
	def FragmentorVoltage(self, value: IRange): ...

	@property
	def IncludeMassRanges(self) -> List[IRange]: ...

	@IncludeMassRanges.setter
	def IncludeMassRanges(self, value: List[IRange]): ...

	@property
	def Integrate(self) -> bool: ...

	@Integrate.setter
	def Integrate(self, value: bool): ...

	@property
	def IonPolarityFilter(self) -> IonPolarity: ...

	@IonPolarityFilter.setter
	def IonPolarityFilter(self, value: IonPolarity): ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@IonizationMode.setter
	def IonizationMode(self, value: pyms_agilent.enums.IonizationMode): ...

	@property
	def MSLevelFilter(self) -> pyms_agilent.enums.MSLevel: ...

	@MSLevelFilter.setter
	def MSLevelFilter(self, value: pyms_agilent.enums.MSLevel): ...

	@property
	def MSScanTypeFilter(self) -> pyms_agilent.enums.MSScanType: ...

	@MSScanTypeFilter.setter
	def MSScanTypeFilter(self, value: pyms_agilent.enums.MSScanType): ...

	@property
	def MzOfInterestFilter(self) -> List[IRange]: ...

	@MzOfInterestFilter.setter
	def MzOfInterestFilter(self, value: List[IRange]): ...

	@property
	def OrdinalNumber(self) -> int: ...

	@OrdinalNumber.setter
	def OrdinalNumber(self, value: int): ...

	@property
	def ReferenceWavelength(self) -> IRange: ...

	@ReferenceWavelength.setter
	def ReferenceWavelength(self, value: IRange): ...

	@property
	def ScanRange(self) -> IRange: ...

	@ScanRange.setter
	def ScanRange(self, value: IRange): ...

	@property
	def ScanSegmentNumber(self) -> IRange: ...

	@ScanSegmentNumber.setter
	def ScanSegmentNumber(self, value: IRange): ...

	@property
	def SignalDescription(self) -> str: ...

	@SignalDescription.setter
	def SignalDescription(self, value: str): ...

	@property
	def SignalName(self): ...

	@SignalName.setter
	def SignalName(self, value): ...

	@property
	def SignalWavelength(self) -> str: ...

	@SignalWavelength.setter
	def SignalWavelength(self, value: str): ...

	@property
	def SingleChromatogramForAllMasses(self) -> bool: ...

	@SingleChromatogramForAllMasses.setter
	def SingleChromatogramForAllMasses(self, value: bool): ...

	@property
	def UseReference(self) -> bool: ...

	@UseReference.setter
	def UseReference(self, value: bool): ...

	@property
	def YValueInCounts(self) -> bool: ...

	@YValueInCounts.setter
	def YValueInCounts(self, value: bool): ...

	def get_ChargeStateLimits(self) -> IRange: ...
	def get_ChromatogramSubType(self) -> pyms_agilent.enums.ChromSubType: ...
	def get_ChromatogramType(self) -> pyms_agilent.enums.ChromType: ...
	def get_CollisionEnergy(self) -> IRange: ...
	def get_CompensationField(self) -> IRange: ...
	def get_Description(self) -> str: ...
	def get_DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...
	def get_DeviceName(self) -> str: ...
	def get_DispersionField(self) -> IRange: ...
	def get_DoCycleSum(self) -> bool: ...
	def get_ExtractOneChromatogramPerScanSegment(self) -> bool: ...
	def get_FragmentorVoltage(self) -> IRange: ...
	def get_IncludeMassRanges(self) -> List[IRange]: ...
	def get_Integrate(self) -> bool: ...
	def get_IonPolarityFilter(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_MSLevelFilter(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanTypeFilter(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MzOfInterestFilter(self) -> List[IRange]: ...
	def get_OrdinalNumber(self) -> int: ...
	def get_ReferenceWavelength(self) -> IRange: ...
	def get_ScanRange(self) -> IRange: ...
	def get_ScanSegmentNumber(self) -> IRange: ...
	def get_SignalDescription(self) -> str: ...
	def get_SignalName(self) -> str: ...
	def get_SignalWavelength(self) -> IRange: ...
	def get_SingleChromatogramForAllMasses(self) -> bool: ...
	def get_UseReference(self) -> bool: ...
	def get_YValueInCounts(self) -> bool: ...
	def set_ChargeStateLimits(self, _: IRange) -> None: ...
	def set_ChromatogramSubType(self, _: pyms_agilent.enums.ChromSubType) -> None: ...
	def set_ChromatogramType(self, _: pyms_agilent.enums.ChromType) -> None: ...
	def set_CollisionEnergy(self, _: IRange) -> None: ...
	def set_CompensationField(self, _: IRange) -> None: ...
	def set_Description(self, _: str) -> None: ...
	def set_DesiredMSStorageType(self, _: pyms_agilent.enums.DesiredMSStorageType) -> None: ...
	def set_DeviceName(self, _: str) -> None: ...
	def set_DispersionField(self, _: IRange) -> None: ...
	def set_DoCycleSum(self, _: bool) -> None: ...
	def set_ExtractOneChromatogramPerScanSegment(self, _: bool) -> None: ...
	def set_FragmentorVoltage(self, _: IRange) -> None: ...
	def set_IncludeMassRanges(self, _: List[IRange]) -> None: ...
	def set_Integrate(self, _: bool) -> None: ...
	def set_IonPolarityFilter(self, _: pyms_agilent.enums.IonPolarity) -> None: ...
	def set_IonizationMode(self, _: pyms_agilent.enums.IonizationMode) -> None: ...
	def set_MSLevelFilter(self, _: pyms_agilent.enums.MSLevel) -> None: ...
	def set_MSScanTypeFilter(self, _: pyms_agilent.enums.MSScanType) -> None: ...
	def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...
	def set_OrdinalNumber(self, _: int) -> None: ...
	def set_ReferenceWavelength(self, _: IRange) -> None: ...
	def set_ScanRange(self, _: IRange) -> None: ...
	def set_ScanSegmentNumber(self, _: IRange) -> None: ...
	def set_SignalDescription(self, _: str) -> None: ...
	def set_SignalName(self, _: str) -> None: ...
	def set_SignalWavelength(self, _: IRange) -> None: ...
	def set_SingleChromatogramForAllMasses(self, _: bool) -> None: ...
	def set_UseReference(self, _: bool) -> None: ...
	def set_YValueInCounts(self, _: bool) -> None: ...

class BDAChromFilter:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDAChromFilter: ...
	def Copy(self, _: BDAChromFilter) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def SmoothFunction(self): ...

	@SmoothFunction.setter
	def SmoothFunction(self, value): ...

	@property
	def SmoothFunctionWidth(self): ...

	@SmoothFunctionWidth.setter
	def SmoothFunctionWidth(self, value): ...

	@property
	def SmoothGaussianWidth(self): ...

	@SmoothGaussianWidth.setter
	def SmoothGaussianWidth(self, value): ...

	@property
	def Smoothed(self): ...

	@Smoothed.setter
	def Smoothed(self, value): ...

	def ToString(self) -> str: ...
	def get_SmoothFunction(self) -> SmoothingFunctionType: ...
	def get_SmoothFunctionWidth(self) -> int: ...
	def get_SmoothGaussianWidth(self) -> float: ...
	def get_Smoothed(self) -> bool: ...
	def set_SmoothFunction(self, _: SmoothingFunctionType) -> None: ...
	def set_SmoothFunctionWidth(self, _: int) -> None: ...
	def set_SmoothGaussianWidth(self, _: float) -> None: ...
	def set_Smoothed(self, _: bool) -> None: ...

class IBDASpecData:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AbundanceLimit(self) -> float: ...

	@property
	def AcquiredTimeRange(self) -> List[IRange]: ...

	@property
	def ChromPeakIndex(self): ...

	@ChromPeakIndex.setter
	def ChromPeakIndex(self, value): ...

	def Clone(self) -> IBDASpecData: ...

	@property
	def CollisionEnergy(self) -> float: ...

	@property
	def CompensationField(self): ...

	@CompensationField.setter
	def CompensationField(self, value): ...

	def ConvertDataToMassUnits(self) -> None: ...

	@property
	def DeviceName(self) -> str: ...

	@property
	def DeviceType(self) -> pyms_agilent.enums.DeviceType: ...

	@property
	def DispersionField(self): ...

	@DispersionField.setter
	def DispersionField(self, value): ...

	@property
	def FragmentorVoltage(self) -> float: ...

	def GetPrecursorCharge(self, charge: int) -> Tuple[bool, int]: ...
	def GetPrecursorIntensity(self, precursorIntensity: float) -> Tuple[bool, int]: ...
	def GetPrecursorIon(self, precursorCount: int) -> List[float]: ...

	def GetXAxisInfoSpec(
			self,
			_: Any,
			__: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType]: ...

	def GetYAxisInfoSpec(
			self,
			_: Any,
			__: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType]: ...

	@property
	def IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@property
	def IsDataInMassUnit(self) -> bool: ...

	@property
	def IsMassSpectrum(self): ...

	@IsMassSpectrum.setter
	def IsMassSpectrum(self, value): ...

	@property
	def IsUvSpectrum(self): ...

	@IsUvSpectrum.setter
	def IsUvSpectrum(self, value): ...

	@property
	def MSLevelInfo(self) -> pyms_agilent.enums.MSLevel: ...

	@property
	def MSScanType(self) -> pyms_agilent.enums.MSScanType: ...

	@property
	def MSStorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...

	@property
	def MZOfInterest(self) -> List[IRange]: ...

	@property
	def MeasuredMassRange(self) -> IRange: ...

	@property
	def OrdinalNumber(self) -> int: ...

	@property
	def ParentScanId(self) -> int: ...

	@property
	def SamplingPeriod(self) -> float: ...

	def ScaleYValues(self, _: float, __: float) -> None: ...

	@property
	def ScanId(self) -> int: ...

	@property
	def SpecFilter(self): ...

	@SpecFilter.setter
	def SpecFilter(self, value): ...

	@property
	def SpectrumType(self) -> pyms_agilent.enums.SpecType: ...

	@property
	def Threshold(self) -> float: ...

	@property
	def TofCalibration(self): ...

	@TofCalibration.setter
	def TofCalibration(self, value): ...

	@property
	def TotalDataPoints(self) -> int: ...

	@property
	def TotalScanCount(self) -> int: ...

	def TrimXRange(self, _: List[IRange], __: bool) -> None: ...

	@property
	def XArray(self) -> List[float]: ...

	@property
	def YArray(self) -> List[float]: ...

	@property
	def IsChromatogram(self): ...

	@IsChromatogram.setter
	def IsChromatogram(self, value): ...

	def get_AbundanceLimit(self) -> float: ...
	def get_AcquiredTimeRange(self) -> List[IRange]: ...
	def get_ChromPeakIndex(self) -> int: ...
	def get_CollisionEnergy(self) -> float: ...
	def get_CompensationField(self) -> float: ...
	def get_DeviceName(self) -> str: ...
	def get_DeviceType(self) -> pyms_agilent.enums.DeviceType: ...
	def get_DispersionField(self) -> float: ...
	def get_FragmentorVoltage(self) -> float: ...
	def get_IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_IsChromatogram(self) -> bool: ...
	def get_IsDataInMassUnit(self) -> bool: ...
	def get_IsMassSpectrum(self) -> bool: ...
	def get_IsUvSpectrum(self) -> bool: ...
	def get_MSLevelInfo(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanType(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MSStorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...
	def get_MZOfInterest(self) -> List[IRange]: ...
	def get_MeasuredMassRange(self) -> IRange: ...
	def get_OrdinalNumber(self) -> int: ...
	def get_ParentScanId(self) -> int: ...
	def get_SamplingPeriod(self) -> float: ...
	def get_ScanId(self) -> int: ...
	def get_SpecFilter(self) -> IBDASpecFilter: ...
	def get_SpectrumType(self) -> pyms_agilent.enums.SpecType: ...
	def get_Threshold(self) -> float: ...
	def get_TofCalibration(self) -> Any: ...
	def get_TotalDataPoints(self) -> int: ...
	def get_TotalScanCount(self) -> int: ...
	def get_XArray(self) -> List[float]: ...
	def get_YArray(self) -> List[float]: ...
	def set_ChromPeakIndex(self, _: int) -> None: ...
	def set_SpecFilter(self, _: IBDASpecFilter) -> None: ...

class BDADataAccess:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def CancelIndicator(self): ...

	@CancelIndicator.setter
	def CancelIndicator(self, value): ...

	def Cleanup(self) -> None: ...
	def Dispose(self) -> None: ...

	@property
	def Disposed(self): ...

	@Disposed.setter
	def Disposed(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetActualsForTimeRange(self, _: float, __: float) -> List[IBDAActualData]: ...

	def GetActualsdDefinitionForTimeRange(
			self,
			_: float,
			__: float,
			) -> List[IBDAActualData]: ...

	def GetDeviceTable(self) -> System.Data.DataTable: ...
	def GetHashCode(self) -> int: ...
	def GetMsScanDirSize(self, _: str) -> int: ...

	def GetSampleData(
			self,
			_: str,
			__: pyms_agilent.enums.SampleCategory,
			___: List[str],
			____: List[str],
			_____: List[str],
			): ...

	def GetTimeSegmentsIDArray(self) -> List[int]: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def MsDeviceInfo(self): ...

	@MsDeviceInfo.setter
	def MsDeviceInfo(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ProgressEvent(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def add_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...
	def get_CancelIndicator(self) -> Any: ...
	def get_Disposed(self) -> bool: ...
	def get_MsDeviceInfo(self) -> IBDAMsDeviceInfo: ...
	def remove_ProgressEvent(self, _: BDAProgressEventHandler) -> None: ...
	def set_CancelIndicator(self, _: Any) -> None: ...

class BDAMSScanFileInformation:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MSScanFileInformationIterator(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IBDAMSScanFileInformation:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDAMSScanFileInformation: ...

	@property
	def CollisionEnergies(self) -> List[float]: ...

	@property
	def CollisionEnergy(self): ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value): ...

	@property
	def CompensationFieldValues(self): ...

	@CompensationFieldValues.setter
	def CompensationFieldValues(self, value): ...

	def Contains(self, key: pyms_agilent.enums.MSScanType) -> bool: ...

	@property
	def DeviceType(self) -> pyms_agilent.enums.DeviceType: ...

	@property
	def DispersionFieldValues(self): ...

	@DispersionFieldValues.setter
	def DispersionFieldValues(self, value): ...

	@property
	def FileHasMassSpectralData(self) -> bool: ...

	@property
	def FragmentorVoltage(self) -> List[float]: ...

	@property
	def FragmentorVoltages(self): ...

	@FragmentorVoltages.setter
	def FragmentorVoltages(self, value): ...

	def GetEnumerator(self) -> System.Collections.IEnumerator: ...
	def GetMSScanTypeInformation(self, scanType: pyms_agilent.enums.MSScanType) -> IBDAMSScanTypeInformation: ...
	def GetMSScanTypeInformation_2(self) -> List[IBDAMSScanTypeInformation]: ...

	@property
	def IonModes(self) -> pyms_agilent.enums.IonizationMode: ...

	@property
	def IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...

	def IsFixedCycleLengthDataPresent(self) -> bool: ...
	def IsMultipleSpectraPerScanPresent(self) -> bool: ...

	@property
	def MRMTransitions(self) -> List[IRange]: ...

	@property
	def MSLevel(self) -> pyms_agilent.enums.MSLevel: ...

	@property
	def MassRange(self) -> IRange: ...

	@MassRange.setter
	def MassRange(self, value: IRange): ...

	@property
	def MzScanRangeMaximum(self) -> float: ...

	@property
	def MzScanRangeMinimum(self) -> float: ...

	@property
	def SIMIons(self) -> List[float]: ...

	@property
	def ScanMethodNumbers(self) -> List[int]: ...

	@property
	def ScanTypes(self) -> pyms_agilent.enums.MSScanType: ...

	@property
	def ScanTypesInformationCount(self) -> int: ...

	@property
	def SpectraFormat(self) -> pyms_agilent.enums.MSStorageMode: ...

	@property
	def TotalScansPresent(self) -> int: ...

	def get_CollisionEnergies(self) -> ICoreList: ...
	def get_CollisionEnergy(self) -> List[float]: ...
	def get_CompensationFieldValues(self) -> List[float]: ...
	def get_DeviceType(self) -> pyms_agilent.enums.DeviceType: ...
	def get_DispersionFieldValues(self) -> List[float]: ...
	def get_FileHasMassSpectralData(self) -> bool: ...
	def get_FragmentorVoltage(self) -> List[float]: ...
	def get_FragmentorVoltages(self) -> ICoreList: ...
	def get_IonModes(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_MRMTransitions(self) -> List[IRange]: ...
	def get_MSLevel(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MassRange(self) -> IRange: ...
	def get_MzScanRangeMaximum(self) -> float: ...
	def get_MzScanRangeMinimum(self) -> float: ...
	def get_SIMIons(self) -> List[float]: ...
	def get_ScanMethodNumbers(self) -> List[int]: ...
	def get_ScanTypes(self) -> pyms_agilent.enums.MSScanType: ...
	def get_ScanTypesInformationCount(self) -> int: ...
	def get_SpectraFormat(self) -> pyms_agilent.enums.MSStorageMode: ...
	def get_TotalScansPresent(self) -> int: ...

class ISignalInfo:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def DeviceInformation(self) -> IDeviceInfo: ...

	@DeviceInformation.setter
	def DeviceInformation(self, value: IDeviceInfo): ...

	@property
	def SignalName(self) -> str: ...

	@SignalName.setter
	def SignalName(self, value: str): ...

	def get_DeviceInformation(self) -> IDeviceInfo: ...
	def get_SignalName(self) -> str: ...
	def set_DeviceInformation(self, _: IDeviceInfo) -> None: ...
	def set_SignalName(self, _: str) -> None: ...

class BDASpecData:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AcquiredTimeRangesInfo(self): ...

	@AcquiredTimeRangesInfo.setter
	def AcquiredTimeRangesInfo(self, value): ...

	@property
	def Calibration(self): ...

	@Calibration.setter
	def Calibration(self, value): ...

	def Cleanup(self) -> None: ...
	def Clear(self) -> None: ...
	def Clone(self) -> IBDASpecData: ...

	@property
	def DeviceIDInfo(self): ...

	@DeviceIDInfo.setter
	def DeviceIDInfo(self, value): ...

	def Dispose(self) -> None: ...

	@property
	def Disposed(self): ...

	@Disposed.setter
	def Disposed(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...

	@property
	def FileXSamplingType(self): ...

	@FileXSamplingType.setter
	def FileXSamplingType(self, value): ...

	@property
	def FilteredScanCountInfo(self): ...

	@FilteredScanCountInfo.setter
	def FilteredScanCountInfo(self, value): ...

	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetPointDataValueTypeForIndex(self, _: int) -> pyms_agilent.enums.DataValueType: ...
	def GetType(self) -> Type: ...

	def GetXAxisInfoSpec(
			self,
			_: Any,
			__: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType]: ...

	def GetYAxisInfoSpec(
			self,
			_: Any,
			__: Any,
			) -> Tuple[None, pyms_agilent.enums.DataUnit, pyms_agilent.enums.DataValueType]: ...

	@property
	def IsDataInMassUnits(self): ...

	@IsDataInMassUnits.setter
	def IsDataInMassUnits(self, value): ...

	def IsDeviceOfTypeTOF(self) -> bool: ...

	@property
	def IsEmptySpectrumInfo(self): ...

	@IsEmptySpectrumInfo.setter
	def IsEmptySpectrumInfo(self, value): ...

	@property
	def IsICPData(self): ...

	@IsICPData.setter
	def IsICPData(self, value): ...

	@property
	def IsNullMSSpectrumFormat(self): ...

	@IsNullMSSpectrumFormat.setter
	def IsNullMSSpectrumFormat(self, value): ...

	@property
	def MSOverallScanRecordInformation(self): ...

	@MSOverallScanRecordInformation.setter
	def MSOverallScanRecordInformation(self, value): ...

	@property
	def MSSpectrumFormatXSamplingType(self): ...

	@MSSpectrumFormatXSamplingType.setter
	def MSSpectrumFormatXSamplingType(self, value): ...

	@property
	def MeasuredMassRangeInfo(self): ...

	@MeasuredMassRangeInfo.setter
	def MeasuredMassRangeInfo(self, value): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def OverallAcqTimeRangeInfo(self): ...

	@OverallAcqTimeRangeInfo.setter
	def OverallAcqTimeRangeInfo(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def SelectedIonsInfo(self): ...

	@SelectedIonsInfo.setter
	def SelectedIonsInfo(self, value): ...

	def SetData(self, _: List[float], __: List[float]) -> None: ...

	@property
	def SpectrumTypeInfo(self): ...

	@SpectrumTypeInfo.setter
	def SpectrumTypeInfo(self, value): ...

	@property
	def StorageMode(self): ...

	@StorageMode.setter
	def StorageMode(self, value): ...

	def ToString(self) -> str: ...

	@property
	def XArrayNotExpanded(self): ...

	@XArrayNotExpanded.setter
	def XArrayNotExpanded(self, value): ...

	@property
	def XSpecificData(self): ...

	@XSpecificData.setter
	def XSpecificData(self, value): ...

	def get_AcquiredTimeRangesInfo(self) -> BDARangeCollection: ...
	def get_Calibration(self) -> Any: ...
	def get_DeviceIDInfo(self) -> int: ...
	def get_Disposed(self) -> bool: ...
	def get_FileXSamplingType(self) -> XSamplingType: ...
	def get_FilteredScanCountInfo(self) -> int: ...
	def get_IsDataInMassUnits(self) -> bool: ...
	def get_IsEmptySpectrumInfo(self) -> bool: ...
	def get_IsICPData(self) -> bool: ...
	def get_IsNullMSSpectrumFormat(self) -> bool: ...
	def get_MSOverallScanRecordInformation(self) -> MSOverallScanRecordInfo: ...
	def get_MSSpectrumFormatXSamplingType(self) -> XSamplingType: ...
	def get_MeasuredMassRangeInfo(self) -> IRange: ...
	def get_OverallAcqTimeRangeInfo(self) -> IRange: ...
	def get_SelectedIonsInfo(self) -> List[float]: ...
	def get_SpectrumTypeInfo(self) -> pyms_agilent.enums.SpecType: ...
	def get_StorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...
	def get_XArrayNotExpanded(self) -> List[float]: ...
	def get_XSpecificData(self) -> Any: ...
	def set_Calibration(self, _: Any) -> None: ...
	def set_StorageMode(self, _: pyms_agilent.enums.MSStorageMode) -> None: ...

class IBDAMsDeviceInfo:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def BaseAdcInterval(self): ...

	@BaseAdcInterval.setter
	def BaseAdcInterval(self, value): ...

	@property
	def DecisionEngineMode(self): ...

	@DecisionEngineMode.setter
	def DecisionEngineMode(self, value): ...

	@property
	def DecisionEngineVersion(self): ...

	@DecisionEngineVersion.setter
	def DecisionEngineVersion(self, value): ...

	@property
	def DeviceType(self) -> pyms_agilent.enums.DeviceType: ...

	@DeviceType.setter
	def DeviceType(self, value: pyms_agilent.enums.DeviceType): ...

	@property
	def DriverVersion(self): ...

	@DriverVersion.setter
	def DriverVersion(self, value): ...

	@property
	def DualGainRatio(self): ...

	@DualGainRatio.setter
	def DualGainRatio(self, value): ...

	@property
	def FirmwareVersion(self): ...

	@FirmwareVersion.setter
	def FirmwareVersion(self, value): ...

	@property
	def MsProcessingMode(self): ...

	@MsProcessingMode.setter
	def MsProcessingMode(self, value): ...

	@property
	def NominalMassResolution(self): ...

	@NominalMassResolution.setter
	def NominalMassResolution(self, value): ...

	@property
	def PreampOffsetHighGain(self): ...

	@PreampOffsetHighGain.setter
	def PreampOffsetHighGain(self, value): ...

	@property
	def PreampOffsetLowGain(self): ...

	@PreampOffsetLowGain.setter
	def PreampOffsetLowGain(self, value): ...

	@property
	def TuneMassRangeMax(self): ...

	@TuneMassRangeMax.setter
	def TuneMassRangeMax(self, value): ...

	@property
	def TuneMassRangeMin(self): ...

	@TuneMassRangeMin.setter
	def TuneMassRangeMin(self, value): ...

	def get_BaseAdcInterval(self) -> float: ...
	def get_DecisionEngineMode(self) -> int: ...
	def get_DecisionEngineVersion(self) -> str: ...
	def get_DeviceType(self) -> pyms_agilent.enums.DeviceType: ...
	def get_DriverVersion(self) -> str: ...
	def get_DualGainRatio(self) -> float: ...
	def get_FirmwareVersion(self) -> str: ...
	def get_MsProcessingMode(self) -> pyms_agilent.enums.TofMsProcessingMode: ...
	def get_NominalMassResolution(self) -> int: ...
	def get_PreampOffsetHighGain(self) -> float: ...
	def get_PreampOffsetLowGain(self) -> float: ...
	def get_TuneMassRangeMax(self) -> float: ...
	def get_TuneMassRangeMin(self) -> float: ...

class BDAProgressEventHandler:
	def __init__(self, *args, **kwargs) -> None: ...

	def BeginInvoke(
			self,
			_: object,
			__: BDAProgressEventArgs,
			___: Any,
			____: object,
			) -> Any: ...

	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self, _: object, __: BDAProgressEventArgs) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class IRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IRange: ...
	def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

	@property
	def DataUnit(self): ...

	@DataUnit.setter
	def DataUnit(self, value): ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	@property
	def End(self) -> float: ...

	def Equals(self, _: IRange) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeConsistent(self) -> None: ...

	@property
	def PrecisionDigits(self): ...

	@PrecisionDigits.setter
	def PrecisionDigits(self, value): ...

	@property
	def PrecisionType(self): ...

	@PrecisionType.setter
	def PrecisionType(self, value): ...

	def ReadOnly(self) -> IReadOnlyObject: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self) -> float: ...

	def ValueString(self, withUnits: bool, nValues: int) -> str: ...
	def WriteXml(self, writer: System.Xml.XmlWriter) -> None: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_DataUnit(self) -> pyms_agilent.enums.DataUnit: ...
	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_PrecisionDigits(self) -> int: ...
	def get_PrecisionType(self) -> DisplayPrecisionType: ...
	def get_Start(self) -> float: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_DataUnit(self, _: pyms_agilent.enums.DataUnit) -> None: ...
	def set_DataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_PrecisionDigits(self, _: int) -> None: ...
	def set_PrecisionType(self, _: pyms_agilent.enums.DisplayPrecisionType) -> None: ...

class IDeviceInfo:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def DeviceName(self) -> str: ...

	@DeviceName.setter
	def DeviceName(self, value: str): ...

	@property
	def DeviceType(self) -> pyms_agilent.enums.DeviceType: ...

	@DeviceType.setter
	def DeviceType(self, value: pyms_agilent.enums.DeviceType): ...

	@property
	def OrdinalNumber(self) -> int: ...

	@OrdinalNumber.setter
	def OrdinalNumber(self, value: int): ...

	def get_DeviceName(self) -> str: ...
	def get_DeviceType(self) -> pyms_agilent.enums.DeviceType: ...
	def get_OrdinalNumber(self) -> int: ...
	def set_DeviceName(self, _: str) -> None: ...
	def set_DeviceType(self, _: pyms_agilent.enums.DeviceType) -> None: ...
	def set_OrdinalNumber(self, _: int) -> None: ...

class DisposableBase:
	def __init__(self, *args, **kwargs) -> None: ...
	def Cleanup(self) -> None: ...
	def Dispose(self) -> None: ...

	@property
	def Disposed(self): ...

	@Disposed.setter
	def Disposed(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...
	def get_Disposed(self) -> bool: ...

class XSamplingType:
	def __init__(self, *args, **kwargs) -> None: ...
	def BoundedRegions(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Continuous(self, *args, **kwargs) -> Any: ...
	def Discontinuous(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Irregular(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SparseStepped(self, *args, **kwargs) -> Any: ...
	def Stepped(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Unspecified(self, *args, **kwargs) -> Any: ...

class IUnitsAndPrecision:
	def __init__(self, *args, **kwargs) -> None: ...
	def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

	@property
	def DataUnit(self): ...

	@DataUnit.setter
	def DataUnit(self, value): ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	def Equals(self, _: IUnitsAndPrecision) -> bool: ...

	@property
	def PrecisionDigits(self): ...

	@PrecisionDigits.setter
	def PrecisionDigits(self, value): ...

	@property
	def PrecisionType(self): ...

	@PrecisionType.setter
	def PrecisionType(self, value): ...

	def get_DataUnit(self) -> pyms_agilent.enums.DataUnit: ...
	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_PrecisionDigits(self) -> int: ...
	def get_PrecisionType(self) -> pyms_agilent.enums.DisplayPrecisionType: ...
	def set_DataUnit(self, _: pyms_agilent.enums.DataUnit) -> None: ...
	def set_DataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_PrecisionDigits(self, _: int) -> None: ...
	def set_PrecisionType(self, _: pyms_agilent.enums.DisplayPrecisionType) -> None: ...

class IReadOnlyObject:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def ReadOnly(self) -> IReadOnlyObject: ...
	def get_IsReadOnly(self) -> bool: ...

class DisplayPrecisionType:
	def __init__(self, *args, **kwargs) -> None: ...
	def CompareTo(self, _: object) -> int: ...
	def DigitsAfterDecimal(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Exponential(self, *args, **kwargs) -> Any: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class IBDAActualData:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def Category(self) -> str: ...

	@Category.setter
	def Category(self, value: str): ...

	@property
	def DataValue(self): ...

	@DataValue.setter
	def DataValue(self, value): ...

	@property
	def DisplayEffectType(self) -> pyms_agilent.enums.DisplayEffectType: ...

	@DisplayEffectType.setter
	def DisplayEffectType(self, value: pyms_agilent.enums.DisplayEffectType): ...

	@property
	def DisplayName(self) -> str: ...

	@DisplayName.setter
	def DisplayName(self, value: str): ...

	@property
	def DisplayValue(self) -> str: ...

	@DisplayValue.setter
	def DisplayValue(self, value: str): ...

	@property
	def InternalName(self) -> str: ...

	@InternalName.setter
	def InternalName(self, value: str): ...

	@property
	def Unit(self) -> str: ...

	@Unit.setter
	def Unit(self, value: str): ...

	def get_Category(self) -> str: ...
	def get_DataValue(self) -> object: ...
	def get_DisplayEffectType(self) -> pyms_agilent.enums.DisplayEffectType: ...
	def get_DisplayName(self) -> str: ...
	def get_DisplayValue(self) -> str: ...
	def get_InternalName(self) -> str: ...
	def get_Unit(self) -> str: ...
	def set_Category(self, _: str) -> None: ...
	def set_DataValue(self, _: object) -> None: ...
	def set_DisplayEffectType(self, _: pyms_agilent.enums.DisplayEffectType) -> None: ...
	def set_DisplayName(self, _: str) -> None: ...
	def set_DisplayValue(self, _: str) -> None: ...
	def set_InternalName(self, _: str) -> None: ...
	def set_Unit(self, _: str) -> None: ...

class IBDASpecFilter:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AverageSpectrum(self) -> bool: ...

	@AverageSpectrum.setter
	def AverageSpectrum(self, value: bool): ...

	@property
	def BackgroundScanRanges(self) -> List[IRange]: ...

	@BackgroundScanRanges.setter
	def BackgroundScanRanges(self, value: List[IRange]): ...

	@property
	def ChromPeakIndex(self) -> int: ...

	@ChromPeakIndex.setter
	def ChromPeakIndex(self, value: int): ...

	def Clone(self) -> IBDASpecFilter: ...

	@property
	def CollisionEnergy(self) -> IRange: ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value: IRange): ...

	@property
	def CompensationField(self): ...

	@CompensationField.setter
	def CompensationField(self, value): ...

	@property
	def DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...

	@DesiredMSStorageType.setter
	def DesiredMSStorageType(self, value: pyms_agilent.enums.DesiredMSStorageType): ...

	@property
	def DeviceName(self) -> str: ...

	@DeviceName.setter
	def DeviceName(self, value: str): ...

	@property
	def DispersionField(self): ...

	@DispersionField.setter
	def DispersionField(self, value): ...

	def Equals(self, other: IBDASpecFilter) -> bool: ...

	@property
	def ExtractByCycle(self) -> bool: ...

	@ExtractByCycle.setter
	def ExtractByCycle(self, value: bool): ...

	@property
	def FragmentorVoltage(self) -> IRange: ...

	@FragmentorVoltage.setter
	def FragmentorVoltage(self, value: IRange): ...

	@property
	def IonPolarityFilter(self) -> pyms_agilent.enums.IonPolarity: ...

	@IonPolarityFilter.setter
	def IonPolarityFilter(self, value: pyms_agilent.enums.IonPolarity): ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@IonizationMode.setter
	def IonizationMode(self, value: pyms_agilent.enums.IonizationMode): ...

	@property
	def MSLevelFilter(self) -> pyms_agilent.enums.MSLevel: ...

	@MSLevelFilter.setter
	def MSLevelFilter(self, value: pyms_agilent.enums.MSLevel): ...

	@property
	def MSScanTypeFilter(self) -> pyms_agilent.enums.MSScanType: ...

	@MSScanTypeFilter.setter
	def MSScanTypeFilter(self, value: pyms_agilent.enums.MSScanType): ...

	@property
	def MassRange(self) -> IRange: ...

	@MassRange.setter
	def MassRange(self, value: IRange): ...

	@property
	def MassUnits(self) -> bool: ...

	@MassUnits.setter
	def MassUnits(self, value: bool): ...

	@property
	def MzOfInterestFilter(self) -> List[IRange]: ...

	@MzOfInterestFilter.setter
	def MzOfInterestFilter(self, value: List[IRange]): ...

	@property
	def OrdinalNumber(self) -> int: ...

	@OrdinalNumber.setter
	def OrdinalNumber(self, value: int): ...

	@property
	def ScaleFactorY(self) -> float: ...

	@ScaleFactorY.setter
	def ScaleFactorY(self, value: float): ...

	@property
	def ScaledAbundanceLimit(self) -> float: ...

	@ScaledAbundanceLimit.setter
	def ScaledAbundanceLimit(self, value: float): ...

	@property
	def ScanIds(self) -> List[int]: ...

	@ScanIds.setter
	def ScanIds(self, value: List[int]): ...

	@property
	def ScanRange(self) -> List[IRange]: ...

	@ScanRange.setter
	def ScanRange(self, value: List[IRange]): ...

	@property
	def SpectrumSubType(self) -> pyms_agilent.enums.SpecSubType: ...

	@SpectrumSubType.setter
	def SpectrumSubType(self, value: pyms_agilent.enums.SpecSubType): ...

	@property
	def SpectrumType(self) -> pyms_agilent.enums.SpecType: ...

	@SpectrumType.setter
	def SpectrumType(self, value: pyms_agilent.enums.SpecType): ...

	@property
	def XClipRanges(self) -> List[IRange]: ...

	@XClipRanges.setter
	def XClipRanges(self, value: List[IRange]): ...

	@property
	def ZeroBoundWhenClipping(self) -> bool: ...

	@ZeroBoundWhenClipping.setter
	def ZeroBoundWhenClipping(self, value: bool): ...

	def get_AverageSpectrum(self) -> bool: ...
	def get_BackgroundScanRanges(self) -> List[IRange]: ...
	def get_ChromPeakIndex(self) -> int: ...
	def get_CollisionEnergy(self) -> IRange: ...
	def get_CompensationField(self) -> IRange: ...
	def get_DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...
	def get_DeviceName(self) -> str: ...
	def get_DispersionField(self) -> IRange: ...
	def get_ExtractByCycle(self) -> bool: ...
	def get_FragmentorVoltage(self) -> IRange: ...
	def get_IonPolarityFilter(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_MSLevelFilter(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanTypeFilter(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MassRange(self) -> IRange: ...
	def get_MassUnits(self) -> bool: ...
	def get_MzOfInterestFilter(self) -> List[IRange]: ...
	def get_OrdinalNumber(self) -> int: ...
	def get_ScaleFactorY(self) -> float: ...
	def get_ScaledAbundanceLimit(self) -> float: ...
	def get_ScanIds(self) -> List[int]: ...
	def get_ScanRange(self) -> List[IRange]: ...
	def get_SpectrumSubType(self) -> pyms_agilent.enums.SpecSubType: ...
	def get_SpectrumType(self) -> pyms_agilent.enums.SpecType: ...
	def get_XClipRanges(self) -> List[IRange]: ...
	def get_ZeroBoundWhenClipping(self) -> bool: ...
	def set_AverageSpectrum(self, _: bool) -> None: ...
	def set_BackgroundScanRanges(self, _: List[IRange]) -> None: ...
	def set_ChromPeakIndex(self, _: int) -> None: ...
	def set_CollisionEnergy(self, _: IRange) -> None: ...
	def set_CompensationField(self, _: IRange) -> None: ...
	def set_DesiredMSStorageType(self, _: pyms_agilent.enums.DesiredMSStorageType) -> None: ...
	def set_DeviceName(self, _: str) -> None: ...
	def set_DispersionField(self, _: IRange) -> None: ...
	def set_ExtractByCycle(self, _: bool) -> None: ...
	def set_FragmentorVoltage(self, _: IRange) -> None: ...
	def set_IonPolarityFilter(self, _: pyms_agilent.enums.IonPolarity) -> None: ...
	def set_IonizationMode(self, _: pyms_agilent.enums.IonizationMode) -> None: ...
	def set_MSLevelFilter(self, _: pyms_agilent.enums.MSLevel) -> None: ...
	def set_MSScanTypeFilter(self, _: pyms_agilent.enums.MSScanType) -> None: ...
	def set_MassRange(self, _: IRange) -> None: ...
	def set_MassUnits(self, _: bool) -> None: ...
	def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...
	def set_OrdinalNumber(self, _: int) -> None: ...
	def set_ScaleFactorY(self, _: float) -> None: ...
	def set_ScaledAbundanceLimit(self, _: float) -> None: ...
	def set_ScanIds(self, _: List[int]) -> None: ...
	def set_ScanRange(self, _: List[IRange]) -> None: ...
	def set_SpectrumSubType(self, _: pyms_agilent.enums.SpecSubType) -> None: ...
	def set_SpectrumType(self, _: pyms_agilent.enums.SpecType) -> None: ...
	def set_XClipRanges(self, _: List[IRange]) -> None: ...
	def set_ZeroBoundWhenClipping(self, _: bool) -> None: ...

class BDAMSScanTypeInformation:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IBDAMSScanTypeInformation:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDAMSScanTypeInformation: ...
	def Contains(self, MzOfInterest: float) -> bool: ...

	@property
	def IonPolarities(self) -> pyms_agilent.enums.IonPolarity: ...

	@property
	def MSScanType(self) -> pyms_agilent.enums.MSScanType: ...

	@property
	def MzOfInterest(self) -> List[float]: ...

	def get_IonPolarities(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_MSScanType(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MzOfInterest(self) -> List[float]: ...

class ICoreList:
	def __init__(self, *args, **kwargs) -> None: ...
	def Add(self, _: Any) -> None: ...
	def AddDelegate(self, _: ChangeNotifyDelegate) -> None: ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clear(self) -> None: ...
	def Clone(self) -> ICoreList: ...
	def Contains(self, _: Any) -> bool: ...
	def CopyTo(self, _: List[Any], __: int) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	def Exists(self, _: System.Predicate) -> bool: ...
	def Find(self, _: System.Predicate) -> Any: ...
	def FindIndex(self, _: System.Predicate) -> int: ...
	def GetEnumerator(self) -> System.Collections.IEnumerator: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IndexOf(self, _: Any) -> int: ...
	def Insert(self, _: int, __: Any) -> None: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def MakeConsistent(self) -> None: ...
	def Remove(self, _: Any) -> bool: ...
	def RemoveAt(self, _: int) -> None: ...
	def RemoveDelegate(self, _: ChangeNotifyDelegate) -> None: ...
	def Reverse(self) -> None: ...
	def Sort(self, _: Any) -> None: ...
	def ToArray(self) -> List[Any]: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_Count(self) -> int: ...
	def get_HasChanged(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Item(self, _: int) -> Any: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_Item(self, _: int, __: Any) -> None: ...

class BDAProgressEventArgs:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def CanCancelTask(self): ...

	@CanCancelTask.setter
	def CanCancelTask(self, value): ...

	def Empty(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def PercentComplete(self): ...

	@PercentComplete.setter
	def PercentComplete(self, value): ...

	@property
	def ProgressStage(self): ...

	@ProgressStage.setter
	def ProgressStage(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def StageMessage(self): ...

	@StageMessage.setter
	def StageMessage(self, value): ...

	def ToString(self) -> str: ...
	def get_CanCancelTask(self) -> bool: ...
	def get_PercentComplete(self) -> int: ...
	def get_ProgressStage(self) -> Any: ...
	def get_StageMessage(self) -> str: ...

class BDASampleData:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDASampleData: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IBDASampleData:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def Category(self) -> pyms_agilent.enums.SampleCategory: ...

	@Category.setter
	def Category(self, value: pyms_agilent.enums.SampleCategory): ...

	@property
	def DataValue(self): ...

	@DataValue.setter
	def DataValue(self, value): ...

	@property
	def DisplayName(self) -> str: ...

	@DisplayName.setter
	def DisplayName(self, value: str): ...

	@property
	def DisplayValue(self) -> str: ...

	@DisplayValue.setter
	def DisplayValue(self, value: str): ...

	@property
	def InternalName(self) -> str: ...

	@InternalName.setter
	def InternalName(self, value: str): ...

	def get_Category(self) -> pyms_agilent.enums.SampleCategory: ...
	def get_DataValue(self) -> object: ...
	def get_DisplayName(self) -> str: ...
	def get_DisplayValue(self) -> str: ...
	def get_InternalName(self) -> str: ...
	def set_Category(self, _: pyms_agilent.enums.SampleCategory) -> None: ...
	def set_DataValue(self, _: object) -> None: ...
	def set_DisplayName(self, _: str) -> None: ...
	def set_DisplayValue(self, _: str) -> None: ...
	def set_InternalName(self, _: str) -> None: ...

class MSScanRecord:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IMSScanRecord:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def BasePeakIntensity(self) -> float: ...

	@property
	def BasePeakMZ(self) -> float: ...

	@property
	def CollisionEnergy(self) -> float: ...

	@property
	def CompensationField(self) -> float: ...

	@property
	def DispersionField(self) -> float: ...

	@property
	def FragmentorVoltage(self) -> float: ...

	@property
	def IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@property
	def IsCollisionEnergyDynamic(self) -> bool: ...

	@property
	def IsFragmentorVoltageDynamic(self) -> bool: ...

	@property
	def MSLevel(self) -> pyms_agilent.enums.MSLevel: ...

	@property
	def MSScanType(self) -> pyms_agilent.enums.MSScanType: ...

	@property
	def MZOfInterest(self) -> float: ...

	@property
	def RetentionTime(self) -> float: ...

	@property
	def ScanID(self): ...

	@property
	def Tic(self) -> float: ...

	@property
	def TimeSegment(self) -> int: ...

	def get_BasePeakIntensity(self) -> float: ...
	def get_BasePeakMZ(self) -> float: ...
	def get_CollisionEnergy(self) -> float: ...
	def get_CompensationField(self) -> float: ...
	def get_DispersionField(self) -> float: ...
	def get_FragmentorVoltage(self) -> float: ...
	def get_IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_IsCollisionEnergyDynamic(self) -> bool: ...
	def get_IsFragmentorVoltageDynamic(self) -> bool: ...
	def get_MSLevel(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanType(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MZOfInterest(self) -> float: ...
	def get_RetentionTime(self) -> float: ...
	def get_ScanID(self) -> int: ...
	def get_Tic(self) -> float: ...
	def get_TimeSegment(self) -> int: ...

class ChangeNotifyDelegate:
	def __init__(self, *args, **kwargs) -> None: ...
	def BeginInvoke(self, _: Any, __: object) -> Any: ...
	def Clone(self) -> object: ...
	def Combine(self, _: Any, __: Any) -> Any: ...
	def CombineImpl(self, _: Any) -> Any: ...

	def CreateDelegate(
			self,
			_: Type,
			__: object,
			___: str,
			____: bool,
			_____: bool,
			) -> Any: ...

	def DynamicInvoke(self, _: List[object]) -> object: ...
	def DynamicInvokeImpl(self, _: List[object]) -> object: ...
	def EndInvoke(self, _: Any) -> None: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetInvocationList(self) -> List[Any]: ...
	def GetMethodImpl(self) -> System.Reflection.MethodInfo: ...

	def GetObjectData(
			self,
			_: System.Runtime.Serialization.SerializationInfo,
			__: System.Runtime.Serialization.StreamingContext,
			) -> None: ...

	def GetType(self) -> Type: ...
	def Invoke(self) -> None: ...
	def MemberwiseClone(self) -> object: ...

	@property
	def Method(self): ...

	@Method.setter
	def Method(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Remove(self, _: Any, __: Any) -> Any: ...
	def RemoveAll(self, _: Any, __: Any) -> Any: ...
	def RemoveImpl(self, _: Any) -> Any: ...

	@property
	def Target(self): ...

	@Target.setter
	def Target(self, value): ...

	def ToString(self) -> str: ...
	def get_Method(self) -> System.Reflection.MethodInfo: ...
	def get_Target(self) -> object: ...
	def op_Equality(self, _: Any, __: Any) -> bool: ...
	def op_Inequality(self, _: Any, __: Any) -> bool: ...

class IMsdrPeakFilter:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AbsoluteThreshold(self) -> float: ...

	@AbsoluteThreshold.setter
	def AbsoluteThreshold(self, value: float): ...

	@property
	def MaxNumPeaks(self) -> int: ...

	@MaxNumPeaks.setter
	def MaxNumPeaks(self, value: int): ...

	@property
	def RelativeThreshold(self) -> float: ...

	@RelativeThreshold.setter
	def RelativeThreshold(self, value: float): ...

	def get_AbsoluteThreshold(self) -> float: ...
	def get_MaxNumPeaks(self) -> int: ...
	def get_RelativeThreshold(self) -> float: ...
	def set_AbsoluteThreshold(self, _: float) -> None: ...
	def set_MaxNumPeaks(self, _: int) -> None: ...
	def set_RelativeThreshold(self, _: float) -> None: ...

class IMsdrChargeStateAssignmentFilter:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AbsoluteTolerance(self) -> float: ...

	@AbsoluteTolerance.setter
	def AbsoluteTolerance(self, value: float): ...

	@property
	def LimitMaxChargeState(self) -> bool: ...

	@LimitMaxChargeState.setter
	def LimitMaxChargeState(self, value: bool): ...

	@property
	def MaximumChargeState(self) -> int: ...

	@MaximumChargeState.setter
	def MaximumChargeState(self, value: int): ...

	@property
	def RelativeTolerance(self) -> int: ...

	@RelativeTolerance.setter
	def RelativeTolerance(self, value: int): ...

	@property
	def RequirePeptideLikeAbundanceProfile(self) -> bool: ...

	@RequirePeptideLikeAbundanceProfile.setter
	def RequirePeptideLikeAbundanceProfile(self, value: bool): ...

	def get_AbsoluteTolerance(self) -> float: ...
	def get_LimitMaxChargeState(self) -> bool: ...
	def get_MaximumChargeState(self) -> int: ...
	def get_RelativeTolerance(self) -> float: ...
	def get_RequirePeptideLikeAbundanceProfile(self) -> bool: ...
	def set_AbsoluteTolerance(self, _: float) -> None: ...
	def set_LimitMaxChargeState(self, _: bool) -> None: ...
	def set_MaximumChargeState(self, _: int) -> None: ...
	def set_RelativeTolerance(self, _: float) -> None: ...
	def set_RequirePeptideLikeAbundanceProfile(self, _: bool) -> None: ...

class CenterWidthPctRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def A(self): ...

	@A.setter
	def A(self, value): ...

	@property
	def B(self): ...

	@B.setter
	def B(self, value): ...

	@property
	def C(self): ...

	@C.setter
	def C(self, value): ...

	@property
	def Center(self): ...

	@Center.setter
	def Center(self, value): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IRange: ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, other: object) -> bool: ...
	def ExtendedValueString(self, withUnits: bool, nValues: int) -> str: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...
	def IsValueWithinRange(self, valToCheck: float) -> bool: ...
	def MakeClone(self) -> IRange: ...
	def MakeConsistent(self) -> None: ...
	def MarkAsChanged(self) -> None: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ToString(self) -> str: ...
	def ValueString(self, _: bool, __: int) -> str: ...

	@property
	def WidthPct(self): ...

	@WidthPct.setter
	def WidthPct(self, value): ...

	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...
	def get_A(self) -> float: ...
	def get_B(self) -> float: ...
	def get_C(self) -> float: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_Start(self) -> float: ...
	def get_WidthPct(self) -> float: ...
	def set_A(self, _: float) -> None: ...
	def set_B(self, _: float) -> None: ...
	def set_C(self, _: float) -> None: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_WidthPct(self, _: float) -> None: ...

class MinMaxRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def A(self): ...

	@A.setter
	def A(self, value): ...

	@property
	def B(self): ...

	@B.setter
	def B(self, value): ...

	@property
	def C(self): ...

	@C.setter
	def C(self, value): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IRange: ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...
	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeClone(self) -> IRange: ...
	def MakeConsistent(self) -> None: ...
	def MarkAsChanged(self) -> None: ...

	@property
	def Max(self): ...

	@Max.setter
	def Max(self, value): ...

	def MemberwiseClone(self) -> object: ...
	def Merge(self, _: IMinMaxRange) -> IMinMaxRange: ...

	@property
	def Min(self): ...

	@Min.setter
	def Min(self, value): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ToString(self) -> str: ...
	def ValueString(self, _: bool, __: int) -> str: ...
	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...
	def get_A(self) -> float: ...
	def get_B(self) -> float: ...
	def get_C(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_Max(self) -> float: ...
	def get_Min(self) -> float: ...
	def get_Start(self) -> float: ...
	def set_A(self, _: float) -> None: ...
	def set_B(self, _: float) -> None: ...
	def set_C(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_Max(self, _: float) -> None: ...
	def set_Min(self, _: float) -> None: ...

class IMinMaxRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IMinMaxRange: ...
	def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

	@property
	def DataUnit(self): ...

	@DataUnit.setter
	def DataUnit(self, value): ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	@property
	def End(self) -> float: ...

	@End.setter
	def End(self, value: float): ...

	def Equals(self, _: IUnitsAndPrecision) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeConsistent(self) -> None: ...

	@property
	def Max(self): ...

	@Max.setter
	def Max(self, value): ...

	def Merge(self, range: IMinMaxRange) -> IMinMaxRange: ...

	@property
	def Min(self) -> float: ...

	@Min.setter
	def Min(self, value: float): ...

	@property
	def PrecisionDigits(self): ...

	@PrecisionDigits.setter
	def PrecisionDigits(self, value): ...

	@property
	def PrecisionType(self): ...

	@PrecisionType.setter
	def PrecisionType(self, value): ...

	def ReadOnly(self) -> IReadOnlyObject: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ValueString(self, _: bool, __: int) -> str: ...
	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_DataUnit(self) -> pyms_agilent.enums.DataUnit: ...
	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_Max(self) -> float: ...
	def get_Min(self) -> float: ...
	def get_PrecisionDigits(self) -> int: ...
	def get_PrecisionType(self) -> pyms_agilent.enums.DisplayPrecisionType: ...
	def get_Start(self) -> float: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_DataUnit(self, _: pyms_agilent.enums.DataUnit) -> None: ...
	def set_DataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_Max(self, _: float) -> None: ...
	def set_Min(self, _: float) -> None: ...
	def set_PrecisionDigits(self, _: int) -> None: ...
	def set_PrecisionType(self, _: pyms_agilent.enums.DisplayPrecisionType) -> None: ...

class ICenterWidthPctRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def Center(self) -> float: ...

	@Center.setter
	def Center(self, value: float): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> ICenterWidthPctRange: ...
	def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

	@property
	def DataUnit(self): ...

	@DataUnit.setter
	def DataUnit(self, value): ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: IUnitsAndPrecision) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeConsistent(self) -> None: ...

	@property
	def PrecisionDigits(self): ...

	@PrecisionDigits.setter
	def PrecisionDigits(self, value): ...

	@property
	def PrecisionType(self): ...

	@PrecisionType.setter
	def PrecisionType(self, value): ...

	def ReadOnly(self) -> IReadOnlyObject: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ValueString(self, _: bool, __: int) -> str: ...

	@property
	def WidthPct(self) -> float: ...

	@WidthPct.setter
	def WidthPct(self, value: float): ...

	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_DataUnit(self) -> pyms_agilent.enums.DataUnit: ...
	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_PrecisionDigits(self) -> int: ...
	def get_PrecisionType(self) -> pyms_agilent.enums.DisplayPrecisionType: ...
	def get_Start(self) -> float: ...
	def get_WidthPct(self) -> float: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_DataUnit(self, _: pyms_agilent.enums.DataUnit) -> None: ...
	def set_DataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_PrecisionDigits(self, _: int) -> None: ...
	def set_PrecisionType(self, _: pyms_agilent.enums.DisplayPrecisionType) -> None: ...
	def set_WidthPct(self, _: float) -> None: ...

class RangeBase:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def A(self): ...

	@A.setter
	def A(self, value): ...

	@property
	def B(self): ...

	@B.setter
	def B(self, value): ...

	@property
	def C(self): ...

	@C.setter
	def C(self, value): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IRange: ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...
	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeClone(self) -> IRange: ...
	def MakeConsistent(self) -> None: ...
	def MarkAsChanged(self) -> None: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ToString(self) -> str: ...
	def ValueString(self, _: bool, __: int) -> str: ...
	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...
	def get_A(self) -> float: ...
	def get_B(self) -> float: ...
	def get_C(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_Start(self) -> float: ...
	def set_A(self, _: float) -> None: ...
	def set_B(self, _: float) -> None: ...
	def set_C(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...

class CenterWidthRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def A(self): ...

	@A.setter
	def A(self, value): ...

	@property
	def B(self): ...

	@B.setter
	def B(self, value): ...

	@property
	def C(self): ...

	@C.setter
	def C(self, value): ...

	@property
	def Center(self): ...

	@Center.setter
	def Center(self, value): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IRange: ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...
	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeClone(self) -> IRange: ...
	def MakeConsistent(self) -> None: ...
	def MarkAsChanged(self) -> None: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ToString(self) -> str: ...
	def ValueString(self, _: bool, __: int) -> str: ...

	@property
	def Width(self): ...

	@Width.setter
	def Width(self, value): ...

	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...
	def get_A(self) -> float: ...
	def get_B(self) -> float: ...
	def get_C(self) -> float: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_Start(self) -> float: ...
	def get_Width(self) -> float: ...
	def set_A(self, _: float) -> None: ...
	def set_B(self, _: float) -> None: ...
	def set_C(self, _: float) -> None: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_Width(self, _: float) -> None: ...

class ICenterWidthRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def Center(self) -> float: ...

	@Center.setter
	def Center(self, value: float): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> ICenterWidthRange: ...
	def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

	@property
	def DataUnit(self): ...

	@DataUnit.setter
	def DataUnit(self, value): ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: IUnitsAndPrecision) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeConsistent(self) -> None: ...

	@property
	def PrecisionDigits(self): ...

	@PrecisionDigits.setter
	def PrecisionDigits(self, value): ...

	@property
	def PrecisionType(self): ...

	@PrecisionType.setter
	def PrecisionType(self, value): ...

	def ReadOnly(self) -> IReadOnlyObject: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ValueString(self, _: bool, __: int) -> str: ...

	@property
	def Width(self) -> float: ...

	@Width.setter
	def Width(self, value: float): ...

	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_DataUnit(self) -> pyms_agilent.enums.DataUnit: ...
	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_PrecisionDigits(self) -> int: ...
	def get_PrecisionType(self) -> pyms_agilent.enums.DisplayPrecisionType: ...
	def get_Start(self) -> float: ...
	def get_Width(self) -> float: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_DataUnit(self, _: pyms_agilent.enums.DataUnit) -> None: ...
	def set_DataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_PrecisionDigits(self, _: int) -> None: ...
	def set_PrecisionType(self, _: pyms_agilent.enums.DisplayPrecisionType) -> None: ...
	def set_Width(self, _: float) -> None: ...

class AsymmetricRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def A(self): ...

	@A.setter
	def A(self, value): ...

	@property
	def B(self): ...

	@B.setter
	def B(self, value): ...

	@property
	def C(self): ...

	@C.setter
	def C(self, value): ...

	@property
	def Center(self): ...

	@Center.setter
	def Center(self, value): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IRange: ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	@property
	def HighSpan(self) -> float: ...

	@HighSpan.setter
	def HighSpan(self, value: float): ...

	def IsEmpty(self) -> bool: ...
	def IsValueWithinRange(self, _: float) -> bool: ...

	@property
	def LowSpan(self): ...

	@LowSpan.setter
	def LowSpan(self, value): ...

	def MakeClone(self) -> IRange: ...
	def MakeConsistent(self) -> None: ...
	def MarkAsChanged(self) -> None: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ToString(self) -> str: ...
	def ValueString(self, _: bool, __: int) -> str: ...
	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...
	def get_A(self) -> float: ...
	def get_B(self) -> float: ...
	def get_C(self) -> float: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_HighSpan(self) -> float: ...
	def get_LowSpan(self) -> float: ...
	def get_Start(self) -> float: ...
	def set_A(self, _: float) -> None: ...
	def set_B(self, _: float) -> None: ...
	def set_C(self, _: float) -> None: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_HighSpan(self, _: float) -> None: ...
	def set_LowSpan(self, _: float) -> None: ...

class IAsymmetricRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def Center(self) -> float: ...

	@Center.setter
	def Center(self, value: float): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IAsymmetricRange: ...
	def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

	@property
	def DataUnit(self): ...

	@DataUnit.setter
	def DataUnit(self, value): ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: IUnitsAndPrecision) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	@property
	def HighSpan(self): ...

	@HighSpan.setter
	def HighSpan(self, value): ...

	def IsEmpty(self) -> bool: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def IsValueWithinRange(self, _: float) -> bool: ...

	@property
	def LowSpan(self) -> float: ...

	@LowSpan.setter
	def LowSpan(self, value: float): ...

	def MakeConsistent(self) -> None: ...

	@property
	def PrecisionDigits(self): ...

	@PrecisionDigits.setter
	def PrecisionDigits(self, value): ...

	@property
	def PrecisionType(self): ...

	@PrecisionType.setter
	def PrecisionType(self, value): ...

	def ReadOnly(self) -> IReadOnlyObject: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ValueString(self, _: bool, __: int) -> str: ...
	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_DataUnit(self) -> pyms_agilent.enums.DataUnit: ...
	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_HighSpan(self) -> float: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_LowSpan(self) -> float: ...
	def get_PrecisionDigits(self) -> int: ...
	def get_PrecisionType(self) -> pyms_agilent.enums.DisplayPrecisionType: ...
	def get_Start(self) -> float: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_DataUnit(self, _: pyms_agilent.enums.DataUnit) -> None: ...
	def set_DataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_HighSpan(self, _: float) -> None: ...
	def set_LowSpan(self, _: float) -> None: ...
	def set_PrecisionDigits(self, _: int) -> None: ...
	def set_PrecisionType(self, _: pyms_agilent.enums.DisplayPrecisionType) -> None: ...

class CenterWidthPpmRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def A(self): ...

	@A.setter
	def A(self, value): ...

	@property
	def B(self): ...

	@B.setter
	def B(self, value): ...

	@property
	def C(self): ...

	@C.setter
	def C(self, value): ...

	@property
	def Center(self): ...

	@Center.setter
	def Center(self, value): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> IRange: ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: object) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...
	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeClone(self) -> IRange: ...
	def MakeConsistent(self) -> None: ...
	def MarkAsChanged(self) -> None: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ToString(self) -> str: ...
	def ValueString(self, _: bool, __: int) -> str: ...

	@property
	def WidthPpm(self): ...

	@WidthPpm.setter
	def WidthPpm(self, value): ...

	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def WriteXmlValues(self, _: System.Xml.XmlWriter) -> None: ...
	def get_A(self) -> float: ...
	def get_B(self) -> float: ...
	def get_C(self) -> float: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_Start(self) -> float: ...
	def get_WidthPpm(self) -> float: ...
	def set_A(self, _: float) -> None: ...
	def set_B(self, _: float) -> None: ...
	def set_C(self, _: float) -> None: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_WidthPpm(self, _: float) -> None: ...

class ICenterWidthPpmRange:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def Center(self) -> float: ...

	@Center.setter
	def Center(self, value: float): ...

	@property
	def CheckingSuspended(self): ...

	@CheckingSuspended.setter
	def CheckingSuspended(self, value): ...

	def Clone(self) -> ICenterWidthPpmRange: ...
	def CopyFrom(self, _: IUnitsAndPrecision) -> None: ...

	@property
	def DataUnit(self): ...

	@DataUnit.setter
	def DataUnit(self, value): ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	@property
	def End(self): ...

	@End.setter
	def End(self, value): ...

	def Equals(self, _: IUnitsAndPrecision) -> bool: ...
	def ExtendedValueString(self, _: bool, __: int) -> str: ...

	@property
	def HasChanged(self): ...

	@HasChanged.setter
	def HasChanged(self, value): ...

	def IsEmpty(self) -> bool: ...

	@property
	def IsReadOnly(self): ...

	@IsReadOnly.setter
	def IsReadOnly(self, value): ...

	def IsValueWithinRange(self, _: float) -> bool: ...
	def MakeConsistent(self) -> None: ...

	@property
	def PrecisionDigits(self): ...

	@PrecisionDigits.setter
	def PrecisionDigits(self, value): ...

	@property
	def PrecisionType(self): ...

	@PrecisionType.setter
	def PrecisionType(self, value): ...

	def ReadOnly(self) -> IReadOnlyObject: ...
	def SetEmpty(self) -> None: ...

	@property
	def Start(self): ...

	@Start.setter
	def Start(self, value): ...

	def ValueString(self, _: bool, __: int) -> str: ...

	@property
	def WidthPpm(self) -> float: ...

	@WidthPpm.setter
	def WidthPpm(self, value: float): ...

	def WriteXml(self, _: System.Xml.XmlWriter) -> None: ...
	def get_Center(self) -> float: ...
	def get_CheckingSuspended(self) -> bool: ...
	def get_DataUnit(self) -> pyms_agilent.enums.DataUnit: ...
	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_End(self) -> float: ...
	def get_HasChanged(self) -> bool: ...
	def get_IsReadOnly(self) -> bool: ...
	def get_PrecisionDigits(self) -> int: ...
	def get_PrecisionType(self) -> pyms_agilent.enums.DisplayPrecisionType: ...
	def get_Start(self) -> float: ...
	def get_WidthPpm(self) -> float: ...
	def set_Center(self, _: float) -> None: ...
	def set_CheckingSuspended(self, _: bool) -> None: ...
	def set_DataUnit(self, _: pyms_agilent.enums.DataUnit) -> None: ...
	def set_DataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_PrecisionDigits(self, _: int) -> None: ...
	def set_PrecisionType(self, _: pyms_agilent.enums.DisplayPrecisionType) -> None: ...
	def set_WidthPpm(self, _: float) -> None: ...

class INonmsDataReader:
	def __init__(self, *args, **kwargs) -> None: ...
	def GetEWC(self, dev: IDeviceInfo, __: IRange, ___: IRange) -> IBDAChromData: ...
	def GetNonmsDevices(self) -> List[IDeviceInfo]: ...
	def GetSignal(self, sig: ISignalInfo) -> IBDAChromData: ...
	def GetSignalInfo(self, dev: IDeviceInfo, type: pyms_agilent.enums.StoredDataType) -> List[ISignalInfo]: ...
	def GetTWC(self, dev: IDeviceInfo) -> IBDAChromData: ...
	def GetUVSpectrum(self, dev: IDeviceInfo, scanRange: IRange) -> List[IBDASpecData]: ...

class IBDASample:
	def __init__(self, *args, **kwargs) -> None: ...
	def GetSampleCollection(self, Category: pyms_agilent.enums.SampleCategory) -> List[IBDASampleData]: ...
	def GetSampleData(self, _: str) -> System.Data.DataSet: ...
	def GetSampleInfo(self, internalNamePrefix: str) -> List[IBDASampleData]: ...
	def GetSampleValue(self, InternalName: str) -> str: ...

class IImsFrameMethod:
	def __init__(self, *args, **kwargs) -> None: ...
	def AddFragEnergySegment(self, driftBin: int, fragmentationEnergy: float) -> None: ...
	def ClearFragEnergySegments(self) -> None: ...
	def Clone(self) -> IImsFrameMethod: ...

	@property
	def DefMassCalId(self) -> int: ...

	@DefMassCalId.setter
	def DefMassCalId(self, value: int): ...

	@property
	def DetectorGainDeltaTo(self) -> float: ...

	@DetectorGainDeltaTo.setter
	def DetectorGainDeltaTo(self, value: float): ...

	@property
	def DetectorGainMode(self) -> pyms_agilent.enums.TofMsProcessingMode: ...

	@DetectorGainMode.setter
	def DetectorGainMode(self, value: pyms_agilent.enums.TofMsProcessingMode): ...

	@property
	def DetectorGainRatio(self) -> float: ...

	@DetectorGainRatio.setter
	def DetectorGainRatio(self, value: float): ...

	@property
	def FragEnergy(self) -> float: ...

	@FragEnergy.setter
	def FragEnergy(self, value: float): ...

	@property
	def FragEnergyMode(self) -> pyms_agilent.enums.FragEnergyMode: ...

	@FragEnergyMode.setter
	def FragEnergyMode(self, value: pyms_agilent.enums.FragEnergyMode): ...

	@property
	def FragEnergySegments(self): ...

	@FragEnergySegments.setter
	def FragEnergySegments(self, value): ...

	@property
	def FragOpMode(self) -> pyms_agilent.enums.FragmentationOpMode: ...

	@FragOpMode.setter
	def FragOpMode(self, value: pyms_agilent.enums.FragmentationOpMode): ...

	@property
	def FrameDtPeriod(self) -> float: ...

	@FrameDtPeriod.setter
	def FrameDtPeriod(self, value: float): ...

	@property
	def FrameIonPolarity(self) -> IonPolarity: ...

	@FrameIonPolarity.setter
	def FrameIonPolarity(self, value: IonPolarity): ...

	@property
	def FrameMethId(self) -> int: ...

	@FrameMethId.setter
	def FrameMethId(self, value: int): ...

	@property
	def FrameMsXPeriod(self) -> float: ...

	@FrameMsXPeriod.setter
	def FrameMsXPeriod(self, value: float): ...

	@property
	def FrameSpecAbundLimit(self) -> float: ...

	@FrameSpecAbundLimit.setter
	def FrameSpecAbundLimit(self, value: float): ...

	@property
	def FrameSpecFmtId(self) -> int: ...

	@FrameSpecFmtId.setter
	def FrameSpecFmtId(self, value: int): ...

	@property
	def FrameType(self) -> pyms_agilent.enums.ImsFrameType: ...

	@FrameType.setter
	def FrameType(self, value: pyms_agilent.enums.ImsFrameType): ...

	@property
	def ImsField(self) -> float: ...

	@ImsField.setter
	def ImsField(self, value: float): ...

	@property
	def ImsGas(self) -> str: ...

	@ImsGas.setter
	def ImsGas(self, value: str): ...

	@property
	def ImsGateMode(self) -> pyms_agilent.enums.ImsGateMode: ...

	@ImsGateMode.setter
	def ImsGateMode(self, value: pyms_agilent.enums.ImsGateMode): ...

	@property
	def ImsGateOpenTime(self) -> float: ...

	@ImsGateOpenTime.setter
	def ImsGateOpenTime(self, value: float): ...

	@property
	def ImsMuxProcessing(self) -> pyms_agilent.enums.ImsMuxProcessing: ...

	@ImsMuxProcessing.setter
	def ImsMuxProcessing(self, value: pyms_agilent.enums.ImsMuxProcessing): ...

	@property
	def ImsMuxSequence(self) -> str: ...

	@ImsMuxSequence.setter
	def ImsMuxSequence(self, value: str): ...

	@property
	def ImsTrapMode(self) -> pyms_agilent.enums.ImsTrapMode: ...

	@ImsTrapMode.setter
	def ImsTrapMode(self, value: pyms_agilent.enums.ImsTrapMode): ...

	@property
	def ImsTrapTime(self) -> float: ...

	@ImsTrapTime.setter
	def ImsTrapTime(self, value: float): ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@IonizationMode.setter
	def IonizationMode(self, value: pyms_agilent.enums.IonizationMode): ...

	@property
	def MaxMsBin(self) -> int: ...

	@MaxMsBin.setter
	def MaxMsBin(self, value: int): ...

	@property
	def MaxMsPerFrame(self) -> int: ...

	@MaxMsPerFrame.setter
	def MaxMsPerFrame(self, value: int): ...

	@property
	def MinMsBin(self) -> int: ...

	@MinMsBin.setter
	def MinMsBin(self, value: int): ...

	@property
	def NumActuals(self) -> int: ...

	@NumActuals.setter
	def NumActuals(self, value: int): ...

	@property
	def NumTransients(self) -> int: ...

	@NumTransients.setter
	def NumTransients(self, value: int): ...

	@property
	def TfsPeakFmtId(self) -> int: ...

	@TfsPeakFmtId.setter
	def TfsPeakFmtId(self, value: int): ...

	@property
	def TfsProfileFmtId(self) -> int: ...

	@TfsProfileFmtId.setter
	def TfsProfileFmtId(self, value: int): ...

	@property
	def TfsStorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...

	@TfsStorageMode.setter
	def TfsStorageMode(self, value: pyms_agilent.enums.MSStorageMode): ...

	@property
	def Threshold(self) -> float: ...

	@Threshold.setter
	def Threshold(self, value: float): ...

	def Validate(self, validationMessage: str) -> bool: ...
	def get_DefMassCalId(self) -> int: ...
	def get_DetectorGainDeltaTo(self) -> float: ...
	def get_DetectorGainMode(self) -> pyms_agilent.enums.TofMsProcessingMode: ...
	def get_DetectorGainRatio(self) -> float: ...
	def get_FragEnergy(self) -> float: ...
	def get_FragEnergyMode(self) -> pyms_agilent.enums.FragEnergyMode: ...
	def get_FragEnergySegments(self) -> List[IFragEnergySegmentEndPoint]: ...
	def get_FragOpMode(self) -> Any: ...
	def get_FrameDtPeriod(self) -> float: ...
	def get_FrameIonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_FrameMethId(self) -> int: ...
	def get_FrameMsXPeriod(self) -> float: ...
	def get_FrameSpecAbundLimit(self) -> float: ...
	def get_FrameSpecFmtId(self) -> int: ...
	def get_FrameType(self) -> pyms_agilent.enums.ImsFrameType: ...
	def get_ImsField(self) -> float: ...
	def get_ImsGas(self) -> str: ...
	def get_ImsGateMode(self) -> pyms_agilent.enums.ImsGateMode: ...
	def get_ImsGateOpenTime(self) -> float: ...
	def get_ImsMuxProcessing(self) -> pyms_agilent.enums.ImsMuxProcessing: ...
	def get_ImsMuxSequence(self) -> str: ...
	def get_ImsTrapMode(self) -> pyms_agilent.enums.ImsTrapMode: ...
	def get_ImsTrapTime(self) -> float: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_MaxMsBin(self) -> int: ...
	def get_MaxMsPerFrame(self) -> int: ...
	def get_MinMsBin(self) -> int: ...
	def get_NumActuals(self) -> int: ...
	def get_NumTransients(self) -> int: ...
	def get_TfsPeakFmtId(self) -> int: ...
	def get_TfsProfileFmtId(self) -> int: ...
	def get_TfsStorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...
	def get_Threshold(self) -> float: ...
	def set_DefMassCalId(self, _: int) -> None: ...
	def set_DetectorGainDeltaTo(self, _: float) -> None: ...
	def set_DetectorGainMode(self, _: pyms_agilent.enums.TofMsProcessingMode) -> None: ...
	def set_DetectorGainRatio(self, _: float) -> None: ...
	def set_FragEnergy(self, _: float) -> None: ...
	def set_FragEnergyMode(self, _: pyms_agilent.enums.FragEnergyMode) -> None: ...
	def set_FragEnergySegments(self, _: List[IFragEnergySegmentEndPoint]) -> None: ...
	def set_FragOpMode(self, _: Any) -> None: ...
	def set_FrameDtPeriod(self, _: float) -> None: ...
	def set_FrameIonPolarity(self, _: pyms_agilent.enums.IonPolarity) -> None: ...
	def set_FrameMethId(self, _: int) -> None: ...
	def set_FrameMsXPeriod(self, _: float) -> None: ...
	def set_FrameSpecAbundLimit(self, _: float) -> None: ...
	def set_FrameSpecFmtId(self, _: int) -> None: ...
	def set_FrameType(self, _: pyms_agilent.enums.ImsFrameType) -> None: ...
	def set_ImsField(self, _: float) -> None: ...
	def set_ImsGas(self, _: str) -> None: ...
	def set_ImsGateMode(self, _: pyms_agilent.enums.ImsGateMode) -> None: ...
	def set_ImsGateOpenTime(self, _: float) -> None: ...
	def set_ImsMuxProcessing(self, _: pyms_agilent.enums.ImsMuxProcessing) -> None: ...
	def set_ImsMuxSequence(self, _: str) -> None: ...
	def set_ImsTrapMode(self, _: pyms_agilent.enums.ImsTrapMode) -> None: ...
	def set_ImsTrapTime(self, _: float) -> None: ...
	def set_IonizationMode(self, _: pyms_agilent.enums.IonizationMode) -> None: ...
	def set_MaxMsBin(self, _: int) -> None: ...
	def set_MaxMsPerFrame(self, _: int) -> None: ...
	def set_MinMsBin(self, _: int) -> None: ...
	def set_NumActuals(self, _: int) -> None: ...
	def set_NumTransients(self, _: int) -> None: ...
	def set_TfsPeakFmtId(self, _: int) -> None: ...
	def set_TfsProfileFmtId(self, _: int) -> None: ...
	def set_TfsStorageMode(self, _: pyms_agilent.enums.MSStorageMode) -> None: ...
	def set_Threshold(self, _: float) -> None: ...

class IBDAUserCalibration:
	def __init__(self, *args, **kwargs) -> None: ...
	def ClearUserCalibration(self) -> None: ...
	def IsUserCalibrationPresent(self) -> bool: ...
	def SaveUserCalibration(self, tofCalib: Any, IonPolarity: IonPolarity) -> None: ...

class IBDADataAccess:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AcquisitionMetaData(self) -> IBDAAcquisitionData: ...

	def ClearScanRejectionFlagValueTable(self) -> None: ...
	def ClearUserCalibration(self) -> None: ...
	def CloseDataFile(self) -> None: ...

	@property
	def DataFileName(self) -> str: ...

	@DataFileName.setter
	def DataFileName(self, value): ...

	@property
	def DesiredMSStorageTypeToUse(self) -> pyms_agilent.enums.DesiredMSStorageType: ...

	@DesiredMSStorageTypeToUse.setter
	def DesiredMSStorageTypeToUse(self, value: pyms_agilent.enums.DesiredMSStorageType): ...

	@property
	def FileInformation(self) -> BDAFileInformation: ...

	def GetActualCollection(self, _: float) -> List[IBDAActualData]: ...
	def GetActualNames(self) -> List[str]: ...
	def GetActualValue(self, _: str, __: List[float], ___: List[float]) -> None: ...
	def GetActuals(self, _: float) -> System.Data.DataSet: ...

	def GetChromatogram(
			self,
			chromFilter: IBDAChromFilter,
			__: List[IRange],
			) -> List[IBDAChromData]: ...

	def GetDataDependentScanInfo(self) -> IBdaMsScanRecordCollection: ...
	def GetElementNameCollection(self, _: int) -> Dict[float, str]: ...
	def GetMSScanInformation(self, retentionTime: float) -> IBDAMSScanFileInformation: ...

	def GetMultipleEicChromatograms(
			self,
			_: IBDAMultiEicParameters,
			) -> List[IBDAChromData]: ...

	def GetSampleCollection(self, _: pyms_agilent.enums.SampleCategory) -> List[IBDASampleData]: ...
	def GetSampleData(self, _: str) -> System.Data.DataSet: ...
	def GetSampleInfo(self, _: str) -> List[IBDASampleData]: ...
	def GetSampleValue(self, _: str) -> str: ...
	def GetScanRecord(self, _: int) -> IBdaMsScanRecInfo: ...
	def GetScanRecordsInfo(self, _: pyms_agilent.enums.MSScanType) -> IBdaMsScanRecordCollection: ...
	def GetTimeSegmentDetails(self, TimeSegmentId: int, numOfScans: int) -> IRange: ...
	def GetTimeSegmentRanges(self) -> List[IRange]: ...
	def GetTimeSegmentsIDArray(self) -> List[int]: ...
	def IsAcquisitionStatusComplete(self) -> bool: ...
	def IsActualsPresent(self) -> bool: ...
	def IsDataDependentScanInfoPresent(self) -> bool: ...
	def IsDataFileOpen(self) -> bool: ...
	def IsUserCalibrationPresent(self) -> bool: ...

	@property
	def MassRangesOverallLimit(self) -> IRange: ...

	def OpenDataFile(self, filename: str, __: bool) -> bool: ...
	def PersistScanRejectionFlagValueTable(self) -> None: ...

	@property
	def QqqAcqMethodReader(self): ...

	@QqqAcqMethodReader.setter
	def QqqAcqMethodReader(self, value): ...

	def ReadSpectrum(self, _: int, __: bool, ___: pyms_agilent.enums.DesiredMSStorageType) -> IBDASpecData: ...
	def ReadSpectrumPair(self, _: IBDAPeakSpectrumParameters) -> List[IBDASpecPair]: ...
	def RefreshDataFile(self, _: bool) -> bool: ...
	def SaveUserCalibration(self, _: Any, __: IonPolarity) -> None: ...

	@property
	def ScanRejectionFlagValueTable(self): ...

	@ScanRejectionFlagValueTable.setter
	def ScanRejectionFlagValueTable(self, value): ...

	@property
	def SchemaDefaultDirectory(self) -> str: ...

	@SchemaDefaultDirectory.setter
	def SchemaDefaultDirectory(self, value: str): ...

	def get_AcquisitionMetaData(self) -> IBDAAcquisitionData: ...
	def get_DataFileName(self) -> str: ...
	def get_DesiredMSStorageTypeToUse(self) -> pyms_agilent.enums.DesiredMSStorageType: ...
	def get_FileInformation(self) -> IBDAFileInformation: ...
	def get_MassRangesOverallLimit(self) -> IRange: ...
	def get_QqqAcqMethodReader(self) -> Any: ...
	def get_ScanRejectionFlagValueTable(self) -> System.Data.DataTable: ...
	def get_SchemaDefaultDirectory(self) -> str: ...
	def set_DesiredMSStorageTypeToUse(self, _: pyms_agilent.enums.DesiredMSStorageType) -> None: ...
	def set_ScanRejectionFlagValueTable(self, _: System.Data.DataTable) -> None: ...
	def set_SchemaDefaultDirectory(self, _: str) -> None: ...

class BDAAcquisitionData:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IBDAAcquisitionData:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def BPMassArray(self) -> List[float]: ...

	@property
	def PointCount(self) -> int: ...

	@property
	def RetentionTimeArray(self) -> List[float]: ...

	def get_BPMassArray(self) -> List[float]: ...
	def get_PointCount(self) -> int: ...
	def get_RetentionTimeArray(self) -> List[float]: ...

class IBDAEvents:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def CancelIndicator(self): ...

	@CancelIndicator.setter
	def CancelIndicator(self, value): ...

	def ProgressEvent(self, *args, **kwargs) -> Any: ...
	def add_ProgressEvent(self, value: BDAProgressEventHandler) -> None: ...
	def get_CancelIndicator(self) -> Any: ...
	def remove_ProgressEvent(self, value: BDAProgressEventHandler) -> None: ...
	def set_CancelIndicator(self, _: Any) -> None: ...

class BDASpecFilterIcp:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDASpecFilter: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ScanMethodNumber(self): ...

	@ScanMethodNumber.setter
	def ScanMethodNumber(self, value): ...

	def ToString(self) -> str: ...
	def get_ScanMethodNumber(self) -> int: ...
	def set_ScanMethodNumber(self, _: int) -> None: ...

class IBDASpecFilterIcp:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AverageSpectrum(self): ...

	@AverageSpectrum.setter
	def AverageSpectrum(self, value): ...

	@property
	def BackgroundScanRanges(self): ...

	@BackgroundScanRanges.setter
	def BackgroundScanRanges(self, value): ...

	@property
	def ChromPeakIndex(self): ...

	@ChromPeakIndex.setter
	def ChromPeakIndex(self, value): ...

	def Clone(self) -> IBDASpecFilter: ...

	@property
	def CollisionEnergy(self): ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value): ...

	@property
	def CompensationField(self): ...

	@CompensationField.setter
	def CompensationField(self, value): ...

	@property
	def DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...

	@DesiredMSStorageType.setter
	def DesiredMSStorageType(self, value: pyms_agilent.enums.DesiredMSStorageType): ...

	@property
	def DeviceName(self): ...

	@DeviceName.setter
	def DeviceName(self, value): ...

	@property
	def DispersionField(self): ...

	@DispersionField.setter
	def DispersionField(self, value): ...

	def Equals(self, other: IBDASpecFilterIcp) -> bool: ...

	@property
	def ExtractByCycle(self): ...

	@ExtractByCycle.setter
	def ExtractByCycle(self, value): ...

	@property
	def FragmentorVoltage(self): ...

	@FragmentorVoltage.setter
	def FragmentorVoltage(self, value): ...

	@property
	def IonPolarityFilter(self): ...

	@IonPolarityFilter.setter
	def IonPolarityFilter(self, value): ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@IonizationMode.setter
	def IonizationMode(self, value: pyms_agilent.enums.IonizationMode): ...

	@property
	def MSLevelFilter(self): ...

	@MSLevelFilter.setter
	def MSLevelFilter(self, value): ...

	@property
	def MSScanTypeFilter(self): ...

	@MSScanTypeFilter.setter
	def MSScanTypeFilter(self, value): ...

	@property
	def MassRange(self): ...

	@MassRange.setter
	def MassRange(self, value): ...

	@property
	def MassUnits(self): ...

	@MassUnits.setter
	def MassUnits(self, value): ...

	@property
	def MzOfInterestFilter(self): ...

	@MzOfInterestFilter.setter
	def MzOfInterestFilter(self, value): ...

	@property
	def OrdinalNumber(self): ...

	@OrdinalNumber.setter
	def OrdinalNumber(self, value): ...

	@property
	def ScaleFactorY(self): ...

	@ScaleFactorY.setter
	def ScaleFactorY(self, value): ...

	@property
	def ScaledAbundanceLimit(self): ...

	@ScaledAbundanceLimit.setter
	def ScaledAbundanceLimit(self, value): ...

	@property
	def ScanIds(self): ...

	@ScanIds.setter
	def ScanIds(self, value): ...

	@property
	def ScanRange(self): ...

	@ScanRange.setter
	def ScanRange(self, value): ...

	@property
	def SpectrumSubType(self): ...

	@SpectrumSubType.setter
	def SpectrumSubType(self, value): ...

	@property
	def SpectrumType(self): ...

	@SpectrumType.setter
	def SpectrumType(self, value): ...

	@property
	def XClipRanges(self): ...

	@XClipRanges.setter
	def XClipRanges(self, value): ...

	@property
	def YDataValueType(self) -> pyms_agilent.enums.DataValueType: ...

	@YDataValueType.setter
	def YDataValueType(self, value: pyms_agilent.enums.DataValueType): ...

	@property
	def ZeroBoundWhenClipping(self): ...

	@ZeroBoundWhenClipping.setter
	def ZeroBoundWhenClipping(self, value): ...

	def get_AverageSpectrum(self) -> bool: ...
	def get_BackgroundScanRanges(self) -> List[IRange]: ...
	def get_ChromPeakIndex(self) -> int: ...
	def get_CollisionEnergy(self) -> IRange: ...
	def get_CompensationField(self) -> IRange: ...
	def get_DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...
	def get_DeviceName(self) -> str: ...
	def get_DispersionField(self) -> IRange: ...
	def get_ExtractByCycle(self) -> bool: ...
	def get_FragmentorVoltage(self) -> IRange: ...
	def get_IonPolarityFilter(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_MSLevelFilter(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanTypeFilter(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MassRange(self) -> IRange: ...
	def get_MassUnits(self) -> bool: ...
	def get_MzOfInterestFilter(self) -> List[IRange]: ...
	def get_OrdinalNumber(self) -> int: ...
	def get_ScaleFactorY(self) -> float: ...
	def get_ScaledAbundanceLimit(self) -> float: ...
	def get_ScanIds(self) -> List[int]: ...
	def get_ScanRange(self) -> List[IRange]: ...
	def get_SpectrumSubType(self) -> pyms_agilent.enums.SpecSubType: ...
	def get_SpectrumType(self) -> pyms_agilent.enums.SpecType: ...
	def get_XClipRanges(self) -> List[IRange]: ...
	def get_YDataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_ZeroBoundWhenClipping(self) -> bool: ...
	def set_AverageSpectrum(self, _: bool) -> None: ...
	def set_BackgroundScanRanges(self, _: List[IRange]) -> None: ...
	def set_ChromPeakIndex(self, _: int) -> None: ...
	def set_CollisionEnergy(self, _: IRange) -> None: ...
	def set_CompensationField(self, _: IRange) -> None: ...
	def set_DesiredMSStorageType(self, _: pyms_agilent.enums.DesiredMSStorageType) -> None: ...
	def set_DeviceName(self, _: str) -> None: ...
	def set_DispersionField(self, _: IRange) -> None: ...
	def set_ExtractByCycle(self, _: bool) -> None: ...
	def set_FragmentorVoltage(self, _: IRange) -> None: ...
	def set_IonPolarityFilter(self, _: pyms_agilent.enums.IonPolarity) -> None: ...
	def set_IonizationMode(self, _: pyms_agilent.enums.IonizationMode) -> None: ...
	def set_MSLevelFilter(self, _: pyms_agilent.enums.MSLevel) -> None: ...
	def set_MSScanTypeFilter(self, _: pyms_agilent.enums.MSScanType) -> None: ...
	def set_MassRange(self, _: IRange) -> None: ...
	def set_MassUnits(self, _: bool) -> None: ...
	def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...
	def set_OrdinalNumber(self, _: int) -> None: ...
	def set_ScaleFactorY(self, _: float) -> None: ...
	def set_ScaledAbundanceLimit(self, _: float) -> None: ...
	def set_ScanIds(self, _: List[int]) -> None: ...
	def set_ScanRange(self, _: List[IRange]) -> None: ...
	def set_SpectrumSubType(self, _: pyms_agilent.enums.SpecSubType) -> None: ...
	def set_SpectrumType(self, _: pyms_agilent.enums.SpecType) -> None: ...
	def set_XClipRanges(self, _: List[IRange]) -> None: ...
	def set_YDataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_ZeroBoundWhenClipping(self, _: bool) -> None: ...

class BDAChromFilterIcp:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDAChromFilter: ...
	def Copy(self, _: BDAChromFilter) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def SmoothFunction(self): ...

	@SmoothFunction.setter
	def SmoothFunction(self, value): ...

	@property
	def SmoothFunctionWidth(self): ...

	@SmoothFunctionWidth.setter
	def SmoothFunctionWidth(self, value): ...

	@property
	def SmoothGaussianWidth(self): ...

	@SmoothGaussianWidth.setter
	def SmoothGaussianWidth(self, value): ...

	@property
	def Smoothed(self): ...

	@Smoothed.setter
	def Smoothed(self, value): ...

	def ToString(self) -> str: ...
	def get_SmoothFunction(self) -> SmoothingFunctionType: ...
	def get_SmoothFunctionWidth(self) -> int: ...
	def get_SmoothGaussianWidth(self) -> float: ...
	def get_Smoothed(self) -> bool: ...
	def set_SmoothFunction(self, _: SmoothingFunctionType) -> None: ...
	def set_SmoothFunctionWidth(self, _: int) -> None: ...
	def set_SmoothGaussianWidth(self, _: float) -> None: ...
	def set_Smoothed(self, _: bool) -> None: ...

class IBDAChromFilterIcp:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def ChargeStateLimits(self): ...

	@ChargeStateLimits.setter
	def ChargeStateLimits(self, value): ...

	@property
	def ChromatogramSubType(self): ...

	@ChromatogramSubType.setter
	def ChromatogramSubType(self, value): ...

	@property
	def ChromatogramType(self): ...

	@ChromatogramType.setter
	def ChromatogramType(self, value): ...

	def Clone(self) -> IBDAChromFilterIcp: ...

	@property
	def CollisionEnergy(self): ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value): ...

	@property
	def CompensationField(self): ...

	@CompensationField.setter
	def CompensationField(self, value): ...

	@property
	def Description(self): ...

	@Description.setter
	def Description(self, value): ...

	@property
	def DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...

	@DesiredMSStorageType.setter
	def DesiredMSStorageType(self, value: pyms_agilent.enums.DesiredMSStorageType): ...

	@property
	def DeviceName(self): ...

	@DeviceName.setter
	def DeviceName(self, value): ...

	@property
	def DispersionField(self): ...

	@DispersionField.setter
	def DispersionField(self, value): ...

	@property
	def DoCycleSum(self): ...

	@DoCycleSum.setter
	def DoCycleSum(self, value): ...

	@property
	def ExtractOneChromatogramPerScanSegment(self): ...

	@ExtractOneChromatogramPerScanSegment.setter
	def ExtractOneChromatogramPerScanSegment(self, value): ...

	@property
	def FragmentorVoltage(self): ...

	@FragmentorVoltage.setter
	def FragmentorVoltage(self, value): ...

	@property
	def IncludeMassRanges(self): ...

	@IncludeMassRanges.setter
	def IncludeMassRanges(self, value): ...

	@property
	def Integrate(self): ...

	@Integrate.setter
	def Integrate(self, value): ...

	@property
	def IonPolarityFilter(self): ...

	@IonPolarityFilter.setter
	def IonPolarityFilter(self, value): ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@IonizationMode.setter
	def IonizationMode(self, value: pyms_agilent.enums.IonizationMode): ...

	@property
	def MSLevelFilter(self): ...

	@MSLevelFilter.setter
	def MSLevelFilter(self, value): ...

	@property
	def MSScanTypeFilter(self): ...

	@MSScanTypeFilter.setter
	def MSScanTypeFilter(self, value): ...

	@property
	def MzOfInterestFilter(self): ...

	@MzOfInterestFilter.setter
	def MzOfInterestFilter(self, value): ...

	@property
	def OrdinalNumber(self): ...

	@OrdinalNumber.setter
	def OrdinalNumber(self, value): ...

	@property
	def ReferenceWavelength(self): ...

	@ReferenceWavelength.setter
	def ReferenceWavelength(self, value): ...

	@property
	def ScanRange(self): ...

	@ScanRange.setter
	def ScanRange(self, value): ...

	@property
	def ScanSegmentNumber(self): ...

	@ScanSegmentNumber.setter
	def ScanSegmentNumber(self, value): ...

	@property
	def SignalDescription(self): ...

	@SignalDescription.setter
	def SignalDescription(self, value): ...

	@property
	def SignalName(self): ...

	@SignalName.setter
	def SignalName(self, value): ...

	@property
	def SignalWavelength(self): ...

	@SignalWavelength.setter
	def SignalWavelength(self, value): ...

	@property
	def SingleChromatogramForAllMasses(self): ...

	@SingleChromatogramForAllMasses.setter
	def SingleChromatogramForAllMasses(self, value): ...

	@property
	def UseReference(self): ...

	@UseReference.setter
	def UseReference(self, value): ...

	@property
	def YDataValueType(self) -> pyms_agilent.enums.DataValueType: ...

	@YDataValueType.setter
	def YDataValueType(self, value: pyms_agilent.enums.DataValueType): ...

	@property
	def YValueInCounts(self): ...

	@YValueInCounts.setter
	def YValueInCounts(self, value): ...

	def get_ChargeStateLimits(self) -> IRange: ...
	def get_ChromatogramSubType(self) -> pyms_agilent.enums.ChromSubType: ...
	def get_ChromatogramType(self) -> pyms_agilent.enums.ChromType: ...
	def get_CollisionEnergy(self) -> IRange: ...
	def get_CompensationField(self) -> IRange: ...
	def get_Description(self) -> str: ...
	def get_DesiredMSStorageType(self) -> pyms_agilent.enums.DesiredMSStorageType: ...
	def get_DeviceName(self) -> str: ...
	def get_DispersionField(self) -> IRange: ...
	def get_DoCycleSum(self) -> bool: ...
	def get_ExtractOneChromatogramPerScanSegment(self) -> bool: ...
	def get_FragmentorVoltage(self) -> IRange: ...
	def get_IncludeMassRanges(self) -> List[IRange]: ...
	def get_Integrate(self) -> bool: ...
	def get_IonPolarityFilter(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_MSLevelFilter(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MSScanTypeFilter(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MzOfInterestFilter(self) -> List[IRange]: ...
	def get_OrdinalNumber(self) -> int: ...
	def get_ReferenceWavelength(self) -> IRange: ...
	def get_ScanRange(self) -> IRange: ...
	def get_ScanSegmentNumber(self) -> IRange: ...
	def get_SignalDescription(self) -> str: ...
	def get_SignalName(self) -> str: ...
	def get_SignalWavelength(self) -> IRange: ...
	def get_SingleChromatogramForAllMasses(self) -> bool: ...
	def get_UseReference(self) -> bool: ...
	def get_YDataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_YValueInCounts(self) -> bool: ...
	def set_ChargeStateLimits(self, _: IRange) -> None: ...
	def set_ChromatogramSubType(self, _: pyms_agilent.enums.ChromSubType) -> None: ...
	def set_ChromatogramType(self, _: pyms_agilent.enums.ChromType) -> None: ...
	def set_CollisionEnergy(self, _: IRange) -> None: ...
	def set_CompensationField(self, _: IRange) -> None: ...
	def set_Description(self, _: str) -> None: ...
	def set_DesiredMSStorageType(self, _: pyms_agilent.enums.DesiredMSStorageType) -> None: ...
	def set_DeviceName(self, _: str) -> None: ...
	def set_DispersionField(self, _: IRange) -> None: ...
	def set_DoCycleSum(self, _: bool) -> None: ...
	def set_ExtractOneChromatogramPerScanSegment(self, _: bool) -> None: ...
	def set_FragmentorVoltage(self, _: IRange) -> None: ...
	def set_IncludeMassRanges(self, _: List[IRange]) -> None: ...
	def set_Integrate(self, _: bool) -> None: ...
	def set_IonPolarityFilter(self, _: pyms_agilent.enums.IonPolarity) -> None: ...
	def set_IonizationMode(self, _: pyms_agilent.enums.IonizationMode) -> None: ...
	def set_MSLevelFilter(self, _: pyms_agilent.enums.MSLevel) -> None: ...
	def set_MSScanTypeFilter(self, _: pyms_agilent.enums.MSScanType) -> None: ...
	def set_MzOfInterestFilter(self, _: List[IRange]) -> None: ...
	def set_OrdinalNumber(self, _: int) -> None: ...
	def set_ReferenceWavelength(self, _: IRange) -> None: ...
	def set_ScanRange(self, _: IRange) -> None: ...
	def set_ScanSegmentNumber(self, _: IRange) -> None: ...
	def set_SignalDescription(self, _: str) -> None: ...
	def set_SignalName(self, _: str) -> None: ...
	def set_SignalWavelength(self, _: IRange) -> None: ...
	def set_SingleChromatogramForAllMasses(self, _: bool) -> None: ...
	def set_UseReference(self, _: bool) -> None: ...
	def set_YDataValueType(self, _: pyms_agilent.enums.DataValueType) -> None: ...
	def set_YValueInCounts(self, _: bool) -> None: ...

class IBDAReadChromatogram:
	def __init__(self, *args, **kwargs) -> None: ...

	def GetChromatogram(
			self,
			chromFilter: IBDAChromFilter,
			excludeMassArray: List[IRange] = ...,
			) -> List[IBDAChromData]: ...

	def GetMultipleEicChromatograms(
			self,
			mutltiEicParams: IBDAMultiEicParameters,
			) -> List[IBDAChromData]: ...

class IBDAReadSpectra:
	def __init__(self, *args, **kwargs) -> None: ...

	@overload
	def ReadSpectrum(self, specRequest: IBDASpecFilter, apseParameters: IBDAPeakSpecFilter) -> List[IBDASpecData]: ...

	@overload
	def ReadSpectrum(self, spectrumRequest: IBDASpecFilter) -> List[IBDASpecData]: ...

	@overload
	def ReadSpectrum(
			self,
			spectrumRequest: IBDASpecFilter,
			startRange: IRange,
			endRange: IRange,
			) -> List[IBDASpecData]: ...

	@overload
	def ReadSpectrum(self, rowIndex: int, MassUnits: bool) -> IBDASpecData: ...

	@overload
	def ReadSpectrum(
			self,
			rowIndex: int,
			MassUnits: bool,
			desiredStorageMode: pyms_agilent.enums.DesiredMSStorageType,
			) -> IBDASpecData: ...

	def ReadSpectrumPair(self, _: IBDAPeakSpectrumParameters) -> List[IBDASpecPair]: ...

class BDAPeakSpecFilter:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IBDAPeakSpecFilter:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AvoidReturningEmtpySpectrum(self) -> bool: ...

	@AvoidReturningEmtpySpectrum.setter
	def AvoidReturningEmtpySpectrum(self, value: bool): ...

	@property
	def BackgroundRtRange(self) -> IRange: ...

	@BackgroundRtRange.setter
	def BackgroundRtRange(self, value: IRange): ...

	@property
	def BackgroundSource(self) -> pyms_agilent.enums.ApseBackgroundSource: ...

	@BackgroundSource.setter
	def BackgroundSource(self, value: pyms_agilent.enums.ApseBackgroundSource): ...

	def Clone(self) -> IBDAPeakSpecFilter: ...

	@property
	def GetSaturationMzRangesFromChromatogram(self) -> bool: ...

	@GetSaturationMzRangesFromChromatogram.setter
	def GetSaturationMzRangesFromChromatogram(self, value: bool): ...

	@property
	def PeakHeightThreshold(self) -> float: ...

	@PeakHeightThreshold.setter
	def PeakHeightThreshold(self, value: float): ...

	@property
	def TofSaturationMzRanges(self) -> List[IRange]: ...

	@TofSaturationMzRanges.setter
	def TofSaturationMzRanges(self, value: List[IRange]): ...

	@property
	def TofSaturationThreshold(self) -> float: ...

	@TofSaturationThreshold.setter
	def TofSaturationThreshold(self, value: float): ...

	@property
	def UseApexScan(self) -> bool: ...

	@UseApexScan.setter
	def UseApexScan(self, value: bool): ...

	@property
	def UseTofSaturationFilter(self) -> bool: ...

	@UseTofSaturationFilter.setter
	def UseTofSaturationFilter(self, value: bool): ...

	@property
	def UseTofSaturationMzRange(self) -> bool: ...

	@UseTofSaturationMzRange.setter
	def UseTofSaturationMzRange(self, value: bool): ...

	def get_AvoidReturningEmtpySpectrum(self) -> bool: ...
	def get_BackgroundRtRange(self) -> IRange: ...
	def get_BackgroundSource(self) -> pyms_agilent.enums.ApseBackgroundSource: ...
	def get_GetSaturationMzRangesFromChromatogram(self) -> bool: ...
	def get_PeakHeightThreshold(self) -> float: ...
	def get_TofSaturationMzRanges(self) -> List[IRange]: ...
	def get_TofSaturationThreshold(self) -> float: ...
	def get_UseApexScan(self) -> bool: ...
	def get_UseTofSaturationFilter(self) -> bool: ...
	def get_UseTofSaturationMzRange(self) -> bool: ...
	def set_AvoidReturningEmtpySpectrum(self, _: bool) -> None: ...
	def set_BackgroundRtRange(self, _: IRange) -> None: ...
	def set_BackgroundSource(self, _: pyms_agilent.enums.ApseBackgroundSource) -> None: ...
	def set_GetSaturationMzRangesFromChromatogram(self, _: bool) -> None: ...
	def set_PeakHeightThreshold(self, _: float) -> None: ...
	def set_TofSaturationMzRanges(self, _: List[IRange]) -> None: ...
	def set_TofSaturationThreshold(self, _: float) -> None: ...
	def set_UseApexScan(self, _: bool) -> None: ...
	def set_UseTofSaturationFilter(self, _: bool) -> None: ...
	def set_UseTofSaturationMzRange(self, _: bool) -> None: ...

class IBDAPeak:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def BasePeakMass(self) -> float: ...

	@BasePeakMass.getter
	def BasePeakMass(self, value: float): ...

	@property
	def CenterX(self) -> float: ...

	@CenterX.getter
	def CenterX(self, value: float): ...

	@property
	def CenterY(self) -> float: ...

	@CenterY.getter
	def CenterY(self, value: float): ...

	@property
	def ChargeState(self) -> int: ...

	@ChargeState.getter
	def ChargeState(self, value: int): ...

	@property
	def EndBaselineY(self) -> float: ...

	@EndBaselineY.getter
	def EndBaselineY(self, value: float): ...

	@property
	def Height(self) -> float: ...

	@Height.getter
	def Height(self, value: float): ...

	@property
	def StartBaselineY(self, ) -> float: ...

	@StartBaselineY.getter
	def StartBaselineY(self, value: float): ...

	def get_BasePeakMass(self) -> float: ...
	def get_CenterX(self) -> float: ...
	def get_CenterY(self) -> float: ...
	def get_ChargeState(self) -> int: ...
	def get_EndBaselineY(self) -> float: ...
	def get_Height(self) -> float: ...
	def get_StartBaselineY(self) -> float: ...
	def set_BasePeakMass(self, _: float) -> None: ...
	def set_CenterX(self, _: float) -> None: ...
	def set_CenterY(self, _: float) -> None: ...
	def set_ChargeState(self, _: int) -> None: ...
	def set_EndBaselineY(self, _: float) -> None: ...
	def set_Height(self, _: float) -> None: ...
	def set_StartBaselineY(self, _: float) -> None: ...

class IBdaMsScanRecordCollection:
	def __init__(self, *args, **kwargs) -> None: ...
	def ChildMsScanMzOfInterest(self, _: int) -> List[float]: ...
	def ChildMsScans(self, _: int) -> List[IBdaMsScanRecInfo]: ...
	def Clear(self) -> None: ...

	@property
	def Count(self): ...

	@Count.setter
	def Count(self, value): ...

	@property
	def Enumerator(self): ...

	@Enumerator.setter
	def Enumerator(self, value): ...

	def IndexOf(self, _: IBdaMsScanRecInfo) -> int: ...
	def ItemForIndex(self, _: int) -> IBdaMsScanRecInfo: ...

	@property
	def Keys(self): ...

	@Keys.setter
	def Keys(self, value): ...

	def Select(
			self,
			_: pyms_agilent.enums.IonPolarity,
			__: pyms_agilent.enums.MSLevel,
			___: List[IRange],
			) -> List[IBdaMsScanRecInfo]: ...

	def TryGetValue(self, _: int, __: IBdaMsScanRecInfo) -> bool: ...

	@property
	def Values(self): ...

	@Values.setter
	def Values(self, value): ...

	def get_Count(self) -> int: ...
	def get_Enumerator(self) -> Any: ...
	def get_Keys(self) -> Any: ...
	def get_Values(self) -> Any: ...

class IBDAMultiEicParameters:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AsymmetricMzWidthHigh(self): ...

	@AsymmetricMzWidthHigh.setter
	def AsymmetricMzWidthHigh(self, value): ...

	@property
	def AsymmetricMzWidthLow(self): ...

	@AsymmetricMzWidthLow.setter
	def AsymmetricMzWidthLow(self, value): ...

	@property
	def ChromFilter(self): ...

	@ChromFilter.setter
	def ChromFilter(self, value): ...

	@property
	def EicRtMzList(self): ...

	@EicRtMzList.setter
	def EicRtMzList(self, value): ...

	@property
	def MzExpansionMode(self): ...

	@MzExpansionMode.setter
	def MzExpansionMode(self, value): ...

	@property
	def SingleMzExpansionWidth(self): ...

	@SingleMzExpansionWidth.setter
	def SingleMzExpansionWidth(self, value): ...

	@property
	def SinglePpmExpansionWidth(self): ...

	@SinglePpmExpansionWidth.setter
	def SinglePpmExpansionWidth(self, value): ...

	def get_AsymmetricMzWidthHigh(self) -> float: ...
	def get_AsymmetricMzWidthLow(self) -> float: ...
	def get_ChromFilter(self) -> IBDAChromFilter: ...
	def get_EicRtMzList(self) -> List[IEicRtMzRanges]: ...
	def get_MzExpansionMode(self) -> Any: ...
	def get_SingleMzExpansionWidth(self) -> float: ...
	def get_SinglePpmExpansionWidth(self) -> float: ...
	def set_AsymmetricMzWidthHigh(self, _: float) -> None: ...
	def set_AsymmetricMzWidthLow(self, _: float) -> None: ...
	def set_ChromFilter(self, _: IBDAChromFilter) -> None: ...
	def set_EicRtMzList(self, _: List[IEicRtMzRanges]) -> None: ...
	def set_MzExpansionMode(self, _: Any) -> None: ...
	def set_SingleMzExpansionWidth(self, _: float) -> None: ...
	def set_SinglePpmExpansionWidth(self, _: float) -> None: ...

class IBDAPeakSpectrumParameters:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def ChromPeak(self): ...

	@ChromPeak.setter
	def ChromPeak(self, value): ...

	@property
	def ChromXArray(self): ...

	@ChromXArray.setter
	def ChromXArray(self, value): ...

	@property
	def ChromYArray(self): ...

	@ChromYArray.setter
	def ChromYArray(self, value): ...

	@property
	def NextChromPeak(self): ...

	@NextChromPeak.setter
	def NextChromPeak(self, value): ...

	@property
	def PeakIndex(self): ...

	@PeakIndex.setter
	def PeakIndex(self, value): ...

	@property
	def PeakSpecFilter(self): ...

	@PeakSpecFilter.setter
	def PeakSpecFilter(self, value): ...

	@property
	def PrevChromPeak(self): ...

	@PrevChromPeak.setter
	def PrevChromPeak(self, value): ...

	def SetChromXYData(self, _: List[float], __: List[float]) -> None: ...

	@property
	def SpecFilter(self): ...

	@SpecFilter.setter
	def SpecFilter(self, value): ...

	def get_ChromPeak(self) -> ILwChromPeak: ...
	def get_ChromXArray(self) -> List[float]: ...
	def get_ChromYArray(self) -> List[float]: ...
	def get_NextChromPeak(self) -> ILwChromPeak: ...
	def get_PeakIndex(self) -> int: ...
	def get_PeakSpecFilter(self) -> IBDAPeakSpecFilter: ...
	def get_PrevChromPeak(self) -> ILwChromPeak: ...
	def get_SpecFilter(self) -> IBDASpecFilter: ...
	def set_ChromPeak(self, _: ILwChromPeak) -> None: ...
	def set_NextChromPeak(self, _: ILwChromPeak) -> None: ...
	def set_PeakIndex(self, _: int) -> None: ...
	def set_PeakSpecFilter(self, _: IBDAPeakSpecFilter) -> None: ...
	def set_PrevChromPeak(self, _: ILwChromPeak) -> None: ...
	def set_SpecFilter(self, _: IBDASpecFilter) -> None: ...

class IBDASpecPair:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def Final(self): ...

	@Final.setter
	def Final(self, value): ...

	@property
	def Foreground(self): ...

	@Foreground.setter
	def Foreground(self, value): ...

	def get_Final(self) -> IBDASpecData: ...
	def get_Foreground(self) -> IBDASpecData: ...
	def set_Final(self, _: IBDASpecData) -> None: ...
	def set_Foreground(self, _: IBDASpecData) -> None: ...

class ILwChromPeak:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def ApexY(self): ...

	@ApexY.setter
	def ApexY(self, value): ...

	@property
	def Area(self): ...

	@Area.setter
	def Area(self, value): ...

	@property
	def BaseEndFlag(self): ...

	@BaseEndFlag.setter
	def BaseEndFlag(self, value): ...

	@property
	def BaseEndY(self): ...

	@BaseEndY.setter
	def BaseEndY(self, value): ...

	@property
	def BaseStartFlag(self): ...

	@BaseStartFlag.setter
	def BaseStartFlag(self, value): ...

	@property
	def BaseStartY(self): ...

	@BaseStartY.setter
	def BaseStartY(self, value): ...

	@property
	def Base1EndX(self): ...

	@Base1EndX.setter
	def Base1EndX(self, value): ...

	@property
	def Base1StartX(self): ...

	@Base1StartX.setter
	def Base1StartX(self, value): ...

	@property
	def Base2EndX(self): ...

	@Base2EndX.setter
	def Base2EndX(self, value): ...

	@property
	def Base2StartX(self): ...

	@Base2StartX.setter
	def Base2StartX(self, value): ...

	@property
	def CenterX(self): ...

	@CenterX.setter
	def CenterX(self, value): ...

	def Clone(self) -> ILwChromPeak: ...

	@property
	def EndIndex(self): ...

	@EndIndex.setter
	def EndIndex(self, value): ...

	@property
	def EndX(self): ...

	@EndX.setter
	def EndX(self, value): ...

	@property
	def EndY(self): ...

	@EndY.setter
	def EndY(self, value): ...

	@property
	def Fwhm(self): ...

	@Fwhm.setter
	def Fwhm(self, value): ...

	def HasValue(self, _: LwPeakAttribute) -> bool: ...

	@property
	def Height(self): ...

	@Height.setter
	def Height(self, value): ...

	@property
	def StartIndex(self): ...

	@StartIndex.setter
	def StartIndex(self, value): ...

	@property
	def StartX(self): ...

	@StartX.setter
	def StartX(self, value): ...

	@property
	def StartY(self): ...

	@StartY.setter
	def StartY(self, value): ...

	@property
	def Warning(self): ...

	@Warning.setter
	def Warning(self, value): ...

	def get_ApexY(self) -> float: ...
	def get_Area(self) -> float: ...
	def get_BaseEndFlag(self) -> LwPeakEndFlags: ...
	def get_BaseEndY(self) -> float: ...
	def get_BaseStartFlag(self) -> LwPeakEndFlags: ...
	def get_BaseStartY(self) -> float: ...
	def get_Base1EndX(self) -> float: ...
	def get_Base1StartX(self) -> float: ...
	def get_Base2EndX(self) -> float: ...
	def get_Base2StartX(self) -> float: ...
	def get_CenterX(self) -> float: ...
	def get_EndIndex(self) -> int: ...
	def get_EndX(self) -> float: ...
	def get_EndY(self) -> float: ...
	def get_Fwhm(self) -> float: ...
	def get_Height(self) -> float: ...
	def get_StartIndex(self) -> int: ...
	def get_StartX(self) -> float: ...
	def get_StartY(self) -> float: ...
	def get_Warning(self) -> LwPeakWarning: ...
	def set_ApexY(self, _: float) -> None: ...
	def set_Area(self, _: float) -> None: ...
	def set_BaseEndFlag(self, _: LwPeakEndFlags) -> None: ...
	def set_BaseEndY(self, _: float) -> None: ...
	def set_BaseStartFlag(self, _: LwPeakEndFlags) -> None: ...
	def set_BaseStartY(self, _: float) -> None: ...
	def set_Base1EndX(self, _: float) -> None: ...
	def set_Base1StartX(self, _: float) -> None: ...
	def set_Base2EndX(self, _: float) -> None: ...
	def set_Base2StartX(self, _: float) -> None: ...
	def set_CenterX(self, _: float) -> None: ...
	def set_EndIndex(self, _: int) -> None: ...
	def set_EndX(self, _: float) -> None: ...
	def set_EndY(self, _: float) -> None: ...
	def set_Fwhm(self, _: float) -> None: ...
	def set_Height(self, _: float) -> None: ...
	def set_StartIndex(self, _: int) -> None: ...
	def set_StartX(self, _: float) -> None: ...
	def set_StartY(self, _: float) -> None: ...
	def set_Warning(self, _: LwPeakWarning) -> None: ...

class BDAPeak:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IImsFrameRecord:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def ActualsOffset(self) -> int: ...

	@ActualsOffset.setter
	def ActualsOffset(self, value: int): ...

	def AddScanRecordReference(self, scanRecord: IImsScanRecord) -> None: ...
	def Clone(self) -> IImsFrameRecord: ...

	@property
	def ComDummy_ScanRecordDriftBinList(self) -> int: ...

	@property
	def ComDummy_ScanRecordsByBin(self) -> int: ...

	@property
	def CycleNumber(self) -> int: ...

	@CycleNumber.setter
	def CycleNumber(self, value: int): ...

	@property
	def FirstNonzeroDriftBin(self) -> int: ...

	@FirstNonzeroDriftBin.setter
	def FirstNonzeroDriftBin(self, value: int): ...

	@property
	def FragClass(self) -> pyms_agilent.enums.FragmentationClass: ...

	@FragClass.setter
	def FragClass(self, value: pyms_agilent.enums.FragmentationClass): ...

	@property
	def FragEnergy(self) -> float: ...

	@FragEnergy.setter
	def FragEnergy(self, value: float): ...

	@property
	def FrameBaseAbund(self) -> float: ...

	@FrameBaseAbund.setter
	def FrameBaseAbund(self, value: float): ...

	@property
	def FrameBaseDriftBin(self) -> int: ...

	@FrameBaseDriftBin.setter
	def FrameBaseDriftBin(self, value: int): ...

	@property
	def FrameBaseMsBin(self) -> int: ...

	@FrameBaseMsBin.setter
	def FrameBaseMsBin(self, value: int): ...

	@property
	def FrameId(self) -> int: ...

	@FrameId.setter
	def FrameId(self, value: int): ...

	@property
	def FrameMethod(self) -> IImsFrameMethod: ...

	@FrameMethod.setter
	def FrameMethod(self, value: IImsFrameMethod): ...

	@property
	def FrameMethodId(self) -> int: ...

	@FrameMethodId.setter
	def FrameMethodId(self, value: int): ...

	@property
	def FrameScanTime(self) -> float: ...

	@FrameScanTime.setter
	def FrameScanTime(self, value: float): ...

	@property
	def FrameSpecAbundLimit(self) -> float: ...

	@FrameSpecAbundLimit.setter
	def FrameSpecAbundLimit(self, value: float): ...

	@property
	def FrameTic(self) -> float: ...

	@FrameTic.setter
	def FrameTic(self, value: float): ...

	@property
	def ImsField(self) -> float: ...

	@ImsField.setter
	def ImsField(self, value: float): ...

	@property
	def ImsPressure(self) -> float: ...

	@ImsPressure.setter
	def ImsPressure(self, value: float): ...

	@property
	def ImsTemperature(self) -> float: ...

	@ImsTemperature.setter
	def ImsTemperature(self, value: float): ...

	@property
	def ImsTrapPressure(self) -> float: ...

	@ImsTrapPressure.setter
	def ImsTrapPressure(self, value: float): ...

	@property
	def ImsTrapTime(self) -> float: ...

	@ImsTrapTime.setter
	def ImsTrapTime(self, value: float): ...

	@property
	def IsolationEndMz(self) -> float: ...

	@IsolationEndMz.setter
	def IsolationEndMz(self, value: float): ...

	@property
	def IsolationMz(self) -> float: ...

	@IsolationMz.setter
	def IsolationMz(self, value: float): ...

	@property
	def IsolationStartMz(self) -> float: ...

	@IsolationStartMz.setter
	def IsolationStartMz(self, value: float): ...

	@property
	def IsolationZ(self) -> int: ...

	@IsolationZ.setter
	def IsolationZ(self, value: int): ...

	@property
	def LastNonzeroDriftBin(self) -> int: ...

	@LastNonzeroDriftBin.setter
	def LastNonzeroDriftBin(self, value: int): ...

	@property
	def MassCalOffset(self) -> int: ...

	@MassCalOffset.setter
	def MassCalOffset(self, value: int): ...

	@property
	def NumTransients(self) -> int: ...

	@NumTransients.setter
	def NumTransients(self, value: int): ...

	def ScanRecordByBin(self, driftBin: int) -> IImsScanRecord: ...

	@property
	def ScanRecordDriftBinList(self): ...

	@ScanRecordDriftBinList.setter
	def ScanRecordDriftBinList(self, value): ...

	def ScanRecordsByBin(self, _: List[int]) -> List[IImsScanRecord]: ...

	@property
	def TimeSegmentId(self) -> int: ...

	@TimeSegmentId.setter
	def TimeSegmentId(self, value: int): ...

	def get_ActualsOffset(self) -> int: ...
	def get_ComDummy_ScanRecordDriftBinList(self) -> int: ...
	def get_ComDummy_ScanRecordsByBin(self) -> int: ...
	def get_CycleNumber(self) -> int: ...
	def get_FirstNonzeroDriftBin(self) -> int: ...
	def get_FragClass(self) -> Any: ...
	def get_FragEnergy(self) -> float: ...
	def get_FrameBaseAbund(self) -> float: ...
	def get_FrameBaseDriftBin(self) -> int: ...
	def get_FrameBaseMsBin(self) -> int: ...
	def get_FrameId(self) -> int: ...
	def get_FrameMethod(self) -> IImsFrameMethod: ...
	def get_FrameMethodId(self) -> int: ...
	def get_FrameScanTime(self) -> float: ...
	def get_FrameSpecAbundLimit(self) -> float: ...
	def get_FrameTic(self) -> float: ...
	def get_ImsField(self) -> float: ...
	def get_ImsPressure(self) -> float: ...
	def get_ImsTemperature(self) -> float: ...
	def get_ImsTrapPressure(self) -> float: ...
	def get_ImsTrapTime(self) -> float: ...
	def get_IsolationEndMz(self) -> float: ...
	def get_IsolationMz(self) -> float: ...
	def get_IsolationStartMz(self) -> float: ...
	def get_IsolationZ(self) -> int: ...
	def get_LastNonzeroDriftBin(self) -> int: ...
	def get_MassCalOffset(self) -> int: ...
	def get_NumTransients(self) -> int: ...
	def get_ScanRecordDriftBinList(self) -> List[int]: ...
	def get_TimeSegmentId(self) -> int: ...
	def set_ActualsOffset(self, _: int) -> None: ...
	def set_CycleNumber(self, _: int) -> None: ...
	def set_FirstNonzeroDriftBin(self, _: int) -> None: ...
	def set_FragClass(self, _: Any) -> None: ...
	def set_FragEnergy(self, _: float) -> None: ...
	def set_FrameBaseAbund(self, _: float) -> None: ...
	def set_FrameBaseDriftBin(self, _: int) -> None: ...
	def set_FrameBaseMsBin(self, _: int) -> None: ...
	def set_FrameId(self, _: int) -> None: ...
	def set_FrameMethod(self, _: IImsFrameMethod) -> None: ...
	def set_FrameMethodId(self, _: int) -> None: ...
	def set_FrameScanTime(self, _: float) -> None: ...
	def set_FrameSpecAbundLimit(self, _: float) -> None: ...
	def set_FrameTic(self, _: float) -> None: ...
	def set_ImsField(self, _: float) -> None: ...
	def set_ImsPressure(self, _: float) -> None: ...
	def set_ImsTemperature(self, _: float) -> None: ...
	def set_ImsTrapPressure(self, _: float) -> None: ...
	def set_ImsTrapTime(self, _: float) -> None: ...
	def set_IsolationEndMz(self, _: float) -> None: ...
	def set_IsolationMz(self, _: float) -> None: ...
	def set_IsolationStartMz(self, _: float) -> None: ...
	def set_IsolationZ(self, _: int) -> None: ...
	def set_LastNonzeroDriftBin(self, _: int) -> None: ...
	def set_MassCalOffset(self, _: int) -> None: ...
	def set_NumTransients(self, _: int) -> None: ...
	def set_TimeSegmentId(self, _: int) -> None: ...

class ImsFrameScanRec:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def BaseAbund(self) -> int: ...

	@BaseAbund.setter
	def BaseAbund(self, value: int): ...

	@property
	def BaseMsBin(self) -> int: ...

	@BaseMsBin.setter
	def BaseMsBin(self, value: int): ...

	@property
	def DetectorGain(self) -> pyms_agilent.enums.IonDetectorGain: ...

	@DetectorGain.setter
	def DetectorGain(self, value: pyms_agilent.enums.IonDetectorGain): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...

	@property
	def FirstNonzeroMsBin(self) -> int: ...

	@FirstNonzeroMsBin.setter
	def FirstNonzeroMsBin(self, value: int): ...

	@property
	def FrameId(self) -> int: ...

	@FrameId.setter
	def FrameId(self, value: int): ...

	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...

	@property
	def ImsDriftBin(self) -> int: ...

	@ImsDriftBin.setter
	def ImsDriftBin(self, value: int): ...

	@property
	def LastNonzeroMsBin(self) -> int: ...

	@LastNonzeroMsBin.setter
	def LastNonzeroMsBin(self, value: int): ...

	def MemberwiseClone(self) -> object: ...

	@property
	def MsPeakByteCount(self) -> int: ...

	@MsPeakByteCount.setter
	def MsPeakByteCount(self, value: int): ...

	@property
	def MsPeakMaxX(self) -> float: ...

	@MsPeakMaxX.setter
	def MsPeakMaxX(self, value: float): ...

	@property
	def MsPeakMinX(self) -> float: ...

	@MsPeakMinX.setter
	def MsPeakMinX(self, value: float): ...

	@property
	def MsPeakOffset(self) -> int: ...

	@MsPeakOffset.setter
	def MsPeakOffset(self, value: int): ...

	@property
	def MsPeakPointCount(self) -> int: ...

	@MsPeakPointCount.setter
	def MsPeakPointCount(self, value: int): ...

	@property
	def MsPeakSpecFmtId(self) -> int: ...

	@MsPeakSpecFmtId.setter
	def MsPeakSpecFmtId(self, value: int): ...

	@property
	def MsProfByteCount(self) -> int: ...

	@MsProfByteCount.setter
	def MsProfByteCount(self, value: int): ...

	@property
	def MsProfFullByteCount(self) -> int: ...

	@MsProfFullByteCount.setter
	def MsProfFullByteCount(self, value: int): ...

	@property
	def MsProfNzPointCount(self) -> int: ...

	@MsProfNzPointCount.setter
	def MsProfNzPointCount(self, value: int): ...

	@property
	def MsProfOffset(self) -> int: ...

	@MsProfOffset.setter
	def MsProfOffset(self, value: int): ...

	@property
	def MsProfPointCount(self) -> int: ...

	@MsProfPointCount.setter
	def MsProfPointCount(self, value: int): ...

	@property
	def MsProfSpecFmtId(self) -> int: ...

	@MsProfSpecFmtId.setter
	def MsProfSpecFmtId(self, value: int): ...

	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ScanId(self) -> int: ...

	@ScanId.setter
	def ScanId(self, value: int): ...

	@property
	def TfsBasePeakAbund(self) -> float: ...

	@TfsBasePeakAbund.setter
	def TfsBasePeakAbund(self, value: float): ...

	@property
	def TfsBasePeakMz(self) -> float: ...

	@TfsBasePeakMz.setter
	def TfsBasePeakMz(self, value: float): ...

	@property
	def Tic(self) -> float: ...

	@Tic.setter
	def Tic(self, value: float): ...

	def ToString(self) -> str: ...
	def get_BaseAbund(self) -> int: ...
	def get_BaseMsBin(self) -> int: ...
	def get_DetectorGain(self) -> pyms_agilent.enums.IonDetectorGain: ...
	def get_FirstNonzeroMsBin(self) -> int: ...
	def get_FrameId(self) -> int: ...
	def get_ImsDriftBin(self) -> int: ...
	def get_LastNonzeroMsBin(self) -> int: ...
	def get_MsPeakByteCount(self) -> int: ...
	def get_MsPeakMaxX(self) -> float: ...
	def get_MsPeakMinX(self) -> float: ...
	def get_MsPeakOffset(self) -> int: ...
	def get_MsPeakPointCount(self) -> int: ...
	def get_MsPeakSpecFmtId(self) -> int: ...
	def get_MsProfByteCount(self) -> int: ...
	def get_MsProfFullByteCount(self) -> int: ...
	def get_MsProfNzPointCount(self) -> int: ...
	def get_MsProfOffset(self) -> int: ...
	def get_MsProfPointCount(self) -> int: ...
	def get_MsProfSpecFmtId(self) -> int: ...
	def get_ScanId(self) -> int: ...
	def get_TfsBasePeakAbund(self) -> float: ...
	def get_TfsBasePeakMz(self) -> float: ...
	def get_Tic(self) -> float: ...
	def set_BaseAbund(self, _: int) -> None: ...
	def set_BaseMsBin(self, _: int) -> None: ...
	def set_DetectorGain(self, _: pyms_agilent.enums.IonDetectorGain) -> None: ...
	def set_FirstNonzeroMsBin(self, _: int) -> None: ...
	def set_FrameId(self, _: int) -> None: ...
	def set_ImsDriftBin(self, _: int) -> None: ...
	def set_LastNonzeroMsBin(self, _: int) -> None: ...
	def set_MsPeakByteCount(self, _: int) -> None: ...
	def set_MsPeakMaxX(self, _: float) -> None: ...
	def set_MsPeakMinX(self, _: float) -> None: ...
	def set_MsPeakOffset(self, _: int) -> None: ...
	def set_MsPeakPointCount(self, _: int) -> None: ...
	def set_MsPeakSpecFmtId(self, _: int) -> None: ...
	def set_MsProfByteCount(self, _: int) -> None: ...
	def set_MsProfFullByteCount(self, _: int) -> None: ...
	def set_MsProfNzPointCount(self, _: int) -> None: ...
	def set_MsProfOffset(self, _: int) -> None: ...
	def set_MsProfPointCount(self, _: int) -> None: ...
	def set_MsProfSpecFmtId(self, _: int) -> None: ...
	def set_ScanId(self, _: int) -> None: ...
	def set_TfsBasePeakAbund(self, _: float) -> None: ...
	def set_TfsBasePeakMz(self, _: float) -> None: ...
	def set_Tic(self, _: float) -> None: ...

class BDASpecFilter:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDASpecFilter: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ScanMethodNumber(self): ...

	@ScanMethodNumber.setter
	def ScanMethodNumber(self, value): ...

	def ToString(self) -> str: ...
	def get_ScanMethodNumber(self) -> int: ...
	def set_ScanMethodNumber(self, _: int) -> None: ...

class ImsFrameMethod:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class PointValueFormat:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> PointValueFormat: ...

	@property
	def DataType(self): ...

	@DataType.setter
	def DataType(self, value): ...

	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...

	@property
	def PointValueID(self): ...

	@PointValueID.setter
	def PointValueID(self, value): ...

	def ReferenceEquals(self, _: object, __: object) -> bool: ...

	@property
	def ScaleFactor(self): ...

	@ScaleFactor.setter
	def ScaleFactor(self, value): ...

	@property
	def StorageScheme(self): ...

	@StorageScheme.setter
	def StorageScheme(self, value): ...

	def ToString(self) -> str: ...

	@property
	def Type(self): ...

	@Type.setter
	def Type(self, value): ...

	def get_DataType(self) -> pyms_agilent.enums.DataFileValueDataType: ...
	def get_PointValueID(self) -> int: ...
	def get_ScaleFactor(self) -> float: ...
	def get_StorageScheme(self) -> pyms_agilent.enums.PointValueStorageScheme: ...
	def get_Type(self) -> pyms_agilent.enums.DataValueType: ...
	def set_DataType(self, _: pyms_agilent.enums.DataFileValueDataType) -> None: ...
	def set_PointValueID(self, _: int) -> None: ...
	def set_ScaleFactor(self, _: float) -> None: ...
	def set_StorageScheme(self, _: pyms_agilent.enums.PointValueStorageScheme) -> None: ...
	def set_Type(self, _: pyms_agilent.enums.DataValueType) -> None: ...

class BDAActualData:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IBDAActualData: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class MsdrChargeStateAssignmentFilter:
	def __init__(self, *args, **kwargs) -> None: ...
	def Equals(self, _: object, __: object) -> bool: ...
	def Finalize(self) -> None: ...
	def GetHashCode(self) -> int: ...
	def GetType(self) -> Type: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToString(self) -> str: ...

class IFragEnergySegmentEndPoint:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IFragEnergySegmentEndPoint: ...

	@property
	def DriftBin(self): ...

	@DriftBin.setter
	def DriftBin(self, value): ...

	@property
	def FragmentationEnergy(self): ...

	@FragmentationEnergy.setter
	def FragmentationEnergy(self, value): ...

	def get_DriftBin(self) -> int: ...
	def get_FragmentationEnergy(self) -> float: ...
	def set_DriftBin(self, _: int) -> None: ...
	def set_FragmentationEnergy(self, _: float) -> None: ...

class IBdaMsScanRecInfo:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def AbundanceLimit(self): ...

	@AbundanceLimit.setter
	def AbundanceLimit(self, value): ...

	@property
	def ActualsOffset(self): ...

	@ActualsOffset.setter
	def ActualsOffset(self, value): ...

	@property
	def BasePeakAbundance(self): ...

	@BasePeakAbundance.setter
	def BasePeakAbundance(self, value): ...

	@property
	def BasePeakMz(self): ...

	@BasePeakMz.setter
	def BasePeakMz(self, value): ...

	@property
	def ChargeState(self): ...

	@ChargeState.setter
	def ChargeState(self, value): ...

	@property
	def ChromScaleFactor(self): ...

	@ChromScaleFactor.setter
	def ChromScaleFactor(self, value): ...

	def Clone(self) -> IBdaMsScanRecInfo: ...

	@property
	def CollisionEnergy(self): ...

	@CollisionEnergy.setter
	def CollisionEnergy(self, value): ...

	@property
	def CollisionEnergyIsDynamic(self): ...

	@CollisionEnergyIsDynamic.setter
	def CollisionEnergyIsDynamic(self, value): ...

	@property
	def CompensationField(self): ...

	@CompensationField.setter
	def CompensationField(self, value): ...

	@property
	def CycleNumber(self): ...

	@CycleNumber.setter
	def CycleNumber(self, value): ...

	@property
	def DdParentMzOfInterest(self): ...

	@DdParentMzOfInterest.setter
	def DdParentMzOfInterest(self, value): ...

	@property
	def DdParentScanId(self): ...

	@DdParentScanId.setter
	def DdParentScanId(self, value): ...

	@property
	def DdScanId1(self): ...

	@DdScanId1.setter
	def DdScanId1(self, value): ...

	@property
	def DdScanId2(self): ...

	@DdScanId2.setter
	def DdScanId2(self, value): ...

	@property
	def DdScanId3(self): ...

	@DdScanId3.setter
	def DdScanId3(self, value): ...

	@property
	def DefaultCalibrationId(self): ...

	@DefaultCalibrationId.setter
	def DefaultCalibrationId(self, value): ...

	@property
	def DispersionField(self): ...

	@DispersionField.setter
	def DispersionField(self, value): ...

	@property
	def DwellTime(self): ...

	@DwellTime.setter
	def DwellTime(self, value): ...

	@property
	def FragmentationMode(self): ...

	@FragmentationMode.setter
	def FragmentationMode(self, value): ...

	@property
	def Fragmentor(self): ...

	@Fragmentor.setter
	def Fragmentor(self, value): ...

	@property
	def FragmentorIsDynamic(self): ...

	@FragmentorIsDynamic.setter
	def FragmentorIsDynamic(self, value): ...

	@property
	def IonPolarity(self): ...

	@IonPolarity.setter
	def IonPolarity(self, value): ...

	@property
	def IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...

	@IonizationMode.setter
	def IonizationMode(self, value: pyms_agilent.enums.IonizationMode): ...

	@property
	def MassCalOffset(self): ...

	@MassCalOffset.setter
	def MassCalOffset(self, value): ...

	@property
	def MeasuredMassRange(self): ...

	@MeasuredMassRange.setter
	def MeasuredMassRange(self, value): ...

	@property
	def MsLevel(self): ...

	@MsLevel.setter
	def MsLevel(self, value): ...

	@property
	def MsScanType(self): ...

	@MsScanType.setter
	def MsScanType(self, value): ...

	@property
	def MzIsolationWidth(self): ...

	@MzIsolationWidth.setter
	def MzIsolationWidth(self, value): ...

	@property
	def MzOfInterest(self): ...

	@MzOfInterest.setter
	def MzOfInterest(self, value): ...

	@property
	def NumActualsPerScan(self): ...

	@NumActualsPerScan.setter
	def NumActualsPerScan(self, value): ...

	@property
	def ScanId(self): ...

	@ScanId.setter
	def ScanId(self, value): ...

	@property
	def ScanMethNumber(self): ...

	@ScanMethNumber.setter
	def ScanMethNumber(self, value): ...

	@property
	def ScanTime(self): ...

	@ScanTime.setter
	def ScanTime(self, value): ...

	@property
	def Status(self): ...

	@Status.setter
	def Status(self, value): ...

	@property
	def TIC(self): ...

	@TIC.setter
	def TIC(self, value): ...

	@property
	def Threshold(self): ...

	@Threshold.setter
	def Threshold(self, value): ...

	@property
	def TimeSegmentId(self): ...

	@TimeSegmentId.setter
	def TimeSegmentId(self, value): ...

	@property
	def XSamplingPeriod(self): ...

	@XSamplingPeriod.setter
	def XSamplingPeriod(self, value): ...

	@property
	def XSpecificByteCount(self): ...

	@XSpecificByteCount.setter
	def XSpecificByteCount(self, value): ...

	@property
	def XSpecificOffset(self): ...

	@XSpecificOffset.setter
	def XSpecificOffset(self, value): ...

	def get_AbundanceLimit(self) -> float: ...
	def get_ActualsOffset(self) -> int: ...
	def get_BasePeakAbundance(self) -> float: ...
	def get_BasePeakMz(self) -> float: ...
	def get_ChargeState(self) -> int: ...
	def get_ChromScaleFactor(self) -> float: ...
	def get_CollisionEnergy(self) -> float: ...
	def get_CollisionEnergyIsDynamic(self) -> bool: ...
	def get_CompensationField(self) -> float: ...
	def get_CycleNumber(self) -> int: ...
	def get_DdParentMzOfInterest(self) -> float: ...
	def get_DdParentScanId(self) -> int: ...
	def get_DdScanId1(self) -> int: ...
	def get_DdScanId2(self) -> int: ...
	def get_DdScanId3(self) -> int: ...
	def get_DefaultCalibrationId(self) -> int: ...
	def get_DispersionField(self) -> float: ...
	def get_DwellTime(self) -> int: ...
	def get_FragmentationMode(self) -> pyms_agilent.enums.FragmentationMode: ...
	def get_Fragmentor(self) -> float: ...
	def get_FragmentorIsDynamic(self) -> bool: ...
	def get_IonPolarity(self) -> pyms_agilent.enums.IonPolarity: ...
	def get_IonizationMode(self) -> pyms_agilent.enums.IonizationMode: ...
	def get_MassCalOffset(self) -> int: ...
	def get_MeasuredMassRange(self) -> IRange: ...
	def get_MsLevel(self) -> pyms_agilent.enums.MSLevel: ...
	def get_MsScanType(self) -> pyms_agilent.enums.MSScanType: ...
	def get_MzIsolationWidth(self) -> float: ...
	def get_MzOfInterest(self) -> float: ...
	def get_NumActualsPerScan(self) -> int: ...
	def get_ScanId(self) -> int: ...
	def get_ScanMethNumber(self) -> int: ...
	def get_ScanTime(self) -> float: ...
	def get_Status(self) -> int: ...
	def get_TIC(self) -> float: ...
	def get_Threshold(self) -> float: ...
	def get_TimeSegmentId(self) -> int: ...
	def get_XSamplingPeriod(self) -> float: ...
	def get_XSpecificByteCount(self) -> int: ...
	def get_XSpecificOffset(self) -> int: ...

class IEicRtMzRanges:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clear(self) -> None: ...

	@property
	def ID(self): ...

	@ID.setter
	def ID(self, value): ...

	@property
	def MzList(self): ...

	@MzList.setter
	def MzList(self, value): ...

	@property
	def MzRangeList(self): ...

	@MzRangeList.setter
	def MzRangeList(self, value): ...

	@property
	def RtMax(self): ...

	@RtMax.setter
	def RtMax(self, value): ...

	@property
	def RtMin(self): ...

	@RtMin.setter
	def RtMin(self, value): ...

	def get_ID(self) -> int: ...
	def get_MzList(self) -> List[float]: ...
	def get_MzRangeList(self) -> List[IRange]: ...
	def get_RtMax(self) -> float: ...
	def get_RtMin(self) -> float: ...
	def set_ID(self, _: int) -> None: ...
	def set_MzList(self, _: List[float]) -> None: ...
	def set_MzRangeList(self, _: List[IRange]) -> None: ...
	def set_RtMax(self, _: float) -> None: ...
	def set_RtMin(self, _: float) -> None: ...

class LwPeakAttribute:
	def __init__(self, *args, **kwargs) -> None: ...
	def ApexY(self, *args, **kwargs) -> Any: ...
	def Area(self, *args, **kwargs) -> Any: ...
	def BaseEndFlag(self, *args, **kwargs) -> Any: ...
	def BaseEndY(self, *args, **kwargs) -> Any: ...
	def BaseStartFlag(self, *args, **kwargs) -> Any: ...
	def BaseStartY(self, *args, **kwargs) -> Any: ...
	def Base1EndX(self, *args, **kwargs) -> Any: ...
	def Base1StartX(self, *args, **kwargs) -> Any: ...
	def Base2EndX(self, *args, **kwargs) -> Any: ...
	def Base2StartX(self, *args, **kwargs) -> Any: ...
	def CenterX(self, *args, **kwargs) -> Any: ...
	def ClusterId(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def EndIndex(self, *args, **kwargs) -> Any: ...
	def EndX(self, *args, **kwargs) -> Any: ...
	def EndY(self, *args, **kwargs) -> Any: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def Fwhm(self, *args, **kwargs) -> Any: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Height(self, *args, **kwargs) -> Any: ...
	def IonSpecies(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def MemberwiseClone(self) -> object: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Resolution(self, *args, **kwargs) -> Any: ...
	def StartIndex(self, *args, **kwargs) -> Any: ...
	def StartX(self, *args, **kwargs) -> Any: ...
	def StartY(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def WarningFlag(self, *args, **kwargs) -> Any: ...
	def Z(self, *args, **kwargs) -> Any: ...

class LwPeakEndFlags:
	def __init__(self, *args, **kwargs) -> None: ...
	def Baseline(self, *args, **kwargs) -> Any: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def ForcedPeak(self, *args, **kwargs) -> Any: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def Horizontal(self, *args, **kwargs) -> Any: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def ManualPeak(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def NoFlags(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def Penetration(self, *args, **kwargs) -> Any: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...
	def Valley(self, *args, **kwargs) -> Any: ...

class LwPeakWarning:
	def __init__(self, *args, **kwargs) -> None: ...
	def CompareTo(self, _: object) -> int: ...
	def Equals(self, _: object) -> bool: ...
	def Finalize(self) -> None: ...
	def Format(self, _: Type, __: object, ___: str) -> str: ...
	def GetHashCode(self) -> int: ...
	def GetName(self, _: Type, __: object) -> str: ...
	def GetNames(self, _: Type) -> List[str]: ...
	def GetType(self) -> Type: ...
	def GetTypeCode(self) -> Any: ...
	def GetUnderlyingType(self, _: Type) -> Type: ...
	def GetValues(self, _: Type) -> List: ...
	def HasFlag(self, _: Enum) -> bool: ...
	def IsDefined(self, _: Type, __: object) -> bool: ...
	def Manual(self, *args, **kwargs) -> Any: ...
	def MemberwiseClone(self) -> object: ...
	def NoFlags(self, *args, **kwargs) -> Any: ...
	def Overloads(self, *args, **kwargs) -> Any: ...
	def Parse(self, _: Type, __: str, ___: bool) -> object: ...
	def ReferenceEquals(self, _: object, __: object) -> bool: ...
	def Saturated(self, *args, **kwargs) -> Any: ...
	def ToObject(self, _: Type, __: object) -> object: ...
	def ToString(self, _: str, __: Any) -> str: ...
	def TryParse(self, *args, **kwargs) -> Any: ...

class IImsScanRecord:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def BaseAbund(self): ...

	@BaseAbund.setter
	def BaseAbund(self, value): ...

	@property
	def BaseMsBin(self): ...

	@BaseMsBin.setter
	def BaseMsBin(self, value): ...

	def Clone(self) -> IImsScanRecord: ...

	@property
	def DetectorGain(self): ...

	@DetectorGain.setter
	def DetectorGain(self, value): ...

	@property
	def DriftBin(self): ...

	@DriftBin.setter
	def DriftBin(self, value): ...

	@property
	def FirstNzMsBin(self): ...

	@FirstNzMsBin.setter
	def FirstNzMsBin(self, value): ...

	@property
	def Frame(self): ...

	@Frame.setter
	def Frame(self, value): ...

	@property
	def FrameID(self): ...

	@FrameID.setter
	def FrameID(self, value): ...

	@property
	def LastNzMsBin(self): ...

	@LastNzMsBin.setter
	def LastNzMsBin(self, value): ...

	@property
	def PeakParams(self): ...

	@PeakParams.setter
	def PeakParams(self, value): ...

	@property
	def ProfileParams(self): ...

	@ProfileParams.setter
	def ProfileParams(self, value): ...

	@property
	def ScanId(self): ...

	@ScanId.setter
	def ScanId(self, value): ...

	@property
	def TfsBaseAbund(self): ...

	@TfsBaseAbund.setter
	def TfsBaseAbund(self, value): ...

	@property
	def TfsBaseMz(self): ...

	@TfsBaseMz.setter
	def TfsBaseMz(self, value): ...

	@property
	def Tic(self): ...

	@Tic.setter
	def Tic(self, value): ...

	def get_BaseAbund(self) -> int: ...
	def get_BaseMsBin(self) -> int: ...
	def get_DetectorGain(self) -> pyms_agilent.enums.IonDetectorGain: ...
	def get_DriftBin(self) -> int: ...
	def get_FirstNzMsBin(self) -> int: ...
	def get_Frame(self) -> IImsFrameRecord: ...
	def get_FrameID(self) -> int: ...
	def get_LastNzMsBin(self) -> int: ...
	def get_PeakParams(self) -> IMsSpecAccessParams: ...
	def get_ProfileParams(self) -> IMsSpecAccessParams: ...
	def get_ScanId(self) -> int: ...
	def get_TfsBaseAbund(self) -> float: ...
	def get_TfsBaseMz(self) -> float: ...
	def get_Tic(self) -> float: ...

class IMsSpecAccessParams:
	def __init__(self, *args, **kwargs) -> None: ...

	@property
	def ByteCount(self): ...

	@ByteCount.setter
	def ByteCount(self, value): ...

	@property
	def ByteOffset(self): ...

	@ByteOffset.setter
	def ByteOffset(self, value): ...

	def Clone(self) -> IMsSpecAccessParams: ...

	@property
	def FullByteCount(self): ...

	@FullByteCount.setter
	def FullByteCount(self, value): ...

	@property
	def MaxMz(self): ...

	@MaxMz.setter
	def MaxMz(self, value): ...

	@property
	def MaxY(self): ...

	@MaxY.setter
	def MaxY(self, value): ...

	@property
	def MeasuredNoise(self): ...

	@MeasuredNoise.setter
	def MeasuredNoise(self, value): ...

	@property
	def MinMz(self): ...

	@MinMz.setter
	def MinMz(self, value): ...

	@property
	def MinY(self): ...

	@MinY.setter
	def MinY(self, value): ...

	@property
	def NzPointCount(self): ...

	@NzPointCount.setter
	def NzPointCount(self, value): ...

	@property
	def OneDataRangeDeltaYOffset(self): ...

	@OneDataRangeDeltaYOffset.setter
	def OneDataRangeDeltaYOffset(self, value): ...

	@property
	def PointCount(self): ...

	@PointCount.setter
	def PointCount(self, value): ...

	@property
	def SpecFmtId(self): ...

	@SpecFmtId.setter
	def SpecFmtId(self, value): ...

	@property
	def SpecFmtReference(self): ...

	@SpecFmtReference.setter
	def SpecFmtReference(self, value): ...

	def get_ByteCount(self) -> int: ...
	def get_ByteOffset(self) -> int: ...
	def get_FullByteCount(self) -> int: ...
	def get_MaxMz(self) -> float: ...
	def get_MaxY(self) -> float: ...
	def get_MeasuredNoise(self) -> float: ...
	def get_MinMz(self) -> float: ...
	def get_MinY(self) -> float: ...
	def get_NzPointCount(self) -> int: ...
	def get_OneDataRangeDeltaYOffset(self) -> int: ...
	def get_PointCount(self) -> int: ...
	def get_SpecFmtId(self) -> int: ...
	def get_SpecFmtReference(self) -> IMsSpectrumFmt: ...

class IMsSpectrumFmt:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IMsSpectrumFmt: ...

	@property
	def CompressionScheme(self): ...

	@CompressionScheme.setter
	def CompressionScheme(self, value): ...

	@property
	def ID(self): ...

	@ID.setter
	def ID(self, value): ...

	@property
	def MsStorageMode(self): ...

	@MsStorageMode.setter
	def MsStorageMode(self, value): ...

	@property
	def NumValuesPerPoint(self): ...

	@NumValuesPerPoint.setter
	def NumValuesPerPoint(self, value): ...

	def PointValueFmt(self, _: int) -> IMsValueFmt: ...

	@property
	def XSamplingType(self): ...

	@XSamplingType.setter
	def XSamplingType(self, value): ...

	@property
	def XValueFmt(self): ...

	@XValueFmt.setter
	def XValueFmt(self, value): ...

	@property
	def YValueFmt(self): ...

	@YValueFmt.setter
	def YValueFmt(self, value): ...

	def get_CompressionScheme(self) -> pyms_agilent.enums.CompressionScheme: ...
	def get_ID(self) -> int: ...
	def get_MsStorageMode(self) -> pyms_agilent.enums.MSStorageMode: ...
	def get_NumValuesPerPoint(self) -> int: ...
	def get_XSamplingType(self) -> pyms_agilent.enums.XSamplingType: ...
	def get_XValueFmt(self) -> IMsValueFmt: ...
	def get_YValueFmt(self) -> IMsValueFmt: ...

class IMsValueFmt:
	def __init__(self, *args, **kwargs) -> None: ...
	def Clone(self) -> IMsValueFmt: ...

	@property
	def DataValueType(self): ...

	@DataValueType.setter
	def DataValueType(self, value): ...

	@property
	def FileValueDataType(self): ...

	@FileValueDataType.setter
	def FileValueDataType(self, value): ...

	@property
	def ID(self): ...

	@ID.setter
	def ID(self, value): ...

	@property
	def Label(self): ...

	@Label.setter
	def Label(self, value): ...

	@property
	def ScaleFactor(self): ...

	@ScaleFactor.setter
	def ScaleFactor(self, value): ...

	@property
	def StorageScheme(self): ...

	@StorageScheme.setter
	def StorageScheme(self, value): ...

	def get_DataValueType(self) -> pyms_agilent.enums.DataValueType: ...
	def get_FileValueDataType(self) -> pyms_agilent.enums.DataFileValueDataType: ...
	def get_ID(self) -> int: ...
	def get_Label(self) -> str: ...
	def get_ScaleFactor(self) -> float: ...
	def get_StorageScheme(self) -> pyms_agilent.enums.PointValueStorageScheme: ...

class FrameData:
	def AddSpectrum(self, driftBin: int, abundArray: List[int]): ...
	def AddSpectrumScanRecord(self, driftBin: int, imsScanRec: Any): ...
	def AddSpectrum_2(self, driftBin: int, metrics: Any, encodedArray: List[Any]): ...
	def AddTfsCentroidSpectrum(self, nsArray: List[float], abundArray: List[float]): ...
	def AddTfsProfileScanRecord(self, FirstBin: int, basePeakAbund: float, basePeakMz: float, imsScanRec: Any): ...

	@overload
	def AddTfsProfileSpectrum(self, startNs: float, abundArray: List[int]): ...

	@overload
	def AddTfsProfileSpectrum(
			self,
			basePeakAbund: float,
			basePeakMz: float,
			metrics: Any,
			encodedArray: List[Any],
			): ...

	@property
	def ComDummy_CentroidTfsSpecArrays(self) -> int: ...

	@property
	def ComDummy_FrameSpecScanRecList(self) -> int: ...

	@property
	def ComDummy_FrameSpecYArrayList(self) -> int: ...

	def Equals(self, obj: Any) -> bool: ...
	def FinalizeForStorage(self, nextScanId: int, defaultCal: Any): ...
	def FinalizeForStorage_2(self, value: bool, makeCentroidTfs: int, nextScanId: Any, defaultCal: Any): ...

	@property
	def FrameBinRecord(self) -> IImsFrameRecord: ...

	@property
	def FrameId(self) -> int: ...

	@FrameId.setter
	def FrameId(self, value: int): ...

	@property
	def FrameMethod(self) -> IImsFrameMethod: ...

	@FrameMethod.setter
	def FrameMethod(self, value: IImsFrameMethod): ...

	@property
	def FrameScanCount(self) -> int: ...

	def FrameSpecScanRec(self, specIdx: int) -> Any: ...
	def FrameSpecYArray(self, specIdx: int) -> List[Any]: ...

	@property
	def FrameSpecYArrayCompression(self) -> Any: ...

	@property
	def FrameSpectrumCount(self) -> int: ...

	@property
	def IsFinalizedForStorage(self) -> bool: ...

	@property
	def ProfileTfsSpecFirstBin(self) -> int: ...

	@property
	def ProfileTfsSpecYArray(self) -> List: ...

	@property
	def TfsScanRecord(self): ...

	@property
	def TfsSpecYArrayCompression(self) -> Any: ...

	@property
	def ToString(self) -> str: ...

	def ValidateForStorage(self, validationMsg: str) -> bool: ...

	@property
	def XStartDeltaArray(self) -> List[float]: ...

class _PointValueFormat:

	@property
	def DataType(self) -> pyms_agilent.enums.DataFileValueDataType: ...

	@DataType.setter
	def DataType(self, value: pyms_agilent.enums.DataFileValueDataType): ...

	def Equals(self, obj: Any) -> bool: ...

	@property
	def ScaleFactor(self) -> float: ...

	@ScaleFactor.setter
	def ScaleFactor(self, value: float): ...

	@property
	def StorageScheme(self) -> pyms_agilent.enums.PointValueStorageScheme: ...

	@StorageScheme.setter
	def StorageScheme(self, value: pyms_agilent.enums.PointValueStorageScheme): ...

	@property
	def Type(self) -> pyms_agilent.enums.DataValueType: ...

	@Type.setter
	def Type(self, value: pyms_agilent.enums.DataValueType): ...
